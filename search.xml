<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>butterfly主题魔改教程</title>
      <link href="/2021/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9%E6%95%99%E7%A8%8B/"/>
      <url>/2021/09/18/butterfly%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入哔哩哔哩视频"><a href="#嵌入哔哩哔哩视频" class="headerlink" title="嵌入哔哩哔哩视频"></a>嵌入哔哩哔哩视频</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=206890880&amp;bvid=BV1Ah411z7Po&amp;cid=378344365&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute; height: 100%; width: 100%;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=206890880&bvid=BV1Ah411z7Po&cid=378344365&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/09/16/hello-world/"/>
      <url>/2021/09/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=206890880&bvid=BV1Ah411z7Po&cid=378344365&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World2</title>
      <link href="/2021/09/16/hello-world2/"/>
      <url>/2021/09/16/hello-world2/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World3</title>
      <link href="/2021/09/16/hello-world3/"/>
      <url>/2021/09/16/hello-world3/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World4</title>
      <link href="/2021/09/16/hello-world4/"/>
      <url>/2021/09/16/hello-world4/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;......................&#x27;</span>);</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>恋上数据结构与算法(第一季)</title>
      <link href="/2021/09/14/yuque/%E6%81%8B%E4%B8%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E7%AC%AC%E4%B8%80%E5%AD%A3)/"/>
      <url>/2021/09/14/yuque/%E6%81%8B%E4%B8%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E7%AC%AC%E4%B8%80%E5%AD%A3)/</url>
      
        <content type="html"><![CDATA[<h2 id="1、学前准备"><a href="#1、学前准备" class="headerlink" title="1、学前准备"></a>1、学前准备</h2><h3 id="1、选择语言"><a href="#1、选择语言" class="headerlink" title="1、选择语言"></a>1、选择语言</h3><p>为什么选择 Java？</p><ul><li>C 语言：非面向对象，写法复杂，大量内存管理</li><li>C++：写法复杂，大量内存管理</li><li>Objective-C、Swift：需要 Mac 系统</li><li>JavaScript、Python：依赖于脚本解析器，同一个使用不同写法会影响代码性能，影响算法性能测评</li><li><strong>Java</strong>：语法丰富严谨，更多的注意力可以放在业务逻辑上，建议使用至少 Java8。</li></ul><h3 id="2、开发环境"><a href="#2、开发环境" class="headerlink" title="2、开发环境"></a>2、开发环境</h3><p>开发工具选择 <a href="https://www.jetbrains.com/zh-cn/idea/download/download-thanks.html?platform=windows">IDEA</a>，JDK 选择 1.8，其实 Java 开发环境只要是一名 Java 开发程序员应该都会，就算不是 Java 开发程序员，只要有过面向对象的开发，那么搭建一个 Java 的开发环境和入门 Java 还是挺简单的。网上可以搜到很多搭建 Java 开发环境和使用 IDEA 工具的文章，或者下次我会专门写一篇这样的文章，来讲如何搭建 Java 开发环境和如何使用 IDEA 工具。<br>打开 IDEA，选择新建一个空项目 <code>algorithm-learning</code><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631623745976-394ca177-0242-414f-b075-4b8ee1c66ca4.png#clientId=u6df03ac5-bf9d-4&from=paste&height=520&id=u6ed2a148&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1040&originWidth=1920&originalType=url%E2%88%B6=1&size=310931&status=done&style=none&taskId=ue3486946-bbcd-4d44-9af2-15e8c9e3501&width=960" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631623745266-924075b5-6094-4cc9-b352-c37b2dddef79.png#clientId=u6df03ac5-bf9d-4&from=paste&height=516&id=ub547c678&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1032&originWidth=1202&originalType=url%E2%88%B6=1&size=89843&status=done&style=none&taskId=uaa928fa8-fd22-40c4-8483-12118d751d7&width=601" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631623745703-ae9be7e1-b383-441e-8e9e-619881b39796.png#clientId=u6df03ac5-bf9d-4&from=paste&height=516&id=uede5f8bf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1032&originWidth=1202&originalType=url%E2%88%B6=1&size=56143&status=done&style=none&taskId=u86471b02-fc23-4601-ab60-2746697a8b6&width=601" alt="image.png"><br>如果以后想实现一个算法，那么可以在该项目中加入不同的 module，来实现不同的算法。<br>打开 project-Structure。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631623749098-97710888-3084-41c9-b89f-89d0e3b035fd.png#clientId=u6df03ac5-bf9d-4&from=paste&height=520&id=u744584fc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1040&originWidth=1920&originalType=url%E2%88%B6=1&size=386083&status=done&style=none&taskId=u7a3fbfcd-ce34-4368-8698-f30671b1972&width=960" alt="image.png"><br>往该项目添加 module。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631623747046-6627142b-d0c2-4fbd-b552-ad800a05aa19.png#clientId=u6df03ac5-bf9d-4&from=paste&height=438&id=ubab35ee0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=875&originWidth=1730&originalType=url%E2%88%B6=1&size=77588&status=done&style=none&taskId=u513ba0eb-1927-4656-8160-eab2b285df9&width=865" alt="image.png"><br>选择 Java 项目。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631623747421-21828f79-6b13-439f-a2e8-ffefbabc7172.png#clientId=u6df03ac5-bf9d-4&from=paste&height=516&id=uaed0d300&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1032&originWidth=1202&originalType=url%E2%88%B6=1&size=121146&status=done&style=none&taskId=u603899c5-4ea0-4042-9f47-77037d4ab9c&width=601" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631623748461-1abbd2c8-ba6d-495b-9bc7-570de3cef7ee.png#clientId=u6df03ac5-bf9d-4&from=paste&height=516&id=u3382e433&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1032&originWidth=1202&originalType=url%E2%88%B6=1&size=57799&status=done&style=none&taskId=ue8ed529a-c707-4a05-bcba-e121243b5ca&width=601" alt="image.png"><br>点击 OK 之后，就出现了如下界面，使用的是 JDK1.8。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631623748308-9d5f3bd3-37ba-47d9-ab9d-a6ca2af6b8d0.png#clientId=u6df03ac5-bf9d-4&from=paste&id=u1276a186&margin=%5Bobject%20Object%5D&name=image.png&originHeight=298&originWidth=507&originalType=url%E2%88%B6=1&size=84581&status=done&style=none&taskId=ua640f292-269f-4279-bae6-103babf7a7f" alt="image.png"><br>创建一个测试类，编写一个 main 方法，用于书写和测试你的算法。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631623749053-8d118fae-ee0e-476e-b5ba-46320f69dcb7.png#clientId=u6df03ac5-bf9d-4&from=paste&height=520&id=u2be92a53&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1039&originWidth=1916&originalType=url%E2%88%B6=1&size=948221&status=done&style=none&taskId=u5327d449-6c32-44cb-99c0-379eadbf1c6&width=958" alt="image.png"></p><h3 id="3、算法复杂度"><a href="#3、算法复杂度" class="headerlink" title="3、算法复杂度"></a>3、算法复杂度</h3><blockquote><p>算法是用于解决特定问题的一系列的执行步骤。</p></blockquote><p>使用不同的算法，解决同一个问题，效率可能相差非常大。那么如何评判一个算法的好坏呢？<br>如果单从执行效率上进行评估，可能会想到一种方案：比较不同算法对同一组输入的执行处理时间。这种方案也叫做：事后统计法。<br>上述的方案有比较明显的缺点：</p><ul><li>执行时间严重依赖硬件以及运行时各种不确定的环境因素</li><li>必须编写相应的测算代码</li><li>测试数据的选择比较难保证公正性</li></ul><p>所以一般从以下维度来评估算法的优劣：</p><ol><li>正确性、可读性、健壮性（对不合理输入的反应能力和处理能力）</li><li>时间复杂度：估算程序指令的执行次数（执行时间）</li><li>空间复杂度：估算所需占用的存储空间</li></ol><p><strong>大 O 表示法</strong>重要</p><ul><li>一般用大 O 表示法来描述复杂度，它表示的是数据规模 n 对应的复杂度</li><li>忽略常数、系数、低阶<ul><li>9 &gt;&gt; O(1)</li><li>2n+3 &gt;&gt; O(n)</li><li>n2+2n+6 &gt;&gt; O(n2)</li><li>4n3+3n2+22n+100 &gt;&gt; O(n3)</li></ul></li><li>对数阶一般省略底数，如 log2N = log29 * log9N，所以 log2N 、log9N 统称为 logN</li></ul><p>注意：大 O 表示法仅仅是一种粗略的分析模型，是一种估算，能帮助我们短时间内了解一个算法的执行效率。</p><table><thead><tr><th>执行次数</th><th>复杂度</th><th>非正式术语</th></tr></thead><tbody><tr><td>12</td><td>O(1)</td><td>常数阶</td></tr><tr><td>2n+3</td><td>O(n)</td><td>线行阶</td></tr><tr><td>4n2+2n+6</td><td>O(n2)</td><td>平方阶</td></tr><tr><td>4log2n+25</td><td>O(logn)</td><td>对数阶</td></tr><tr><td>3n+2nlog2n+15</td><td>O(nlogn)</td><td>nlogn 阶</td></tr><tr><td>4n3+3n2+22n+100</td><td>O(n3)</td><td>立方阶</td></tr><tr><td>2n</td><td>O(2n)</td><td>指数阶</td></tr></tbody></table><p>其中 O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n2) &lt; O(n3) &lt; O(2n) &lt; O(n!) &lt; O(nn)<br>所以，算法的优化方向：</p><ul><li>用尽量少的存储空间</li><li>用尽量少的执行步骤（执行时间）</li></ul><p>可以根据情况，用空间换时间或时间换空间。</p><h3 id="4、LeetCode"><a href="#4、LeetCode" class="headerlink" title="4、LeetCode"></a>4、<a href="https://leetcode-cn.com/problemset/all/">LeetCode</a></h3><p>LeetCode 收录了许多互联网公司的算法题目，以及许多大牛都在上面发布了题解，可以说该网站是一个非常好的刷题网站。<br>TODO 在 IDEA 中安装 leetcode 插件，用于上班时间摸鱼刷题。</p><h2 id="2、线性表"><a href="#2、线性表" class="headerlink" title="2、线性表"></a>2、线性表</h2><blockquote><p>什么是数据结构？数据结构是计算机存储、组织数据的方式。在实际应用中，根据使用场景来选择最合适的数据结构。</p></blockquote><p>线性表：是具有 n 个相同类型元素的有限序列（n &gt;= 0）。<br>其中，a1 是首节点（首元素），an 是尾节点（尾元素）；a1 是 a2 的前驱，a2 是 a1 的后继。<br>常见的线性表：数组，链表，栈，队列，哈希表。</p><h3 id="1、数组"><a href="#1、数组" class="headerlink" title="1、数组"></a>1、数组</h3><p>数组：是一种顺序存储的线性表，所有元素的内存地址是连续的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631632008136-c8c38ac6-2479-4f63-a6b2-641200d3f217.png#clientId=u6df03ac5-bf9d-4&from=paste&height=584&id=udc7d340f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=584&originWidth=840&originalType=binary%E2%88%B6=1&size=49875&status=done&style=none&taskId=u0a4cfe6d-457a-478b-acc6-027769ba127&width=840" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Typora + PicGo + Github</title>
      <link href="/2021/09/06/yuque/Typora%20+%20PicGo%20+%20Github/"/>
      <url>/2021/09/06/yuque/Typora%20+%20PicGo%20+%20Github/</url>
      
        <content type="html"><![CDATA[<h2 id="PicGo-免费开源的图片上传与管理工具"><a href="#PicGo-免费开源的图片上传与管理工具" class="headerlink" title="PicGo - 免费开源的图片上传与管理工具"></a>PicGo - 免费开源的图片上传与管理工具</h2><p>我们平时在写 <a href="https://www.markdownguide.org/">Markdown</a>、博客、技术文档的时候，经常要插入图片。然而要贴图（上传图片）时还得登录图床网站/服务器去手动上传和复制链接，操作比较繁琐。<br><strong>PicGo</strong> 是一款开源跨平台的免费上传工具以及图床管理工具，它能够帮你快速将图片上传到微博、<a href="https://www.upyun.com/">又拍云</a>、<a href="https://www.aliyun.com/">阿里云 </a>OSS、<a href="https://cloud.tencent.com/?fromSource=gwzcw.2212127.2212127.2212127&utm_medium=cpd&utm_id=gwzcw.2212127.2212127.2212127">腾讯云</a> OSS、<a href="https://www.qiniu.com/">七牛云</a>、<a href="https://github.com/">Github</a>、sm.sm 等常见的图床网站或云存储服务上，并自动复制图片的链接到剪贴板里，使用上非常高效便捷……</p><h2 id="免费开源的图床上传工具应用"><a href="#免费开源的图床上传工具应用" class="headerlink" title="免费开源的图床上传工具应用"></a>免费开源的图床上传工具应用</h2><p><strong>PicGo 图片上传与管理工具</strong>完全免费且开源，跨平台支持 Windows、macOS 和 Linux 系统。它的使用非常简单，只需先设置好图床网站/云存储服务的账号之后，用鼠标将图片拖放到 PicGo 主窗口 / 悬浮窗 / Mac 顶部任务栏图标上面，即可完成图片的上传。<br><strong>PicGo</strong> 会自动从图床服务获取到上传完成成功之后的图片链接，然后保存在剪贴板中供你随处粘贴使用，因此当写作、编辑时需要插入图片，你只需要拖放 + 粘贴两步即可搞定，非常方便！而且软件还支持批量上传多张图片。<br><img src="https://cdn.nlark.com/yuque/0/2021/gif/1554080/1631001371886-7756c5f5-9bf5-459b-8e07-c6371b6ca50b.gif#clientId=u12dfaa0f-cf98-4&from=ui&id=ufa6ac040&margin=%5Bobject%20Object%5D&name=0.gif&originHeight=383&originWidth=680&originalType=binary%E2%88%B6=1&size=3190617&status=done&style=none&taskId=u40ef9225-3547-4f6c-a824-e6256e235bc" alt="0.gif"></p><h2 id="自动获取贴图代码到剪贴板"><a href="#自动获取贴图代码到剪贴板" class="headerlink" title="自动获取贴图代码到剪贴板"></a>自动获取贴图代码到剪贴板</h2><p>图片上传之后，<strong>PicGo</strong> 会自动将图片链接（或贴图代码）复制到剪贴板。**PicGo **工具提供了 5 种图片链接/代码格式供你选择，包括 URL（纯链接）、Markdown 代码、HTML 代码、UBB 代码和自定义。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631001778842-c8d37b6a-1608-4ee9-be14-0f3ea677814e.png#clientId=u12dfaa0f-cf98-4&from=paste&height=450&id=u73edcc39&margin=%5Bobject%20Object%5D&name=image.png&originHeight=450&originWidth=800&originalType=binary%E2%88%B6=1&size=35577&status=done&style=none&taskId=ub4cc65c3-f96c-41ea-b14d-614ce5eda7c&width=800" alt="image.png"></p><h2 id="相册管理"><a href="#相册管理" class="headerlink" title="相册管理"></a>相册管理</h2><p>PicGo 还提供了轻量简单的相册管理功能，可以找到以前上传过的全部图片，在这里你可以对图片进行名称的修改、复制链接、删除、搜索查看等操作。<br><img src="https://cdn.nlark.com/yuque/0/2021/gif/1554080/1631002000377-50326a8f-44cd-482b-8259-783b5cb53c87.gif#clientId=u12dfaa0f-cf98-4&from=ui&id=u2eb90872&margin=%5Bobject%20Object%5D&name=xiangce.gif&originHeight=384&originWidth=680&originalType=binary%E2%88%B6=1&size=749061&status=done&style=none&taskId=u1c1d1d0d-8142-49bc-bed8-2a4d140b63f" alt="xiangce.gif"></p><h2 id="PicGo-Github-搭建图床步骤"><a href="#PicGo-Github-搭建图床步骤" class="headerlink" title="PicGo + Github 搭建图床步骤"></a>PicGo + Github 搭建图床步骤</h2><p>上面讲述了 <strong>PicGo</strong> 如何如何好用，并且可以支持多种图床网站或云存储服务，那么我们所以现在就将这个工具给用起来，利用 <strong>PicGo + Github</strong> 来搭建一款免费好用且稳定的自建图床。</p><h3 id="1、软件准备"><a href="#1、软件准备" class="headerlink" title="1、软件准备"></a>1、软件准备</h3><p>首先下载 <a href="https://github.com/Molunerfinn/PicGo/releases">PicGo </a>软件，我的是 Windows 系统，所以下载 Windows 版本。<br>下载完成之后，双击软件进行安装即可投入使用。</p><h3 id="2、Github-创建仓库和秘钥"><a href="#2、Github-创建仓库和秘钥" class="headerlink" title="2、Github 创建仓库和秘钥"></a>2、Github 创建仓库和秘钥</h3><p>首先在 github 上创建一个仓库，名字什么的按照自己喜好来就可。<br>仓库创建好之后，接着在 github 的开发者设置页面上新建一个访问令牌，等下会用的到。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631002840634-b9266702-037d-4086-b901-2bddcea3610f.png#clientId=u12dfaa0f-cf98-4&from=paste&height=977&id=u40232330&margin=%5Bobject%20Object%5D&name=image.png&originHeight=977&originWidth=1919&originalType=binary%E2%88%B6=1&size=147316&status=done&style=none&taskId=u7d0d4c24-619a-4a77-97f5-00492490f24&width=1919" alt="image.png"><br>点击底下的创建按钮，将会生成一个秘钥，记得保存好，下次访问的时候就不会出现了。</p><h3 id="3、配置-PicGo"><a href="#3、配置-PicGo" class="headerlink" title="3、配置 PicGo"></a>3、配置 PicGo</h3><p>只勾选 github 图床。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631003046013-cff57238-08c7-4af4-8d4b-058ab77ba0d9.png#clientId=u12dfaa0f-cf98-4&from=paste&height=450&id=u92bec19f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=450&originWidth=800&originalType=binary%E2%88%B6=1&size=36499&status=done&style=none&taskId=u854a3ff5-4162-4549-8464-2bc7ab37fd9&width=800" alt="image.png"><br>配置 github 图床。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631003183666-2cff9609-3f93-439a-b724-3ab350dcf769.png#clientId=u12dfaa0f-cf98-4&from=paste&height=450&id=uff40b874&margin=%5Bobject%20Object%5D&name=image.png&originHeight=450&originWidth=800&originalType=binary%E2%88%B6=1&size=36894&status=done&style=none&taskId=u5c64c22e-86d7-4630-8c71-9c6f8719819&width=800" alt="image.png"><br>其中，<br>仓库名称的格式为 用户名 / 仓库名称，比如我的是 xihuanxiaorang/images；<br>分支名称为 <code>main</code>；token 为 我们刚刚创建的访问令牌，将其粘贴到这。<br>配置完成之后，可以点击一下确定，然后将其设置为默认图床，就可以投入使用了。</p><h3 id="4、使用演示"><a href="#4、使用演示" class="headerlink" title="4、使用演示"></a>4、使用演示</h3><p>使用方式非常简单，看一下就会，如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2021/gif/1554080/1631003714053-a1f97097-092c-42ac-9d22-986c96785512.gif#clientId=u12dfaa0f-cf98-4&from=ui&id=uf4f5a5c0&margin=%5Bobject%20Object%5D&name=v2-cd5d75efd614a37d55893d27a7978f40_b.gif&originHeight=368&originWidth=720&originalType=binary%E2%88%B6=1&size=203633&status=done&style=none&taskId=u3823241f-504b-4520-be26-0a7a65a370d" alt="v2-cd5d75efd614a37d55893d27a7978f40_b.gif"></p><h2 id="Typora-上使用-PicGo"><a href="#Typora-上使用-PicGo" class="headerlink" title="Typora 上使用 PicGo"></a>Typora 上使用 PicGo</h2><p>在 **Typora <strong>的 偏好配置 / 图像 中可以设置插入图片时上传图片，配置上传服务为 <strong>PicGo</strong>，</strong>PicGo **的路径为本地 **PicGo **软件的安装目录。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1631004154405-251e211b-e31b-411c-b25e-4eaab8f64d55.png#clientId=u12dfaa0f-cf98-4&from=paste&height=700&id=uf4ce8099&margin=%5Bobject%20Object%5D&name=image.png&originHeight=700&originWidth=802&originalType=binary%E2%88%B6=1&size=41187&status=done&style=none&taskId=ueca84812-daf6-4f00-aee9-d7225ec6072&width=802" alt="image.png"><br>配置好之后，就可以开始我们愉快码字和贴图之旅！加油吧，骚年！！！✿✿✿</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security 开搞！</title>
      <link href="/2021/08/27/yuque/Spring%20Security%20%E5%BC%80%E6%90%9E%EF%BC%81/"/>
      <url>/2021/08/27/yuque/Spring%20Security%20%E5%BC%80%E6%90%9E%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h1><p>常见的权限管理框架有两种，Shiro 和 Spring Security。虽然 Shiro 比 Spring Security 更轻量、简单、易于继承，但是 SpringSecurity 相对于 Shiro 来说，SpringSecurity 提供了更多的诸如<code>LDAP</code> <code>OAuth2</code> <code>ACL</code> <code>SSO</code> <code>OpenID</code> 等诸多的安全认证、鉴权协议，可以按需引用。对认证和鉴权更加灵活，粒度更细。可以结合项目的业务场景进行更加合理的定制化开发。<br>SpringSecurity 因为是利用了 Spring IOC 和 AOP 的特性而无法脱离 Spring 独立存在，而 Shiro 可以独立存在。但是作为一名 java 开发人员，谁又能脱离 Spring 而存在呢！并且随着 Springboot 和 SpringCloud 的到来，Springboot 集成 SpringSecurity 变得非常容易，所以深入学习 SpringSecurity 是一个非常不错的选择，看看 SpringSecurity 到底有何强大之处。</p><h1 id="2、核心功能"><a href="#2、核心功能" class="headerlink" title="2、核心功能"></a>2、核心功能</h1><p>对于一个权限管理框架而言，无论是 Shiro 还是 SpringSecurity，最最最核心的功能就是<strong>认证</strong>(Authentication)和<strong>授权</strong>(Authorization)。<br>简单点来说，认证就是为了证明<strong>你是谁</strong>，而授权是通过认证后的用户所绑定的角色来证明<strong>你可以做什么</strong>。</p><h1 id="3、RBAC-模型"><a href="#3、RBAC-模型" class="headerlink" title="3、RBAC 模型"></a>3、RBAC 模型</h1><p>RBAC 是基于角色的访问控制(Role-Based-Access-Control)的简称。在 RBAC 中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。这样管理都是层级相互依赖的，权限赋予给角色，而把角色又赋予给用户，这样的权限设计很清楚，管理起来很方便。当你拥有某个角色以后，你自然继承了该角色的所有功能。对你的一些操作限制不需要直接与你进行沟通，只需要操作你拥有的角色。</p><h1 id="4、其他一些概念"><a href="#4、其他一些概念" class="headerlink" title="4、其他一些概念"></a>4、其他一些概念</h1><p>比如其他一些常见的安全策略、攻击方式。比如反向代理、网关、壁垒机这种偏运维的知识；CSRF(跨站请求伪造)、XSS(跨站脚本攻击)也需要了解一些。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven</title>
      <link href="/2021/08/20/yuque/maven/"/>
      <url>/2021/08/20/yuque/maven/</url>
      
        <content type="html"><![CDATA[<h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><h3 id="1-1、概念"><a href="#1-1、概念" class="headerlink" title="1.1、概念"></a>1.1、概念</h3><p>Maven 是 Apache 下的一个<strong>纯 Java 开发的开源项目</strong>，是一个<strong>项目构建和管理的工具</strong>。将项目开发和管理过程抽象成一个**项目对象模型(POM)**。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629773817955-4397653b-8a5f-4ce0-bcab-7b366a4afc65.png#clientId=ubb918b72-69ae-4&from=paste&height=304&id=ued8c1ab8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=304&originWidth=637&originalType=binary%E2%88%B6=1&size=48993&status=done&style=shadow&taskId=u49249792-9479-45c1-91e4-86c946ee8d4&width=637" alt="image.png"></p><h3 id="1-2、作用"><a href="#1-2、作用" class="headerlink" title="1.2、作用"></a>1.2、作用</h3><ul><li>项目构建：提供标准的、跨平台的自动化项目构建方式</li><li>依赖管理：方便快捷的管理项目依赖的资源(jar 包)，避免资源间的版本冲突问题</li><li>统一开发结构：提供标准的、统一的项目结构</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629638118550-22fef6a3-c7a9-40e9-b86c-52af0c6c0384.png#clientId=udfc2ec2e-139e-4&from=paste&height=365&id=u7e0c501b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=365&originWidth=477&originalType=binary%E2%88%B6=1&size=114330&status=done&style=shadow&taskId=ue8e01a1a-511e-442e-9636-a6669a51bea&width=477" alt="image.png"></p><h2 id="2、下载与安装"><a href="#2、下载与安装" class="headerlink" title="2、下载与安装"></a>2、下载与安装</h2><h3 id="2-1、下载"><a href="#2-1、下载" class="headerlink" title="2.1、下载"></a>2.1、<a href="https://maven.apache.org/download.cgi">下载</a></h3><p>我们安装在本地，所以选择 windows 版本。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629638396387-bd2dad07-b5c8-4127-8b38-1b12dc8f05a4.png#clientId=udfc2ec2e-139e-4&from=paste&height=328&id=u02aec9db&margin=%5Bobject%20Object%5D&name=image.png&originHeight=328&originWidth=1555&originalType=binary%E2%88%B6=1&size=51592&status=done&style=shadow&taskId=ubc6c1d76-f97d-48ea-ba61-0ba3d8995a2&width=1555" alt="image.png"></p><h3 id="2-2、解压"><a href="#2-2、解压" class="headerlink" title="2.2、解压"></a>2.2、解压</h3><p>因为 maven 是免安装绿色版本，所以直接解压即可使用。<br>各目录结构说明：</p><ul><li>bin：可执行程序目录</li><li>boot：maven 自身的启动加载器</li><li>conf：maven 配置文件的存放目录</li><li>lib：maven 运行所需库的存放目录</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629638655921-b2537f08-cf78-41fd-a678-2c11e3253289.png#clientId=udfc2ec2e-139e-4&from=paste&height=368&id=u827b3ec4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=368&originWidth=881&originalType=binary%E2%88%B6=1&size=26707&status=done&style=shadow&taskId=ue8841e21-a434-421e-99ce-c0d21dc246a&width=881" alt="image.png"></p><h3 id="2-3、配置环境变量"><a href="#2-3、配置环境变量" class="headerlink" title="2.3、配置环境变量"></a>2.3、配置环境变量</h3><p>打开 windows 设置——&gt;搜索环境变量——&gt;<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629638899299-42c56156-95d3-4421-aea3-217df2343d13.png#clientId=udfc2ec2e-139e-4&from=paste&height=564&id=uacb6c6bb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=564&originWidth=1197&originalType=binary%E2%88%B6=1&size=73606&status=done&style=shadow&taskId=ud80f92b9-9e8b-4368-aae1-21486351286&width=1197" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629638957789-0b0d090a-5e22-4f6b-a58a-d6b3fa062ba9.png#clientId=udfc2ec2e-139e-4&from=paste&id=uf6bf1496&margin=%5Bobject%20Object%5D&name=image.png&originHeight=598&originWidth=479&originalType=binary%E2%88%B6=1&size=24332&status=done&style=shadow&taskId=ue0b935d7-d627-44a7-8aab-4d09e4488db" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629639024952-35466dae-09e1-4345-927a-ced3db9a228e.png#clientId=udfc2ec2e-139e-4&from=paste&height=659&id=ua953bde1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=659&originWidth=618&originalType=binary%E2%88%B6=1&size=41485&status=done&style=shadow&taskId=u12449395-aefc-4c33-9c19-7eb5be674b9&width=618" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629639105359-408a7b77-a154-4627-9faf-9791f3b587fc.png#clientId=udfc2ec2e-139e-4&from=paste&height=183&id=u841a1e64&margin=%5Bobject%20Object%5D&name=image.png&originHeight=183&originWidth=653&originalType=binary%E2%88%B6=1&size=10555&status=done&style=shadow&taskId=u4f0668ac-6e90-4051-926d-0f24f7fcd11&width=653" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629639258968-ac734549-e356-45ec-b0cb-65dfaa60c6a6.png#clientId=udfc2ec2e-139e-4&from=paste&height=659&id=u5a4f7c67&margin=%5Bobject%20Object%5D&name=image.png&originHeight=659&originWidth=618&originalType=binary%E2%88%B6=1&size=46150&status=done&style=shadow&taskId=uad37f648-6206-441a-ab0e-3fad6caaf04&width=618" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629639482181-c396d30f-4c80-4caa-8663-ad49e8f5ebdc.png#clientId=udfc2ec2e-139e-4&from=paste&height=563&id=ucdfd8b1d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=563&originWidth=527&originalType=binary%E2%88%B6=1&size=36204&status=done&style=shadow&taskId=u6b34b26d-bde5-4056-9753-53f6fe700db&width=527" alt="image.png"><br>使用命令 <code>mvn -version</code> 来测试 maven 是否配置成功<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629639539150-046923ff-67e6-49a9-ba46-2f9cb181f79f.png#clientId=udfc2ec2e-139e-4&from=paste&height=240&id=u467178c4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=240&originWidth=859&originalType=binary%E2%88%B6=1&size=19736&status=done&style=none&taskId=u6ebeba8f-f246-4279-8cf3-8ff8d6b3c61&width=859" alt="image.png"><br>出现上图字样，则表示 maven 已经安装配置完毕！撒花 ❀❀❀</p><h2 id="3、maven-基础概念"><a href="#3、maven-基础概念" class="headerlink" title="3、maven 基础概念"></a>3、maven 基础概念</h2><h3 id="3-1、仓库"><a href="#3-1、仓库" class="headerlink" title="3.1、仓库"></a>3.1、仓库</h3><p>用于存储资源，主要是各种 jar 包。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629773776563-4db45370-2fa2-47a8-9d4d-76b87d19a011.png#clientId=ubb918b72-69ae-4&from=paste&height=336&id=u24cf7305&margin=%5Bobject%20Object%5D&name=image.png&originHeight=336&originWidth=738&originalType=binary%E2%88%B6=1&size=55438&status=done&style=shadow&taskId=ue5b605c1-4696-41b2-a1b1-5c23d1f101a&width=738" alt="image.png"></p><h4 id="3-1-1、仓库分类"><a href="#3-1-1、仓库分类" class="headerlink" title="3.1.1、仓库分类"></a>3.1.1、仓库分类</h4><ul><li>本地仓库：自己电脑上存储资源的仓库，连接远程仓库获取资源</li><li>远程仓库：非本机电脑上的仓库，为本地仓库提供资源<ul><li>中央仓库：Maven 团队维护，存储所有资源的仓库</li><li>私服：部门/公司范围内存储资源的仓库，从中央仓库获取资源</li></ul></li></ul><h4 id="3-1-2、私服的作用"><a href="#3-1-2、私服的作用" class="headerlink" title="3.1.2、私服的作用"></a>3.1.2、私服的作用</h4><ul><li>保存具有版权的资源，包含购买或自主研发的 jar 包；中央仓库中的 jar 包都是开源的，不能存储具有版权的资源</li><li>一定范围内共享资源，仅对内部开放，不对外共享</li></ul><h3 id="3-2、坐标"><a href="#3-2、坐标" class="headerlink" title="3.2、坐标"></a>3.2、坐标</h3><h4 id="3-2-1、介绍"><a href="#3-2-1、介绍" class="headerlink" title="3.2.1、介绍"></a>3.2.1、介绍</h4><p>maven 中的坐标用于描述仓库资源的位置。</p><h4 id="3-2-2、主要组成"><a href="#3-2-2、主要组成" class="headerlink" title="3.2.2、主要组成"></a>3.2.2、主要组成</h4><ul><li>groupId：定义当前 maven 项目隶属组织名称(通常是域名反写，例如 org.apache)</li><li>artifactId：定义当前 maven 项目名称(通常是模板名称，例如 CRM、SMS)</li><li>version：定义当前项目版本号</li></ul><h4 id="3-2-3、作用"><a href="#3-2-3、作用" class="headerlink" title="3.2.3、作用"></a>3.2.3、作用</h4><p>使用唯一标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载工作交由机器完成。</p><h3 id="3-3、仓库配置"><a href="#3-3、仓库配置" class="headerlink" title="3.3、仓库配置"></a>3.3、仓库配置</h3><h4 id="3-3-1、本地仓库配置"><a href="#3-3-1、本地仓库配置" class="headerlink" title="3.3.1、本地仓库配置"></a>3.3.1、本地仓库配置</h4><p>使用 nodpad++打开 maven 解压目录下 conf 文件夹下的 <code>settings.xml</code> 文件。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629640621499-2c3e01f6-eabd-41b0-914e-b6718c5bf27e.png#clientId=udfc2ec2e-139e-4&from=paste&height=179&id=u58cd46d8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=179&originWidth=962&originalType=binary%E2%88%B6=1&size=15673&status=done&style=shadow&taskId=u8e732960-f48c-4f1a-b7f9-1b537118646&width=962" alt="image.png"><br>打开后，找到第 52 行，可以看到 maven 默认下载的 jar 包放在 <code>$&#123;user.home&#125;/.m2/repository</code>，即用户目录.m2\repository。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629640840808-6df74117-857b-4872-8dc2-39d216a56843.png#clientId=udfc2ec2e-139e-4&from=paste&height=167&id=u118403a6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=167&originWidth=1056&originalType=binary%E2%88%B6=1&size=20499&status=done&style=shadow&taskId=ueaef89f0-cdaf-4466-80f7-ba4ec1a239f&width=1056" alt="image.png"><br>jar 默认下载目录。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629641005296-8964577c-544c-4294-8429-2f4edf415e18.png#clientId=udfc2ec2e-139e-4&from=paste&height=287&id=u8f8b767a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=287&originWidth=795&originalType=binary%E2%88%B6=1&size=27427&status=done&style=shadow&taskId=udaad23e1-fd0d-40cf-99f2-91c786c5179&width=795" alt="image.png"><br>当然如果想修改 jar 包下载的地方(即本地仓库)，只需照着如下示例修改成自己的配置即可。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629641288231-dc019889-3e6b-4681-8b6e-76468176e1a9.png#clientId=udfc2ec2e-139e-4&from=paste&height=186&id=u03eba7e2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=186&originWidth=1025&originalType=binary%E2%88%B6=1&size=23623&status=done&style=shadow&taskId=uc3113bc2-85a2-4a53-af16-c1feee6928b&width=1025" alt="image.png"></p><h4 id="3-3-2、远程仓库配置"><a href="#3-3-2、远程仓库配置" class="headerlink" title="3.3.2、远程仓库配置"></a>3.3.2、远程仓库配置</h4><p>maven 默认连接的远程仓库位置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-3、镜像仓库配置-配置阿里云镜像"><a href="#3-3-3、镜像仓库配置-配置阿里云镜像" class="headerlink" title="3.3.3、镜像仓库配置(配置阿里云镜像)"></a>3.3.3、镜像仓库配置(<a href="https://developer.aliyun.com/mvn/guide">配置阿里云镜像</a>)</h4><p>在打开的 <code>settings.xml</code> 配置文件中找到 <code>&lt;mirrors&gt;&lt;/mirrors&gt;</code> 标签中添加 <code>&lt;mirror&gt;&lt;/mirror&gt;</code> 节点。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629643090044-3b944b29-ce96-415a-a44e-95acbab87b63.png#clientId=udfc2ec2e-139e-4&from=paste&height=592&id=u2369346d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=592&originWidth=1059&originalType=binary%E2%88%B6=1&size=66803&status=done&style=shadow&taskId=u29d922e6-6f35-4378-a16d-fc2cdda1759&width=1059" alt="image.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--此镜像的唯一标识符，用来区分不同的mirror元素--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--对哪种仓库进行镜像，简单的说就是替代哪个仓库 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--镜像名称--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--镜像URL--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、maven-项目"><a href="#4、maven-项目" class="headerlink" title="4、maven 项目"></a>4、maven 项目</h2><h3 id="4-1、idea-的-maven-配置"><a href="#4-1、idea-的-maven-配置" class="headerlink" title="4.1、idea 的 maven 配置"></a>4.1、idea 的 maven 配置</h3><p>当前项目的 maven 配置<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629643823489-c9cfcfa4-d144-4223-a6c1-05a061c06b88.png#clientId=udfc2ec2e-139e-4&from=paste&height=875&id=u775868f0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=875&originWidth=1553&originalType=binary%E2%88%B6=1&size=142975&status=done&style=shadow&taskId=u25a3f716-e728-41ed-ab06-708b73d19b1&width=1553" alt="image.png"><br><strong>当创建新项目时的 maven 配置</strong>：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629644299222-4d0b318b-b79d-4d1a-b3e9-b8bacc27f0f8.png#clientId=udfc2ec2e-139e-4&from=paste&height=609&id=u0ae3d857&margin=%5Bobject%20Object%5D&name=image.png&originHeight=609&originWidth=782&originalType=binary%E2%88%B6=1&size=236644&status=done&style=none&taskId=ud429fe36-6e83-43f2-95ca-948320ef86c&width=782" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629644523636-0522a262-6f75-452e-ad76-e8037031eb8e.png#clientId=udfc2ec2e-139e-4&from=paste&height=875&id=u93ede20c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=875&originWidth=1553&originalType=binary%E2%88%B6=1&size=150320&status=done&style=none&taskId=u2e84afe6-d9ff-4a8e-9915-b4cc8bcc84d&width=1553" alt="image.png"></p><h3 id="4-2、maven-项目构建命令"><a href="#4-2、maven-项目构建命令" class="headerlink" title="4.2、maven 项目构建命令"></a>4.2、maven 项目构建命令</h3><p>maven 构建命令使用 <code>mvn</code> 开头，后面添加参数，可以一次执行多个命令，使用空格分隔。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mvn compile #编译</span><br><span class="line">mvn clean #清理</span><br><span class="line">mvn test #测试</span><br><span class="line">mvn package#打包</span><br><span class="line">mvn install #安装到本地仓库</span><br></pre></td></tr></table></figure><p>如果是使用 idea，则可以使用图形化界面快捷操作。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629645767408-9ec4fdbc-e69b-431c-9769-98ad9a87d7a4.png#clientId=udfc2ec2e-139e-4&from=paste&height=476&id=FKvps&margin=%5Bobject%20Object%5D&name=image.png&originHeight=476&originWidth=658&originalType=binary%E2%88%B6=1&size=137409&status=done&style=none&taskId=u53eac245-87e9-48ed-b88d-26c0a09d691&width=658" alt="image.png"></p><h3 id="4-3、创建空的-maven-项目"><a href="#4-3、创建空的-maven-项目" class="headerlink" title="4.3、创建空的 maven 项目"></a>4.3、创建空的 maven 项目</h3><p>使用 idea 创建一个空的 maven 项目。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629644906587-e8ff95c4-ea10-4c91-a7d6-77cbca679140.png#clientId=udfc2ec2e-139e-4&from=paste&height=622&id=ucbaeaaab&margin=%5Bobject%20Object%5D&name=image.png&originHeight=830&originWidth=879&originalType=binary%E2%88%B6=1&size=178798&status=done&style=none&taskId=u4008da95-a7f7-4888-8a47-a3545423858&width=659" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629644973781-118a72c3-f8f5-49ed-9bb4-90eb9f070db9.png#clientId=udfc2ec2e-139e-4&from=paste&height=622&id=ucc5b6068&margin=%5Bobject%20Object%5D&name=image.png&originHeight=830&originWidth=879&originalType=binary%E2%88%B6=1&size=61436&status=done&style=none&taskId=u7a0f9901-8932-43ef-a3b2-2ffc9672745&width=659" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629645098162-f60348cc-aa46-4ed6-8d1e-6bf323e186af.png#clientId=udfc2ec2e-139e-4&from=paste&height=518&id=u9f3b6a4a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1036&originWidth=1919&originalType=binary%E2%88%B6=1&size=1171480&status=done&style=none&taskId=ue736093e-bd7e-46e6-8f09-381948ca5ae&width=960" alt="image.png"><br>查看当前项目的结构，使用快捷键 <code>ctrl+alt+shift+s</code> 或者使用如下操作：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629645198223-660493da-281c-4138-963f-1971a43bdc65.png#clientId=udfc2ec2e-139e-4&from=paste&height=342&id=u40ada7b6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=342&originWidth=493&originalType=binary%E2%88%B6=1&size=34402&status=done&style=none&taskId=ufa5daa5e-1a92-4725-89b3-6af78b4a5e9&width=493" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629645315206-f398346e-1b1f-4a7c-b7fe-9073e9139ca9.png#clientId=udfc2ec2e-139e-4&from=paste&height=582&id=u6a761a1f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=776&originWidth=1414&originalType=binary%E2%88%B6=1&size=112514&status=done&style=none&taskId=u68a51d54-b949-4fd5-b892-97429f7b8e8&width=1061" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629645411416-9f8febf9-cf53-4036-bfc2-3aa6f6584d79.png#clientId=udfc2ec2e-139e-4&from=paste&height=582&id=uad0c53c6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=776&originWidth=1414&originalType=binary%E2%88%B6=1&size=133574&status=done&style=none&taskId=u8c35d7bd-4da7-4aff-ba56-8a22fa9f1a3&width=1061" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629645495194-7aa935f4-adf5-4946-936b-19467b1075ae.png#clientId=udfc2ec2e-139e-4&from=paste&height=582&id=u184671cb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=776&originWidth=1414&originalType=binary%E2%88%B6=1&size=132717&status=done&style=none&taskId=u5cabb881-70a3-499c-9523-ac42b80463f&width=1061" alt="image.png"></p><h3 id="4-4、创建-maven-的-web-项目"><a href="#4-4、创建-maven-的-web-项目" class="headerlink" title="4.4、创建 maven 的 web 项目"></a>4.4、创建 maven 的 web 项目</h3><p>使用 idea 创建一个 maven 的 web 项目。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629706126008-76cdd411-4f7f-484b-be84-7048cf5cf1b4.png#clientId=u506018d1-b808-4&from=paste&height=772&id=u122d127c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=772&originWidth=874&originalType=binary%E2%88%B6=1&size=157925&status=done&style=none&taskId=ua463ccf1-492e-4f34-a4f9-e9a9d194c3d&width=874" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629706209805-fe70d1c4-f5c8-4e8d-acea-63cffd53322c.png#clientId=u506018d1-b808-4&from=paste&height=772&id=ufc3e8bf5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=772&originWidth=874&originalType=binary%E2%88%B6=1&size=57958&status=done&style=none&taskId=u4417c7d4-d8a7-4b30-ad63-d1f280f1fb1&width=874" alt="image.png"><br>开始从阿里云仓库上下载资源。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629706295912-599303f5-1bd2-41d9-9529-70cde1ad4b06.png#clientId=u506018d1-b808-4&from=paste&height=383&id=ue34b011a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=383&originWidth=1829&originalType=binary%E2%88%B6=1&size=622785&status=done&style=none&taskId=u51bfb48a-e784-4677-9943-bb144ed4287&width=1829" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629706398324-5b7b3f8e-ab1b-418f-b2e0-08cd0b0acefa.png#clientId=u506018d1-b808-4&from=paste&height=1041&id=u481debaf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1041&originWidth=1891&originalType=binary%E2%88%B6=1&size=1601568&status=done&style=none&taskId=u4806db2c-1e50-4c57-a074-78e3bf315d9&width=1891" alt="image.png"><br><strong>安装 tomcat 插件</strong><br>在项目的 <code>pom.xml</code> 配置文件中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629706564103-e4525f4e-1491-49b4-9461-1d353d9b4de2.png#clientId=u506018d1-b808-4&from=paste&height=784&id=u81e7ef17&margin=%5Bobject%20Object%5D&name=image.png&originHeight=784&originWidth=657&originalType=binary%E2%88%B6=1&size=493021&status=done&style=none&taskId=u43a1593a-2f07-4806-ad89-00a9aaeaf47&width=657" alt="image.png"><br>双击运行 <code>tomcat7:run</code> 命令启动 web 项目：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629732961846-52e7e1c7-154b-4c8e-9da2-a52be4013bfe.png#clientId=ubfff47eb-6b96-4&from=paste&height=626&id=u5ab06ce6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=626&originWidth=1867&originalType=binary%E2%88%B6=1&size=747381&status=done&style=none&taskId=ub86bb408-2c72-4924-9b70-78e6c726d3e&width=1867" alt="image.png"><br>访问本地 80 端口，可以看到运行结果：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629733003226-1ace9521-c83d-49c0-aa92-ba6b6a43115a.png#clientId=ubfff47eb-6b96-4&from=paste&height=306&id=uc499c1ad&margin=%5Bobject%20Object%5D&name=image.png&originHeight=306&originWidth=708&originalType=binary%E2%88%B6=1&size=14508&status=done&style=shadow&taskId=u67a9a910-a9ab-476e-919d-1150e962359&width=708" alt="image.png"></p><h2 id="5、依赖管理"><a href="#5、依赖管理" class="headerlink" title="5、依赖管理"></a>5、依赖管理</h2><h3 id="5-1、依赖配置"><a href="#5-1、依赖配置" class="headerlink" title="5.1、依赖配置"></a>5.1、依赖配置</h3><ul><li>依赖指的是当前项目运行所需要的 jar 包，一个项目可以设置多个依赖。</li><li>格式：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置当前项目所依赖的所有jar包坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--设置具体的依赖坐标--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖所属的组织Id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖所属的项目Id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖的版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2、依赖传递重要"><a href="#5-2、依赖传递重要" class="headerlink" title="5.2、依赖传递重要"></a>5.2、依赖传递重要</h3><ul><li>依赖具有传递性<ul><li>直接依赖：在当前项目中通过依赖配置建立的依赖关系</li><li>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源（比较拗口，意思就是如果 A 依赖 B，而 B 依赖 C，那么 A 就间接依赖 C）</li></ul></li><li>依赖传递冲突问题<ul><li>路径最短者优先原则：当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</li><li>路径相同先声明优先原则：当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的</li><li><del>特殊优先</del>：当同级配置了相同资源的不同版本，后配置的覆盖先配置的（概率是书写错误，不应该出现这种情况）</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629791554708-d8bf9833-db76-4080-bc4f-51a243118b51.png#clientId=ubb918b72-69ae-4&from=paste&height=272&id=uaae7ff48&margin=%5Bobject%20Object%5D&name=image.png&originHeight=272&originWidth=629&originalType=binary%E2%88%B6=1&size=62862&status=done&style=shadow&taskId=ue6d03ef3-9be0-45f4-95ad-e99840d9ed9&width=629" alt="image.png"></p><h3 id="5-3、可选依赖"><a href="#5-3、可选依赖" class="headerlink" title="5.3、可选依赖"></a>5.3、可选依赖</h3><p>可选依赖指对外隐藏当前所依赖的资源—不透明。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4、排除依赖重要"><a href="#5-4、排除依赖重要" class="headerlink" title="5.4、排除依赖重要"></a>5.4、排除依赖重要</h3><p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本—不需要。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-5、依赖范围重要"><a href="#5-5、依赖范围重要" class="headerlink" title="5.5、依赖范围重要"></a>5.5、依赖范围重要</h3><p>依赖的 jar 包默认情况下可以在任何地方使用，可以通过 scope 标签设定其作用范围<br>作用范围：</p><ul><li>主程 序范围有效（main 文件夹范围内）</li><li>测试程序范围有效（test 文件夹范围内）</li><li>是否参与打包（package 指令范围内）</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629799136287-c9e8d9bf-c177-4e55-83f1-55469f168f9c.png#clientId=ubb918b72-69ae-4&from=paste&height=226&id=ubbec2c24&margin=%5Bobject%20Object%5D&name=image.png&originHeight=226&originWidth=616&originalType=binary%E2%88%B6=1&size=23185&status=done&style=shadow&taskId=uafdc5d7b-ca3a-43ed-ae58-a3de27bf8b0&width=616" alt="image.png"></p><h3 id="5-6、依赖范围传递性（了解）"><a href="#5-6、依赖范围传递性（了解）" class="headerlink" title="5.6、依赖范围传递性（了解）"></a>5.6、依赖范围传递性（了解）</h3><p>带有依赖范围的资源在进行传递时，作用范围将受到影响。具体看使用效果。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629799105192-ac44722a-c054-4f45-ac24-9812326a8990.png#clientId=ubb918b72-69ae-4&from=paste&height=270&id=u07cc1fd0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=270&originWidth=724&originalType=binary%E2%88%B6=1&size=29074&status=done&style=shadow&taskId=u19731575-51a9-4b34-9efd-82f87b6e53d&width=724" alt="image.png"></p><h2 id="6、生命周期与插件"><a href="#6、生命周期与插件" class="headerlink" title="6、生命周期与插件"></a>6、生命周期与插件</h2><h3 id="6-1、项目构建生命周期"><a href="#6-1、项目构建生命周期" class="headerlink" title="6.1、项目构建生命周期"></a>6.1、项目构建生命周期</h3><h4 id="6-1-1、介绍"><a href="#6-1-1、介绍" class="headerlink" title="6.1.1、介绍"></a>6.1.1、介绍</h4><p>maven 构建生命周期描述的是一次构建过程经历了多少个事件<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629799286987-53cf6081-4991-47f3-8fe9-4155748aabb2.png#clientId=ubb918b72-69ae-4&from=paste&height=78&id=u11ca9c7a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=78&originWidth=731&originalType=binary%E2%88%B6=1&size=6911&status=done&style=shadow&taskId=uc2267b1e-9fe5-4aba-8da7-babbf8e291e&width=731" alt="image.png"></p><h4 id="6-1-2、3-个阶段"><a href="#6-1-2、3-个阶段" class="headerlink" title="6.1.2、3 个阶段"></a>6.1.2、3 个阶段</h4><p>maven 对项目构建的生命周期划分为 3 个阶段。</p><h5 id="6-1-2-1、clean-生命周期"><a href="#6-1-2-1、clean-生命周期" class="headerlink" title="6.1.2.1、clean 生命周期"></a>6.1.2.1、clean 生命周期</h5><ol><li>pre-clean：执行一些需要在 clean 之前完成的工作</li><li>clean：移除所有上一次构建生成的文件</li><li>post-clean：执行一些需要在 clean 之后立刻完成的工作</li></ol><h5 id="6-1-2-2、default-构建生命周期"><a href="#6-1-2-2、default-构建生命周期" class="headerlink" title="6.1.2.2、default 构建生命周期"></a>6.1.2.2、default 构建生命周期</h5><p>核心工作是编译、测试、打包、安装、部署。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629807979674-fe393ea5-1062-454f-aaaf-8c0df48a2a91.png#clientId=u5ea66915-8259-4&from=paste&height=739&id=uf1d2d156&margin=%5Bobject%20Object%5D&name=image.png&originHeight=739&originWidth=1160&originalType=binary%E2%88%B6=1&size=314255&status=done&style=shadow&taskId=ua2096d29-3676-4287-b0aa-ad764d21ef6&width=1160" alt="image.png"><br><strong>在执行某一个操作时，同时会执行该操作前面的所有操作</strong>。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629808322597-520ddb12-6c44-4944-88d1-ceb59e4515ff.png#clientId=u5ea66915-8259-4&from=paste&height=745&id=u65208257&margin=%5Bobject%20Object%5D&name=image.png&originHeight=745&originWidth=1279&originalType=binary%E2%88%B6=1&size=331459&status=done&style=shadow&taskId=uabd2bdfb-c122-4747-b834-e2bbd214fae&width=1279" alt="image.png"></p><h5 id="6-1-2-3、site-构建生命周期"><a href="#6-1-2-3、site-构建生命周期" class="headerlink" title="6.1.2.3、site 构建生命周期"></a>6.1.2.3、site 构建生命周期</h5><ol><li>pre-site：执行一些需要在生成站点文档之前完成的工作</li><li>site：生成项目的站点文档</li><li>post-site：执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li><li>site-deploy：将生成的站点文档部署到特定的服务器上</li></ol><h3 id="6-2、插件重要"><a href="#6-2、插件重要" class="headerlink" title="6.2、插件重要"></a>6.2、插件重要</h3><ul><li>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能</li><li>默认 maven 在各个生命周期上绑定有预设的功能</li><li>通过插件可以自定义其他功能</li></ul><p>用户可以根据需要将任何插件目标绑定到任何生命周期的任何阶段，如配置在 <code>generate-test-resources</code> <strong>生成测试资源文件阶段</strong>的时候使用 <code>maven-source-plugin</code> 插件将 main 文件夹进行源码打包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-test-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、聚合重要"><a href="#7、聚合重要" class="headerlink" title="7、聚合重要"></a>7、聚合重要</h2><h3 id="7-1、作用"><a href="#7-1、作用" class="headerlink" title="7.1、作用"></a>7.1、作用</h3><p>用于快速构建 maven 工程，一次性构建多个项目/模块。即编译、测试、打包、部署该模块的时候会同时操作关联的模块。</p><h3 id="7-2、制作方式"><a href="#7-2、制作方式" class="headerlink" title="7.2、制作方式"></a>7.2、制作方式</h3><ol><li>创建一个空模块，打包类型定义为 pom</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>定义当前模块进行构建操作时关联的其他模块名称，注意，<code>module</code>内的值为关联模块的 pom 文件相对于当前 pom 文件所在文件夹目录。</li></ol><p>如下示例就是关联模块与当前模块平级，如果关联模块位于当前模块文件夹内，则没有<code>../</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--当前父模块有哪些子模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../ssm_controller<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../ssm_service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../ssm_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../ssm_pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意事项：参与聚合操作的模块最终执行顺序与模块间的依赖有关，与配置顺序无关。</p><h2 id="8、继承重要"><a href="#8、继承重要" class="headerlink" title="8、继承重要"></a>8、继承重要</h2><h3 id="8-1、作用"><a href="#8-1、作用" class="headerlink" title="8.1、作用"></a>8.1、作用</h3><p>通过继承可以实现在子模块中沿用父模块中的配置。</p><h3 id="8-2、制作方式"><a href="#8-2、制作方式" class="headerlink" title="8.2、制作方式"></a>8.2、制作方式</h3><p>在子模块中声明其父模块坐标与 pom 文件的位置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义该模块的父模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 填写父模块的pom文件所在位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../ssm/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3、依赖继承"><a href="#8-3、依赖继承" class="headerlink" title="8.3、依赖继承"></a>8.3、依赖继承</h3><p><strong>子模块将自动继承父模块中的依赖</strong>。<br>父模块<code>maven-java</code>中引入 <code>spring-boot-starter</code> 依赖，子模块 <code>maven-java-001</code>和<code>maven-java-002</code>将自动继承父模块<code>maven-java</code>中 <code>spring-boot-starter</code> 的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xiaorang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven-java-001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven-java-002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义属性列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在该标签中编写的依赖，子模块会自动继承--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629813589354-ce407782-4ea2-462b-8450-c85586cd88d8.png#clientId=u5ea66915-8259-4&from=paste&height=451&id=uf6684f9d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=451&originWidth=488&originalType=binary%E2%88%B6=1&size=99745&status=done&style=none&taskId=u77de105d-af85-431a-a4bf-2178f2bbe62&width=488" alt="image.png"></p><h3 id="8-4、依赖管理"><a href="#8-4、依赖管理" class="headerlink" title="8.4、依赖管理"></a>8.4、依赖管理</h3><p><strong>在父模块中进行依赖管理</strong>，<strong>子模块中需要声明式的引入依赖</strong>，但是<strong>无需声明依赖版本</strong>，<strong>版本将使用父模块依赖管理中依赖的版本号</strong>，达到由父模块统一控制依赖的版本号。<br>在父模块中进行依赖管理：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在该标签中声明的依赖，子模块可以选择性的继承，同时省略版本号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--具体的依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子模块中声明式引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9、聚合与继承的异同点"><a href="#9、聚合与继承的异同点" class="headerlink" title="9、聚合与继承的异同点"></a>9、聚合与继承的异同点</h2><ol><li>作用：<ol><li>聚合用于快速构建项目</li><li>继承用于快速配置</li></ol></li><li>相同点：<ol><li>聚合与继承的 pom.xml 文件打包方式均为 pom，可以将两种关系制作到同一 pom 文件中</li><li>聚合与继承均属于设计型模块，并无实际的模块内容</li></ol></li><li>不同点：<ol><li>聚合时在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些</li><li>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</li></ol></li></ol><h2 id="10、属性重要"><a href="#10、属性重要" class="headerlink" title="10、属性重要"></a>10、属性重要</h2><p>问题：如果对于 spring 的资源版本都应该使用<code>5.1.9.RELEASE</code>版本，但是你其中一个资源写错了，写的不是这个版本号或者说想将 spring 的资源版本都升级到<code>5.2.0.RELEASE</code>版本，这个时候你是不是需要将所有的 spring 资源的版本号都改成<code>5.2.0.RELEASE</code>版本。<br>方案：<strong>属性</strong></p><h3 id="10-1、自定义属性"><a href="#10-1、自定义属性" class="headerlink" title="10.1、自定义属性"></a>10.1、自定义属性</h3><ol><li>作用：等同于定义变量，方便统一维护版本号。</li><li>定义格式：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义自定义属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>调用格式：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-2、内置属性"><a href="#10-2、内置属性" class="headerlink" title="10.2、内置属性"></a>10.2、内置属性</h3><ol><li>作用：使用 maven 内置属性，快速配置。</li><li>调用格式：<code>$&#123;basedir&#125; $&#123;version&#125;</code></li></ol><h3 id="10-3、Setting-属性"><a href="#10-3、Setting-属性" class="headerlink" title="10.3、Setting 属性"></a>10.3、Setting 属性</h3><ol><li>作用：使用 maven 配置文件<code>setting.xml</code>中的标签属性，用于动态配置。</li><li>调用格式：<code>$&#123;settings.localRepository</code></li></ol><h3 id="10-4、Java-系统属性"><a href="#10-4、Java-系统属性" class="headerlink" title="10.4、Java 系统属性"></a>10.4、Java 系统属性</h3><ol><li>作用：读取 Java 系统属性</li><li>调用格式：<code>$&#123;user.home&#125;</code></li><li>系统属性查询方式：<code>mvn help:system</code></li></ol><h3 id="10-5、环境变量属性"><a href="#10-5、环境变量属性" class="headerlink" title="10.5、环境变量属性"></a>10.5、环境变量属性</h3><ol><li>作用：使用 maven 配置文件<code>setting.xml</code>中的标签属性，用于动态配置</li><li>调用格式：<code>$&#123;env.JAVA_HOME&#125;</code></li><li>环境变量属性查询方式：<code>mvn help:system</code></li></ol><h2 id="11、版本管理"><a href="#11、版本管理" class="headerlink" title="11、版本管理"></a>11、版本管理</h2><h3 id="11-1、工程版本"><a href="#11-1、工程版本" class="headerlink" title="11.1、工程版本"></a>11.1、工程版本</h3><ol><li>SNAPSHOT(快照版本)<ol><li>项目开发过程中，为方便团队成员合作，解决模块间相互依赖和时时更新的问题，开发者对每个模块进行构建的时候，输出的临时性版本就叫快照版本（测试阶段版本）</li><li>快照版本会随着开发的进展不断更新</li></ol></li><li>RELEASE(发布版本)<ol><li>项目开发进入阶段里程碑后，向团队外部发布较为稳定的版本，这种版本对应的构件文件是稳定的，即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本成为发布版本</li></ol></li></ol><h3 id="11-2、工程版本号约定"><a href="#11-2、工程版本号约定" class="headerlink" title="11.2、工程版本号约定"></a>11.2、工程版本号约定</h3><p>约定规范：</p><ul><li>&lt;主版本&gt;.&lt;次版本&gt;.&lt;增量版本&gt;.&lt;里程碑版本&gt;</li><li>主版本：表示项目重大架构的变更，如 Spring5 相较于 Spring4 的迭代</li><li>次版本：表示有较大的功能增加和变化，或者全面系统的修复漏洞</li><li>增量版本：表示有重大漏洞的修复</li><li>里程碑版本：表明一个版本的里程碑（版本内部）。这样的版本同下一个正式版本相比，相对来说不是很稳定，有待更多的测试</li></ul><h2 id="12、资源配置"><a href="#12、资源配置" class="headerlink" title="12、资源配置"></a>12、资源配置</h2><ol><li>作用：在任意配置文件引用 pom 文件中定义的属性。</li><li>调用格式：<code>$&#123;属性名&#125;</code></li><li>如何开启配置文件可以加载 pom 文件中定义的属性：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置资源文件对应的信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设定配置文件对应的位置目录，支持使用属性动态设定路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启对配置文件的资源加载过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="13、多环境开发配置"><a href="#13、多环境开发配置" class="headerlink" title="13、多环境开发配置"></a>13、多环境开发配置</h2><h3 id="13-1、多环境配置"><a href="#13-1、多环境配置" class="headerlink" title="13.1、多环境配置"></a>13.1、多环境配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建多环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--定义具体的环境：生产环境--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义环境对应的唯一名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义环境中的专用的属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.1.1.1:3306/test<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置默认启动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--定义具体的环境：开发环境--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--格式同上--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="13-2、加载指定环境"><a href="#13-2、加载指定环境" class="headerlink" title="13.2、加载指定环境"></a>13.2、加载指定环境</h3><ol><li>作用：加载指定环境配置</li><li>调用格式：<code>mvn 指令 -p 环境定义id</code></li><li>范例：<code>mvn install -p pro</code></li></ol><h2 id="14、跳过测试"><a href="#14、跳过测试" class="headerlink" title="14、跳过测试"></a>14、跳过测试</h2><h3 id="14-1、必要性"><a href="#14-1、必要性" class="headerlink" title="14.1、必要性"></a>14.1、必要性</h3><p>如执行 maven 打包发布项目时，如果测试类中有测试用例代码，打包 maven 默认会将测试用例一起编译并执行，编译执行不通过则会报错。</p><h3 id="14-2、方法"><a href="#14-2、方法" class="headerlink" title="14.2、方法"></a>14.2、方法</h3><h4 id="14-2-1、使用-mvn-命令"><a href="#14-2-1、使用-mvn-命令" class="headerlink" title="14.2.1、使用 mvn 命令"></a>14.2.1、使用 mvn 命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下</span></span><br><span class="line">mvn clean install -DskipTests</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不执行测试用例，也不编译测试用例类</span></span><br><span class="line">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><h4 id="14-2-2、使用-idea-的-maven-界面"><a href="#14-2-2、使用-idea-的-maven-界面" class="headerlink" title="14.2.2、使用 idea 的 maven 界面"></a>14.2.2、使用 idea 的 maven 界面</h4><p>没有跳过测试时，双击执行打包，控制台输出没有测试用例需要执行。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629857625576-3ec2c19d-910c-40cc-98ab-6df90f799060.png#clientId=ub469fc82-095e-4&from=paste&height=919&id=u05b91bdb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=919&originWidth=1412&originalType=binary%E2%88%B6=1&size=1091352&status=done&style=none&taskId=ub5ad2fa7-f0af-4560-a1e9-4abae2290e2&width=1412" alt="image.png"><br>点击跳过测试后，test 生命周期图标变灰，双击执行打包时，控制台输出测试用例已跳过。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629857773165-3c9b40ef-9114-4832-9302-2ec1acc76caf.png#clientId=ub469fc82-095e-4&from=paste&height=925&id=ud29076ae&margin=%5Bobject%20Object%5D&name=image.png&originHeight=925&originWidth=1413&originalType=binary%E2%88%B6=1&size=1101160&status=done&style=none&taskId=ub88659de-6ea7-4a4c-92bf-e9738b22715&width=1413" alt="image.png"></p><h4 id="14-2-3、使用配置文件"><a href="#14-2-3、使用配置文件" class="headerlink" title="14.2.3、使用配置文件"></a>14.2.3、使用配置文件</h4><p>添加 <code>maven-surefire-plugin</code> 插件，设置跳过测试。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span><span class="comment">&lt;!--设置跳过测试--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到即使没有点击跳过测试按钮，双击执行打包时，控制台输出的依然是测试用例已跳过。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629858295270-098a31de-6dba-49c2-98e5-01c85b3cf159.png#clientId=ub469fc82-095e-4&from=paste&id=u76f21f0d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=918&originWidth=1409&originalType=binary%E2%88%B6=1&size=1082327&status=done&style=none&taskId=uc9fa7c4d-9bd2-4fe8-9ba9-588a1108110" alt="image.png"><br><strong>详细指定</strong>：</p><ol><li>包名路径，文件名带后缀</li><li>支持通配符*，其中<code>**</code>表示任何包，<code>*</code>表示任何字符</li><li><code>excludes</code>优先级高于<code>includes</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--详细指定要跑的测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span>&gt;</span>com/jerry/AppTest*.java<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--详细指定排除的测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com/jerry/AppTest.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com/jerry/AppTest1.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="15、自定义骨架"><a href="#15、自定义骨架" class="headerlink" title="15、自定义骨架"></a>15、自定义骨架</h2><p>maven 官方通过插件给我们提供了大量的模板，但是这些模板或多或少的都存在一定的问题，无法满足我们实际的需求，所以我们需要根据自己的需求自定义模板出来。</p><h3 id="15-1、生成模板"><a href="#15-1、生成模板" class="headerlink" title="15.1、生成模板"></a>15.1、生成模板</h3><p>根据已经存在的项目创建骨架，在 pom.xml 文件中添加骨架插件 <code>maven-archetype-plugin</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-archetype-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 idea 的 maven 界面中可以看到这个插件<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629960523344-1fb376b5-7b8e-4c5a-a7e2-c42abc024c3c.png#clientId=u1fed4025-7c3a-4&from=paste&height=685&id=u677ecd8b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=685&originWidth=658&originalType=binary%E2%88%B6=1&size=440420&status=done&style=none&taskId=u1d10c9ab-9b93-469d-8f86-0ee02a0169b&width=658" alt="image.png"><br>使用 mvn 命令将该项目做成骨架或者使用 idea 界面的插件按钮</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create-from-project</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629960683222-71e7e256-d731-47b3-9ed9-f08db8960f54.png#clientId=u1fed4025-7c3a-4&from=paste&height=677&id=u5419e9d7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=677&originWidth=658&originalType=binary%E2%88%B6=1&size=437370&status=done&style=none&taskId=ud045609e-c8d2-44b8-9853-26a15743260&width=658" alt="image.png"><br>生成骨架的时候如果出现如下错误，需要在 maven 安装目录将 mvn.cmd 复制拷贝一份，名字改成 mvn.bat。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629961204696-8d20d458-b8c9-4b05-9a19-37e9aff9a908.png#clientId=u1fed4025-7c3a-4&from=paste&height=65&id=uff5ab73b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=65&originWidth=1094&originalType=binary%E2%88%B6=1&size=122913&status=done&style=none&taskId=uc3230ff0-9af9-4bae-a407-9556faadd8e&width=1094" alt="image.png"><br>骨架生成成功<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629981856183-95efece6-4570-4c66-8a31-5bf64594171c.png#clientId=u6b87ed66-9065-4&from=paste&height=682&id=u9f857059&margin=%5Bobject%20Object%5D&name=image.png&originHeight=682&originWidth=1826&originalType=binary%E2%88%B6=1&size=760579&status=done&style=none&taskId=ua38a447c-c0df-4083-8da3-592d240681c&width=1826" alt="image.png"><br>切换到生成的骨架项目目录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd target\generated-sources\archetype</span><br></pre></td></tr></table></figure><p>向本地仓库中发布</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629981914615-0214c939-d46e-4e8e-b17e-acc9bc0a6da3.png#clientId=u6b87ed66-9065-4&from=paste&height=447&id=ub5172e8f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=447&originWidth=1862&originalType=binary%E2%88%B6=1&size=490844&status=done&style=none&taskId=ufb69fec5-5ecd-4de3-93b5-38098ff44de&width=1862" alt="image.png"><br>最后执行<code>mvn archetype:crawl</code>命令 或者使用 idea 的 maven 界面中的插件按钮<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629981774480-3d013712-1bb4-493f-976c-22d88ee66adc.png#clientId=u6b87ed66-9065-4&from=paste&height=581&id=u53ea64a6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=581&originWidth=656&originalType=binary%E2%88%B6=1&size=177050&status=done&style=none&taskId=u68cbdb1c-e8f0-43ad-9ef7-909cac9534c&width=656" alt="image.png"><br>执行完毕之后，在 maven 的本地仓库目录中生成一个 archetype-catalog.xml 文件。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629982086607-502ad056-ad0a-405c-9121-99d85b9c0b46.png#clientId=u6b87ed66-9065-4&from=paste&height=575&id=uf8ca5814&margin=%5Bobject%20Object%5D&name=image.png&originHeight=575&originWidth=1076&originalType=binary%E2%88%B6=1&size=59948&status=done&style=shadow&taskId=uea8a803a-f33f-4b96-a011-e8c69cbdc79&width=1076" alt="image.png"></p><h3 id="15-2、使用模板"><a href="#15-2、使用模板" class="headerlink" title="15.2、使用模板"></a>15.2、使用模板</h3><p>idea 安装 <code>maven archetype catalogs</code> 插件<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629982181436-50a44cc2-0878-40ef-b43e-262a7eb3acf6.png#clientId=u6b87ed66-9065-4&from=paste&height=890&id=u026d746b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=890&originWidth=1171&originalType=binary%E2%88%B6=1&size=205312&status=done&style=none&taskId=u73de0daa-b6e1-4080-a4af-4d4ca4c8340&width=1171" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629982292767-f66d8c6b-0246-4cb5-b966-babeb62249f2.png#clientId=u6b87ed66-9065-4&from=paste&height=890&id=u3db72ee3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=890&originWidth=1798&originalType=binary%E2%88%B6=1&size=144318&status=done&style=none&taskId=uaabd197c-213c-45ac-827e-7e3bfbf82e1&width=1798" alt="image.png"><br>添加成功之后，在新建 maven 项目的时候就可以选到刚才创建的骨架。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629982354072-ee6b1610-df6b-4f9e-be1c-2fbbb313bdd7.png#clientId=u6b87ed66-9065-4&from=paste&height=830&id=u3220704c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=830&originWidth=879&originalType=binary%E2%88%B6=1&size=176366&status=done&style=none&taskId=u79184425-6dc9-407a-851a-8f444b3baa5&width=879" alt="image.png"></p><h2 id="16、私服"><a href="#16、私服" class="headerlink" title="16、私服"></a>16、私服</h2><h3 id="16-1、简介"><a href="#16-1、简介" class="headerlink" title="16.1、简介"></a>16.1、简介</h3><p>私服是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构件。有了私服之后，当 maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629874652847-6a3af980-abfb-4a49-bf63-871c582e951a.png#clientId=u8405bc85-31e3-4&from=paste&height=307&id=uca20b9c2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=307&originWidth=1079&originalType=binary%E2%88%B6=1&size=38665&status=done&style=shadow&taskId=uee92e7ae-e082-4250-b6a6-c2c79c3ae18&width=1079" alt="image.png"></p><h3 id="16-2、必要性-优点"><a href="#16-2、必要性-优点" class="headerlink" title="16.2、必要性(优点)"></a>16.2、必要性(优点)</h3><ol><li><strong>减少网络带宽流量</strong>。如果没有私服，我们所需的所有构件都需要通过 maven 的中央仓库或者第三方的 maven 仓库下载到本地，而一个团队中的所有人都重复的从 maven 仓库下载构件无疑加大了仓库的负载和浪费了外网带宽，如果网速慢的话，还会影响项目的进程。</li><li><strong>一定范围内共享资源，仅对内部开放，不对外共享</strong>。很多情况下项目的开发都是再内网进行的，可能根本连接不了 maven 的中央仓库和第三方的 maven 仓库。</li><li><strong>加速 maven 构建</strong></li><li><strong>部署第三方构件</strong></li><li><strong>提高稳定性、增强控制</strong></li><li><strong>降低中央仓库的负载</strong></li></ol><h3 id="16-3、Nexus"><a href="#16-3、Nexus" class="headerlink" title="16.3、Nexus"></a>16.3、Nexus</h3><h4 id="16-3-1、简介"><a href="#16-3-1、简介" class="headerlink" title="16.3.1、简介"></a>16.3.1、简介</h4><p>Nexus 是一个专门的 maven 仓库管理软件，它不仅能够搭建 maven 私服，还具有如下一些优点使其日趋成为最流行的 maven 仓库管理器。</p><ul><li>提供了强大的仓库管理功能，构件搜索功能 ​</li><li>它基于 REST，友好的 UI 是一个 ext.js 的 REST 客户端</li><li>它占用较少的内存</li><li>基于简单文件系统而非数据库</li></ul><h4 id="16-3-2、下载安装运行"><a href="#16-3-2、下载安装运行" class="headerlink" title="16.3.2、下载安装运行"></a>16.3.2、下载安装运行</h4><ol><li>使用 docker 安装 nexus3。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search nexus</span><br><span class="line">docker pull sonatype/nexus3</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629986980831-d447eb28-0d0f-44c0-ab16-9b0a3fc8ecd2.png#clientId=u15db8c69-5558-4&from=paste&height=577&id=u3335a123&margin=%5Bobject%20Object%5D&name=image.png&originHeight=577&originWidth=882&originalType=binary%E2%88%B6=1&size=80089&status=done&style=none&taskId=u30e63631-b23e-4b44-ba91-97f122f3778&width=882" alt="image.png"></p><ol start="2"><li>创建 docker-compose.yml 文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">/usr/local/docker/nexus/docker-compose.yml</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nexus:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nexus3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8081</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/nexus/nexus-data:/nexus-data</span></span><br></pre></td></tr></table></figure><p>:wq 保存退出。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629987224232-c921f1bd-cced-4bf5-b713-1b95c3ea3f56.png#clientId=u15db8c69-5558-4&from=paste&height=188&id=u42d4736e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=188&originWidth=503&originalType=binary%E2%88%B6=1&size=8838&status=done&style=none&taskId=u8cd06af9-658c-407c-99d5-d1b6f1e902b&width=503" alt="image.png"></p><ol start="3"><li>运行 nexus3，如果访问不成功，则需要给 nexus-data 文件夹赋权限<code>chmod 777 nexus-data/</code>。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用docker-compose启动</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">up</span> <span class="string">-d</span></span><br><span class="line"><span class="comment"># 使用docker-compose停止</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">down</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629988397968-53b0a60e-324c-4090-bd6c-b8266ef9bb5f.png#clientId=u15db8c69-5558-4&from=paste&height=244&id=u52161063&margin=%5Bobject%20Object%5D&name=image.png&originHeight=244&originWidth=1237&originalType=binary%E2%88%B6=1&size=43315&status=done&style=none&taskId=u561f3753-6896-4977-9c4b-7a28a419708&width=1237" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629988436739-f208c06a-c86f-4117-ad2e-ee73f9ff4a5a.png#clientId=u15db8c69-5558-4&from=paste&height=934&id=uc9afddfe&margin=%5Bobject%20Object%5D&name=image.png&originHeight=934&originWidth=1919&originalType=binary%E2%88%B6=1&size=60677&status=done&style=shadow&taskId=u3034083a-7edd-4f2e-979d-950eee9785c&width=1919" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629989347821-047b21eb-fb9a-4f37-a2bb-d26a486c7df8.png#clientId=u15db8c69-5558-4&from=paste&height=936&id=u646c73fe&margin=%5Bobject%20Object%5D&name=image.png&originHeight=936&originWidth=1920&originalType=binary%E2%88%B6=1&size=79454&status=done&style=none&taskId=u6257df8d-097c-49e4-9b8c-3c926c0f3e3&width=1920" alt="image.png"><br>需要查看 nexus-data 文件夹下的 admin.password 文件，里面记录了密码。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">admin.password</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629988763498-4825da86-f876-420e-a5c6-516f13afe789.png#clientId=u15db8c69-5558-4&from=paste&height=39&id=u510ef243&margin=%5Bobject%20Object%5D&name=image.png&originHeight=39&originWidth=568&originalType=binary%E2%88%B6=1&size=6104&status=done&style=none&taskId=uad003fe5-692e-4f29-bab1-e5106324252&width=568" alt="image.png"><br>登录之后会出现弹窗界面需要你修改密码。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629989490871-7f79d729-e17d-4a5f-a8e4-5d38ce9efed4.png#clientId=u15db8c69-5558-4&from=paste&height=305&id=u081f2fa9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=305&originWidth=695&originalType=binary%E2%88%B6=1&size=10565&status=done&style=shadow&taskId=uf66a72f8-66f3-46fb-95e5-e45ce50d8cc&width=695" alt="image.png"></p><h4 id="16-3-3、配置本地仓库访问私服的权限"><a href="#16-3-3、配置本地仓库访问私服的权限" class="headerlink" title="16.3.3、配置本地仓库访问私服的权限"></a>16.3.3、配置本地仓库访问私服的权限</h4><p>在 maven 安装目录下的 settings.xml 配置文件中的 servers 中添加 serve 节点，因为私服不是谁都可以使用，所以需要配置用户名和密码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="16-3-4、配置当前项目访问私服上传资源的保存位置"><a href="#16-3-4、配置当前项目访问私服上传资源的保存位置" class="headerlink" title="16.3.4、配置当前项目访问私服上传资源的保存位置"></a>16.3.4、配置当前项目访问私服上传资源的保存位置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://120.78.177.161:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://120.78.177.161:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发布资源到私服命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy</span><br></pre></td></tr></table></figure><p>注意：id 名称需要与 settings.xml 配置文件中 server 节点配置的 id 保持一致。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1630046708938-5fe0ff71-cc01-42e1-b9e3-206b427b3c15.png#clientId=u1226ddf2-c848-4&from=paste&height=930&id=u0e064a76&margin=%5Bobject%20Object%5D&name=image.png&originHeight=930&originWidth=1920&originalType=binary%E2%88%B6=1&size=166820&status=done&style=shadow&taskId=u9fb3d92b-7c73-49ef-8fac-e3a4a2bdece&width=1920" alt="image.png"><br>可以看到项目快照版本已经上传到私服。</p><h4 id="16-3-5、设置代理仓库-用于下载资源"><a href="#16-3-5、设置代理仓库-用于下载资源" class="headerlink" title="16.3.5、设置代理仓库(用于下载资源)"></a>16.3.5、设置代理仓库(用于下载资源)</h4><p>在测试的时候，先将本地仓库的依赖先删除掉，迫使项目去私服中下载。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 私服仓库配置:从私服下载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://120.78.177.161:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Plugin Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://120.78.177.161:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果没有开启匿名访问，在下载资源的时候会报没有权限下载。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1630049253506-5d376163-48f1-45f8-a5e6-b441d73eaa4e.png#clientId=u1226ddf2-c848-4&from=paste&height=473&id=uae7097fb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=473&originWidth=1895&originalType=binary%E2%88%B6=1&size=701530&status=done&style=none&taskId=u943413fa-d6c3-4a4d-8439-40b7a7f9d83&width=1895" alt="image.png"><br>开启匿名访问<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1630048350485-99dd52bf-6036-492b-9da4-e58a0ee153c2.png#clientId=u1226ddf2-c848-4&from=paste&height=935&id=u1fe4af04&margin=%5Bobject%20Object%5D&name=image.png&originHeight=935&originWidth=1920&originalType=binary%E2%88%B6=1&size=108422&status=done&style=none&taskId=uf4b55e7a-7b90-41fb-8a6b-5f5d06ba93e&width=1920" alt="image.png"><br>idea 配置 maven 总是更新快照。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1630049066269-d0109002-b482-4768-a6d0-9b5025aa78a6.png#clientId=u1226ddf2-c848-4&from=paste&height=888&id=u9891eebc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=888&originWidth=1141&originalType=binary%E2%88%B6=1&size=121682&status=done&style=none&taskId=u5812d3d0-0a4e-443b-aa36-33ffb66c694&width=1141" alt="image.png"><br>依赖下载成功<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1630049193461-f2aaabed-c769-4d82-bd2f-c2d2babbd8b7.png#clientId=u1226ddf2-c848-4&from=paste&height=575&id=ud4da321b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=575&originWidth=1894&originalType=binary%E2%88%B6=1&size=932915&status=done&style=none&taskId=u40f302a1-fe3d-472d-a332-407de9d48d4&width=1894" alt="image.png"></p><h4 id="16-3-6、上传第三方-jar-包"><a href="#16-3-6、上传第三方-jar-包" class="headerlink" title="16.3.6、上传第三方 jar 包"></a>16.3.6、上传第三方 jar 包</h4><p>打开 cmd，先跳转到第三方 jar 包资源目录，然后执行如下 mvn 命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.2.28 -Dpackaging=jar -Dfile=fastjson-1.2.28.jar -Durl=http://120.78.177.161:8081/repository/maven-releases/ -DrepositoryId=nexus-releases</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1630050412656-acb45561-3711-4e8a-af22-e94d72e65b2d.png#clientId=u1226ddf2-c848-4&from=paste&height=512&id=u40223ec2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=512&originWidth=979&originalType=binary%E2%88%B6=1&size=53983&status=done&style=none&taskId=ub1c91b3c-b44a-426d-aaa7-b86182f8e2c&width=979" alt="image.png"><br>查看 nexus-releases 仓库，发现有我们上传的第三方 jar 包。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1630050454502-a5cda835-7ce3-4e76-bf7b-4cdbdfdc5bb7.png#clientId=u1226ddf2-c848-4&from=paste&height=934&id=uc5ca3b72&margin=%5Bobject%20Object%5D&name=image.png&originHeight=934&originWidth=1918&originalType=binary%E2%88%B6=1&size=78925&status=done&style=none&taskId=ub8b3154e-a196-4e1b-811a-f377ce88f30&width=1918" alt="image.png"><br>至此，大功告成！！！先告一段落，❀❀❀</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透</title>
      <link href="/2021/08/16/yuque/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2021/08/16/yuque/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1、钉钉内网穿透工具"><a href="#1、钉钉内网穿透工具" class="headerlink" title="1、钉钉内网穿透工具"></a>1、<a href="https://developers.dingtalk.com/document/resourcedownload/http-intranet-penetration">钉钉内网穿透工具</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629102072827-4517921d-63a2-4542-b74b-a3de5016c2da.png#clientId=u561e1c08-995e-4&from=paste&id=u5343bbd2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=844&originWidth=1500&originalType=url%E2%88%B6=1&size=258820&status=done&style=none&taskId=u7a5feb15-2b8b-4b17-b929-db85b74c115" alt="image.png"></p><h3 id="1-1、介绍"><a href="#1-1、介绍" class="headerlink" title="1.1、介绍"></a>1.1、介绍</h3><p>内网穿透工具可以实现将一个公网域名映射到本地的 localhost 域名</p><h3 id="1-2、使用pierced-rar"><a href="#1-2、使用pierced-rar" class="headerlink" title="1.2、使用pierced.rar"></a>1.2、使用<a href="https://www.yuque.com/attachments/yuque/0/2021/rar/1554080/1629101873533-0a421a56-1f33-4b33-aaad-c52b754edfbe.rar?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/rar/1554080/1629101873533-0a421a56-1f33-4b33-aaad-c52b754edfbe.rar%22,%22name%22:%22pierced.rar%22,%22size%22:21074899,%22type%22:%22%22,%22ext%22:%22rar%22,%22status%22:%22done%22,%22source%22:%22transfer%22,%22id%22:%22dNTk6%22,%22card%22:%22file%22%7D">pierced.rar</a></h3><p>下载工具，解压至某文件夹，在该文件夹下打开 cmd 控制台<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629102576202-a5bbab7f-4268-44e1-8b0a-b260c59167b4.png#clientId=u561e1c08-995e-4&from=paste&height=512&id=uc3dfd7b0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=512&originWidth=979&originalType=binary%E2%88%B6=1&size=23085&status=done&style=none&taskId=ue1addbd3-999b-41ea-bd0d-d82070fe2ad&width=979" alt="image.png"><br>使用如下命令启动内网穿透</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ding.exe -config=ding.cfg -subdomain=intelliws 8500</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-config</td><td>内网穿透的配置文件，按照命令示例固定为钉钉提供的./ding.cfg，无需修改</td></tr><tr><td>-subdomain</td><td>您需要使用的域名前缀，该前缀将会匹配到“vaiwan.com”前面，例如你的 subdomain 是 abcde，启动工具后会将 abcde.vaiwan.com 映射到本地。</td></tr><tr><td>端口</td><td>您需要代理的本地服务 http-server 端口，例如你本地端口为 8080 等</td></tr></tbody></table><p>成功后界面<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629102612015-5d26f3ec-6efc-44b9-8762-aff0ec250179.png#clientId=u561e1c08-995e-4&from=paste&height=512&id=ud6d3ab9f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=512&originWidth=979&originalType=binary%E2%88%B6=1&size=24108&status=done&style=none&taskId=u2f93ca54-3d69-4f85-bcb4-9e5b0113c77&width=979" alt="image.png"></p><h3 id="1-3、注意"><a href="#1-3、注意" class="headerlink" title="1.3、注意"></a>1.3、注意</h3><ul><li>需要访问的域名是<a href="http://abcde.vaiwan.com/xxxxx">http://abcde.vaiwan.com/xxxxx</a> 而不是<a href="http://abcde.vaiwan.com:8080/xxxxx">http://abcde.vaiwan.com:8080/xxxxx</a></li><li>启动命令的 subdomain 参数有可能被别人占用，尽量不要用常用字符，可以用自己公司名的拼音，例如：alibaba、dingding 等。</li><li>可以在本地起个 http-server 服务，放置一个 index.html 文件，然后访问<a href="http://abcde.vaiwan.com/index.html%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B%E3%80%82">http://abcde.vaiwan.com/index.html测试一下。</a></li></ul><h2 id="2、NATAPP"><a href="#2、NATAPP" class="headerlink" title="2、NATAPP"></a>2、<a href="https://natapp.cn/tunnel/buy">NATAPP</a></h2><h3 id="2-1、使用"><a href="#2-1、使用" class="headerlink" title="2.1、使用"></a>2.1、使用</h3><p>注册一个账号登录即可，点击购买隧道，可以选择一个免费隧道(每次启动域名会变化)，有钱的话当然可以购买一个隧道，这里就选择一个免费隧道进行演示(当然不是没钱)。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629107053124-9e25ecbb-d186-480c-96ef-5328977a5650.png#clientId=u561e1c08-995e-4&from=paste&height=933&id=u4010bfa3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=933&originWidth=1918&originalType=binary%E2%88%B6=1&size=682590&status=done&style=none&taskId=u761b6efc-ca03-4364-9d97-1df552de014&width=1918" alt="image.png"><br>修改你需要映射到本地的哪个端口。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629107164572-6255e31a-e41e-4508-816f-719714e06275.png#clientId=u561e1c08-995e-4&from=paste&height=704&id=u104c5a54&margin=%5Bobject%20Object%5D&name=image.png&originHeight=704&originWidth=1620&originalType=binary%E2%88%B6=1&size=72070&status=done&style=none&taskId=u0a99cc7f-786d-4550-8779-832df8b83ca&width=1620" alt="image.png"><br>可以在我的隧道列表看到刚才创建的隧道。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629107216164-15a0f8ec-1b07-450a-b7dc-0fe79bd0513c.png#clientId=u561e1c08-995e-4&from=paste&height=897&id=u4fcd3eb9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=897&originWidth=1920&originalType=binary%E2%88%B6=1&size=728582&status=done&style=none&taskId=u0c1760b9-c504-410a-a9c6-a1a14026652&width=1920" alt="image.png"><br>接下来，下载<a href="https://cdn.natapp.cn/assets/downloads/clients/2_3_9/natapp_windows_amd64_2_3_9.zip?version=20190730">natapp 客户端</a>，解压之后，打开 config 文件，将上面创建的隧道中的 authtoken 复制到配置文件中。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629107769569-2f4ed306-ccf2-4304-a213-c98ce488764c.png#clientId=u561e1c08-995e-4&from=paste&height=693&id=u9544ee95&margin=%5Bobject%20Object%5D&name=image.png&originHeight=693&originWidth=1545&originalType=binary%E2%88%B6=1&size=126444&status=done&style=none&taskId=ucfc03e6a-eadd-4f90-a362-984fcfdc93c&width=1545" alt="image.png"><br>然后，双击打开 natapp 软件，出现如下界面表示成功运行。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629107813177-c61e5402-1c3a-4550-b281-0317f8bbd290.png#clientId=u561e1c08-995e-4&from=paste&height=512&id=u20ff68bd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=512&originWidth=979&originalType=binary%E2%88%B6=1&size=24883&status=done&style=none&taskId=u889e0ee7-4e3e-40a7-9122-49730e58a83&width=979" alt="image.png"></p><h2 id="3、Ngrok"><a href="#3、Ngrok" class="headerlink" title="3、Ngrok"></a>3、<a href="https://www.ngrok.cc/">Ngrok</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629249748907-a8d35cbd-3589-4c5e-a35a-4c61c261eddf.png#clientId=u8a008f00-5139-4&from=paste&height=937&id=u68cf30bc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=937&originWidth=1919&originalType=binary%E2%88%B6=1&size=550005&status=done&style=shadow&taskId=u38ec9607-81b9-45ae-b8d5-76089fe5ee8&width=1919" alt="image.png"></p><h3 id="3-1、注册账号并登录"><a href="#3-1、注册账号并登录" class="headerlink" title="3.1、注册账号并登录"></a>3.1、注册账号并登录</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629249614745-67287089-ce1a-4005-a380-07d361cc0ea7.png#clientId=u8a008f00-5139-4&from=paste&height=940&id=ud89eed5e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=940&originWidth=1919&originalType=binary%E2%88%B6=1&size=62771&status=done&style=shadow&taskId=u9080b2c0-5546-44e2-bf2e-38a0128abf7&width=1919" alt="image.png"></p><h3 id="3-2、登录"><a href="#3-2、登录" class="headerlink" title="3.2、登录"></a>3.2、登录</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629249655576-1ff4a3ed-40d5-47ef-b1a5-37326bdfd9f6.png#clientId=u8a008f00-5139-4&from=paste&height=930&id=ua1fbb057&margin=%5Bobject%20Object%5D&name=image.png&originHeight=930&originWidth=1919&originalType=binary%E2%88%B6=1&size=49989&status=done&style=shadow&taskId=u1c61f1f2-a1a2-4d37-83f2-6e8afb9014f&width=1919" alt="image.png"></p><h3 id="3-3、创建一个免费的隧道"><a href="#3-3、创建一个免费的隧道" class="headerlink" title="3.3、创建一个免费的隧道"></a>3.3、创建一个免费的隧道</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629249808047-698c5efa-54bf-4490-b8b8-505594511596.png#clientId=u8a008f00-5139-4&from=paste&height=930&id=ud51d3ea5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=930&originWidth=1920&originalType=binary%E2%88%B6=1&size=174107&status=done&style=shadow&taskId=ubb9c52ea-f891-4e8d-801c-c26b623edc4&width=1920" alt="image.png"></p><h3 id="3-4、填写配置信息"><a href="#3-4、填写配置信息" class="headerlink" title="3.4、填写配置信息"></a>3.4、填写配置信息</h3><p>按照实际情况填写即可，一路点确定即可。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629249980941-c4edd000-1a3e-4df9-9cb8-4ac2b929b0b8.png#clientId=u8a008f00-5139-4&from=paste&height=935&id=u75c1e987&margin=%5Bobject%20Object%5D&name=image.png&originHeight=935&originWidth=1920&originalType=binary%E2%88%B6=1&size=104969&status=done&style=shadow&taskId=u95715143-12ea-499a-923a-ac0986bb81f&width=1920" alt="image.png"></p><h3 id="3-5、查看开通的隧道"><a href="#3-5、查看开通的隧道" class="headerlink" title="3.5、查看开通的隧道"></a>3.5、查看开通的隧道</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629250112923-43a43599-9d0c-4d3c-9f51-e73eaae9f641.png#clientId=u8a008f00-5139-4&from=paste&height=935&id=u0b9b221c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=935&originWidth=1914&originalType=binary%E2%88%B6=1&size=83122&status=done&style=shadow&taskId=ub53aa604-13cc-45dc-846a-51797be1f36&width=1914" alt="image.png"></p><h3 id="3-6、下载客户端"><a href="#3-6、下载客户端" class="headerlink" title="3.6、下载客户端"></a>3.6、下载客户端</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629250170868-3742eabe-fd5d-4a6a-bf31-7d124eb581df.png#clientId=u8a008f00-5139-4&from=paste&height=938&id=u2032ad9d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=938&originWidth=1917&originalType=binary%E2%88%B6=1&size=85568&status=done&style=shadow&taskId=u735a753c-5614-4abe-841b-e9c8040bbc7&width=1917" alt="image.png"></p><h3 id="3-7、启动客户端"><a href="#3-7、启动客户端" class="headerlink" title="3.7、启动客户端"></a>3.7、启动客户端</h3><p>解压下载好的压缩包，双击 <code>bat</code> 文件，出现运行界面，填入隧道 id 即可开启映射。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629250279708-dff40dac-c500-47b4-aca7-f5c453788bd0.png#clientId=u8a008f00-5139-4&from=paste&height=690&id=ude1aac5e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=690&originWidth=1333&originalType=binary%E2%88%B6=1&size=59944&status=done&style=shadow&taskId=u1546807f-482b-47a9-96b0-b32a45d2020&width=1333" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629250390085-5dcfdbea-1cf0-46f0-b269-33e5a5a2b385.png#clientId=u8a008f00-5139-4&from=paste&height=503&id=ucf44d729&margin=%5Bobject%20Object%5D&name=image.png&originHeight=503&originWidth=870&originalType=binary%E2%88%B6=1&size=22721&status=done&style=shadow&taskId=ue4d8851c-5824-4b2f-a60e-8dc43db8dd6&width=870" alt="image.png"><br>到此就启动成功了，撒花！<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629250460184-076ce204-6fea-4d20-b814-155c8c57b21f.png#clientId=u8a008f00-5139-4&from=paste&height=512&id=uc362d791&margin=%5Bobject%20Object%5D&name=image.png&originHeight=512&originWidth=874&originalType=binary%E2%88%B6=1&size=19798&status=done&style=shadow&taskId=uce69acdd-a21e-4848-96b9-327401717b7&width=874" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发</title>
      <link href="/2021/08/16/yuque/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/"/>
      <url>/2021/08/16/yuque/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>要实现借助公众号给系统中的用户发送通知，则至关重要的一步就是将公众号用户与系统用户绑定起来。这样在系统中需要发送通知的时候，就可以知道对哪个关注了公众号的用户发送通知。</p><h2 id="1、接口测试号"><a href="#1、接口测试号" class="headerlink" title="1、接口测试号"></a>1、<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">接口测试号</a></h2><h3 id="1-1、登录微信公众平台测试号接口"><a href="#1-1、登录微信公众平台测试号接口" class="headerlink" title="1.1、登录微信公众平台测试号接口"></a>1.1、登录微信公众平台测试号接口</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629112523071-31193807-d076-4b4f-8915-ebe7a259f609.png#clientId=ua12e493e-bc3d-4&from=paste&height=798&id=ue484be79&margin=%5Bobject%20Object%5D&name=image.png&originHeight=798&originWidth=1919&originalType=binary%E2%88%B6=1&size=307413&status=done&style=none&taskId=ue74f6c6f-fb05-4d7f-ba90-68f08f6b02f&width=1919" alt="image.png"></p><h3 id="1-2、填写接口配置信息"><a href="#1-2、填写接口配置信息" class="headerlink" title="1.2、填写接口配置信息"></a>1.2、填写接口配置信息</h3><p>该步骤需要使用到内网穿透工具。提交配置的时候会把这个 token 发送到微信平台，然后微信平台会请求此 URL 调用开发的微信服务，验证服务的可用性和合法性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URL:http://intelliws.vaiwan.com/api/wx/portal/appID</span><br><span class="line">Token:intelliws</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629172844404-54b28efb-119b-4752-a72c-c438dba94660.png#clientId=uc6f76e7d-bc98-4&from=paste&height=990&id=u72fa36bb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=990&originWidth=1916&originalType=binary%E2%88%B6=1&size=111791&status=done&style=shadow&taskId=uf722cc69-4347-49ed-a5ce-142aaaeb6f4&width=1916" alt="image.png"></p><h3 id="1-3、开发环境准备"><a href="#1-3、开发环境准备" class="headerlink" title="1.3、开发环境准备"></a>1.3、开发环境准备</h3><h4 id="1-3-1、引入-wx-java-mp-spring-boot-starter-依赖"><a href="#1-3-1、引入-wx-java-mp-spring-boot-starter-依赖" class="headerlink" title="1.3.1、引入 wx-java-mp-spring-boot-starter 依赖"></a>1.3.1、引入 <code>wx-java-mp-spring-boot-starter</code> 依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wx-java-mp-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.5.B<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2、配置文件"><a href="#1-3-2、配置文件" class="headerlink" title="1.3.2、配置文件"></a>1.3.2、配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.mp.app-id=wxe04ed9ab275e518f</span><br><span class="line">wx.mp.secret=dc8ab44fbd2be76a1690f9acedbe1c18</span><br><span class="line">wx.mp.token=intelliws</span><br></pre></td></tr></table></figure><h4 id="1-3-3、编写-controller"><a href="#1-3-3、编写-controller" class="headerlink" title="1.3.3、编写 controller"></a>1.3.3、编写 controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/wx/portal/&#123;appid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeiXinMpController</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WeiXinMpController.class);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WxMpService wxMpService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeiXinMpController</span><span class="params">(WxMpService wxMpService)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.wxMpService = wxMpService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">authGet</span><span class="params">(<span class="meta">@PathVariable</span> String appid,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@RequestParam(name = &quot;signature&quot;, required = false)</span> String signature,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@RequestParam(name = &quot;timestamp&quot;, required = false)</span> String timestamp,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@RequestParam(name = &quot;nonce&quot;, required = false)</span> String nonce,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@RequestParam(name = &quot;echostr&quot;, required = false)</span> String echostr, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">logger.info(<span class="string">&quot;\n接收到来自微信服务器的认证消息：[&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;]&quot;</span>, signature, timestamp, nonce, echostr);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isAnyBlank(signature, timestamp, nonce, echostr)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;请求参数非法，请核实!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.wxMpService.switchover(appid)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">&quot;未找到对应appid=[%s]的配置，请核实！&quot;</span>, appid));</span><br><span class="line">&#125;</span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line"><span class="keyword">if</span> (wxMpService.checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">out.write(echostr);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">out.write(<span class="string">&quot;非法请求！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-4、启动内网穿透，点击页面提交"><a href="#1-3-4、启动内网穿透，点击页面提交" class="headerlink" title="1.3.4、启动内网穿透，点击页面提交"></a>1.3.4、启动内网穿透，点击页面提交</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629172913845-9dac3feb-ad04-4566-86e1-7c15af453de9.png#clientId=uc6f76e7d-bc98-4&from=paste&height=252&id=hsEzR&margin=%5Bobject%20Object%5D&name=image.png&originHeight=252&originWidth=1106&originalType=binary%E2%88%B6=1&size=19015&status=done&style=shadow&taskId=ua4d33d34-9f8a-4aaa-a11b-ca44b065554&width=1106" alt="image.png"></p><h2 id="2、接收与响应消息"><a href="#2、接收与响应消息" class="headerlink" title="2、接收与响应消息"></a>2、接收与响应消息</h2><h3 id="2-1、消息处理器接口"><a href="#2-1、消息处理器接口" class="headerlink" title="2.1、消息处理器接口"></a>2.1、消息处理器接口</h3><p>**WxJava **为了对不同类型的微信消息进行分类处理，用户必须自己实现不同类型的消息处理器，而消息处理器必须实现 <code>WxMpMessageHandler</code> 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理微信推送消息的处理器接口.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WxMpMessageHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理微信推送消息.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> wxMessage      微信推送消息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> context        上下文，如果handler或interceptor之间有信息要传递，可以用这个</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> wxMpService    服务类</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> sessionManager session管理器</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> xml格式的消息，如果在异步规则里处理的话，可以返回null</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> WxErrorException 异常</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">WxMpXmlOutMessage <span class="title">handle</span><span class="params">(WxMpXmlMessage wxMessage,</span></span></span><br><span class="line"><span class="params"><span class="function">                           Map&lt;String, Object&gt; context,</span></span></span><br><span class="line"><span class="params"><span class="function">                           WxMpService wxMpService,</span></span></span><br><span class="line"><span class="params"><span class="function">                           WxSessionManager sessionManager)</span> <span class="keyword">throws</span> WxErrorException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、关注与取消关注事件"><a href="#2-2、关注与取消关注事件" class="headerlink" title="2.2、关注与取消关注事件"></a>2.2、关注与取消关注事件</h3><h4 id="2-2-1、实现消息处理器"><a href="#2-2-1、实现消息处理器" class="headerlink" title="2.2.1、实现消息处理器"></a>2.2.1、实现消息处理器</h4><p>实现一个接收关注、取消关注事件推送的处理。首先定义关注和取消关注的消息处理器存入容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxMpSubscribeHandler</span> <span class="keyword">implements</span> <span class="title">WxMpMessageHandler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WxMpSubscribeHandler.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WxMpXmlOutMessage <span class="title">handle</span><span class="params">(WxMpXmlMessage wxMessage, Map&lt;String, Object&gt; context, WxMpService wxMpService,</span></span></span><br><span class="line"><span class="params"><span class="function">WxSessionManager sessionManager)</span> <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line">logger.info(<span class="string">&quot;新关注用户: &#123;&#125;&quot;</span>, wxMessage.getFromUser());</span><br><span class="line"><span class="comment">// 获取微信用户基本信息</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">WxMpUser userWxInfo = wxMpService.getUserService().userInfo(wxMessage.getFromUser(), <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (userWxInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// TODO 可以添加关注用户到本地数据库</span></span><br><span class="line">logger.info(<span class="string">&quot;用户信息: &#123;&#125;&quot;</span>, userWxInfo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> WxMpXmlOutMessage.TEXT().fromUser(wxMessage.getToUser()).toUser(wxMessage.getFromUser())</span><br><span class="line">.content(<span class="string">&quot;欢迎关注！&quot;</span>).build();</span><br><span class="line">&#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e.getError().getErrorCode() == <span class="number">48001</span>) &#123;</span><br><span class="line">logger.info(<span class="string">&quot;该公众号没有获取用户信息权限！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxMpUnSubscribeHandler</span> <span class="keyword">implements</span> <span class="title">WxMpMessageHandler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WxMpUnSubscribeHandler.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WxMpXmlOutMessage <span class="title">handle</span><span class="params">(WxMpXmlMessage wxMessage, Map&lt;String, Object&gt; context, WxMpService wxMpService,</span></span></span><br><span class="line"><span class="params"><span class="function">WxSessionManager sessionManager)</span> <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line">logger.info(<span class="string">&quot;用户取消关注: &#123;&#125;&quot;</span>, wxMessage.getFromUser());</span><br><span class="line"><span class="comment">// TODO 可以更新本地数据库为取消关注状态</span></span><br><span class="line"><span class="comment">// 因为已经取消关注，所以即使回复消息也收不到</span></span><br><span class="line"><span class="keyword">return</span> WxMpXmlOutMessage.TEXT().fromUser(wxMessage.getToUser()).toUser(wxMessage.getFromUser()).content(<span class="string">&quot;请别离开我&quot;</span>)</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2、指定消息路由规则"><a href="#2-2-2、指定消息路由规则" class="headerlink" title="2.2.2、指定消息路由规则"></a>2.2.2、指定消息路由规则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeiXinMpConfig</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WxMpService wxMpService;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WxMpSubscribeHandler wxMpSubscribeHandler;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WxMpUnSubscribeHandler wxMpUnSubscribeHandler;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeiXinMpConfig</span><span class="params">(WxMpService wxMpService, WxMpSubscribeHandler wxMpSubscribeHandler,</span></span></span><br><span class="line"><span class="params"><span class="function">WxMpUnSubscribeHandler wxMpUnSubscribeHandler)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.wxMpService = wxMpService;</span><br><span class="line"><span class="keyword">this</span>.wxMpSubscribeHandler = wxMpSubscribeHandler;</span><br><span class="line"><span class="keyword">this</span>.wxMpUnSubscribeHandler = wxMpUnSubscribeHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WxMpMessageRouter <span class="title">wxMpMessageRouter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> WxMpMessageRouter router = <span class="keyword">new</span> WxMpMessageRouter(wxMpService);</span><br><span class="line">router.rule().async(<span class="keyword">false</span>).msgType(WxConsts.XmlMsgType.EVENT).event(WxConsts.EventType.SUBSCRIBE)</span><br><span class="line">.handler(wxMpSubscribeHandler).end();</span><br><span class="line">router.rule().async(<span class="keyword">false</span>).msgType(WxConsts.XmlMsgType.EVENT).event(WxConsts.EventType.UNSUBSCRIBE)</span><br><span class="line">.handler(wxMpUnSubscribeHandler).end();</span><br><span class="line"><span class="keyword">return</span> router;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3、编写-controller"><a href="#2-2-3、编写-controller" class="headerlink" title="2.2.3、编写 controller"></a>2.2.3、编写 controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(produces = &quot;application/xml; charset=UTF-8&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">(<span class="meta">@PathVariable</span> String appid, <span class="meta">@RequestBody</span> String requestBody,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="meta">@RequestParam(&quot;signature&quot;)</span> String signature, <span class="meta">@RequestParam(&quot;timestamp&quot;)</span> String timestamp,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="meta">@RequestParam(&quot;nonce&quot;)</span> String nonce, <span class="meta">@RequestParam(&quot;openid&quot;)</span> String openid,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="meta">@RequestParam(name = &quot;encrypt_type&quot;, required = false)</span> String encType,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="meta">@RequestParam(name = &quot;msg_signature&quot;, required = false)</span> String msgSignature)</span> </span>&#123;</span><br><span class="line">    logger.info(</span><br><span class="line">        <span class="string">&quot;\n接收微信请求：[appid=[&#123;&#125;], openid=[&#123;&#125;], [signature=[&#123;&#125;], encType=[&#123;&#125;], msgSignature=[&#123;&#125;],&quot;</span></span><br><span class="line">        + <span class="string">&quot; timestamp=[&#123;&#125;], nonce=[&#123;&#125;], requestBody=[\n&#123;&#125;\n] &quot;</span>,</span><br><span class="line">        appid, openid, signature, encType, msgSignature, timestamp, nonce, requestBody);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.wxMpService.switchover(appid)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">&quot;未找到对应appid=[%s]的配置，请核实！&quot;</span>, appid));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!wxMpService.checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;非法请求，可能属于伪造的请求！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (encType == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 明文传输的消息</span></span><br><span class="line">        WxMpXmlMessage inMessage = WxMpXmlMessage.fromXml(requestBody);</span><br><span class="line">        WxMpXmlOutMessage outMessage = <span class="keyword">this</span>.route(inMessage);</span><br><span class="line">        <span class="keyword">if</span> (outMessage == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        out = outMessage.toXml();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;aes&quot;</span>.equalsIgnoreCase(encType)) &#123;</span><br><span class="line">        <span class="comment">// aes加密的消息</span></span><br><span class="line">        WxMpXmlMessage inMessage = WxMpXmlMessage.fromEncryptedXml(requestBody, wxMpService.getWxMpConfigStorage(),</span><br><span class="line">                                                                   timestamp, nonce, msgSignature);</span><br><span class="line">        logger.debug(<span class="string">&quot;\n消息解密后内容为：\n&#123;&#125; &quot;</span>, inMessage.toString());</span><br><span class="line">        WxMpXmlOutMessage outMessage = <span class="keyword">this</span>.route(inMessage);</span><br><span class="line">        <span class="keyword">if</span> (outMessage == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        out = outMessage.toEncryptedXml(wxMpService.getWxMpConfigStorage());</span><br><span class="line">    &#125;</span><br><span class="line">    logger.debug(<span class="string">&quot;\n组装回复信息：&#123;&#125;&quot;</span>, out);</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WxMpXmlOutMessage <span class="title">route</span><span class="params">(WxMpXmlMessage message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.wxMpMessageRouter.route(message);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;路由消息时出现异常！&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4、用户扫码关注"><a href="#2-2-4、用户扫码关注" class="headerlink" title="2.2.4、用户扫码关注"></a>2.2.4、用户扫码关注</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629276962244-376dccd0-788a-4160-bed0-54ee056f93f2.png#clientId=ud8b45352-b391-4&from=paste&height=411&id=u129e606f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=820&originWidth=379&originalType=binary%E2%88%B6=1&size=39151&status=done&style=shadow&taskId=uf72d3e29-f9d0-409b-93a0-5c966676187&width=190" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629194442142-534ff163-037e-4f67-b95f-26565b7a008b.png#clientId=uc7a59000-a0ab-4&from=paste&height=417&id=uca747fb5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=417&originWidth=1790&originalType=binary%E2%88%B6=1&size=642655&status=done&style=shadow&taskId=u98598ccc-dff4-4629-a1f3-ce8c0bafa50&width=1790" alt="image.png"></p><h4 id="2-2-5、用户取消关注"><a href="#2-2-5、用户取消关注" class="headerlink" title="2.2.5、用户取消关注"></a>2.2.5、用户取消关注</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629194504820-70122092-15e6-45f4-bcc0-75b0b48f9395.png#clientId=uc7a59000-a0ab-4&from=paste&height=398&id=u14bee386&margin=%5Bobject%20Object%5D&name=image.png&originHeight=398&originWidth=1790&originalType=binary%E2%88%B6=1&size=618056&status=done&style=shadow&taskId=ue7c935ac-17ed-46ac-aae2-c93f9a868f5&width=1790" alt="image.png"></p><h2 id="3、公众号用户与网站用户绑定重要"><a href="#3、公众号用户与网站用户绑定重要" class="headerlink" title="3、公众号用户与网站用户绑定重要"></a>3、公众号用户与网站用户绑定重要</h2><p>其实在<a href="https://developers.weixin.qq.com/doc/offiaccount/Account_Management/Generating_a_Parametric_QR_Code.html">微信公众号文档</a>中已经给出了答案，为了满足用户渠道推广分析和<strong>用户帐号绑定</strong>等场景的需要，公众平台提供了生成带参数二维码的接口。使用该接口可以获得多个带不同场景值的二维码，用户扫描后，公众号可以接收到事件推送。</p><h3 id="3-1、流程"><a href="#3-1、流程" class="headerlink" title="3.1、流程"></a>3.1、流程</h3><p>一次完整的绑定流程如下：</p><ol><li>用户登录网站，进入用户管理列表，点击用户上的”绑定微信账户”按钮；</li><li>后台使用微信接口，生成二维码链接返回给前端弹框显示，并带上场景值(即当前绑定的用户编号)；</li><li>如果用户还未关注公众号，用户扫描二维码，并点击关注微信公众号；后台接收微信服务器推送的关注事件，拿到场景值；</li><li>如果用户已经关注公众号，用户扫描二维码，直接进入公众号会话；后台接收微信服务器推送的扫描事件，拿到场景值；</li><li>后台将场景值(即当前绑定的用户编号)与微信用户的 openId 绑定起来；</li><li>给微信公众号返回”绑定成功”的提示；</li><li>通知网站前台页面，提示”绑定成功”，刷新页面，并返回一些微信用户信息。</li></ol><h3 id="3-2、二维码类型"><a href="#3-2、二维码类型" class="headerlink" title="3.2、二维码类型"></a>3.2、二维码类型</h3><p>目前有 2 种类型的二维码：</p><ol><li><strong>临时二维码</strong>，是有过期时间的，最长可以设置为在二维码生成后的<strong>30 天</strong>（即 2592000 秒）后过期，但能够生成较多数量。<strong>临时二维码主要用于帐号绑定等不要求二维码永久保存的业务场景</strong></li><li><strong>永久二维码</strong>，是无过期时间的，但数量较少（目前为最多 10 万个）。<strong>永久二维码主要用于适用于帐号绑定、用户来源统计等场景</strong>。</li></ol><h3 id="3-3、事件推送类型"><a href="#3-3、事件推送类型" class="headerlink" title="3.3、事件推送类型"></a>3.3、事件推送类型</h3><p>用户扫描带场景值二维码时，可能推送以下两种事件：</p><ol><li>如果<strong>用户还未关注公众号</strong>，则用户可以关注公众号，关注后微信会将<strong>带场景值的关注事件推送给开发者</strong></li><li>如果<strong>用户已经关注公众号</strong>，在用户扫描后会自动进入会话，微信也会将<strong>带场景值的扫描事件推送给开发者</strong></li></ol><h3 id="3-4、生成二维码步骤"><a href="#3-4、生成二维码步骤" class="headerlink" title="3.4、生成二维码步骤"></a>3.4、生成二维码步骤</h3><h4 id="3-4-1、在你的网站页面上生成一个带场景值的二维码，其中的场景值为当前需要绑定的系统用户编号"><a href="#3-4-1、在你的网站页面上生成一个带场景值的二维码，其中的场景值为当前需要绑定的系统用户编号" class="headerlink" title="3.4.1、在你的网站页面上生成一个带场景值的二维码，其中的场景值为当前需要绑定的系统用户编号"></a>3.4.1、在你的网站页面上生成一个带场景值的二维码，其中的场景值为当前需要绑定的系统用户编号</h4><h4 id="3-4-2、创建二维码-ticket，每次创建二维码-ticket-的时候需要提供一个开发者自行设定的参数（scene-id）"><a href="#3-4-2、创建二维码-ticket，每次创建二维码-ticket-的时候需要提供一个开发者自行设定的参数（scene-id）" class="headerlink" title="3.4.2、创建二维码 ticket，每次创建二维码 ticket 的时候需要提供一个开发者自行设定的参数（scene_id）"></a>3.4.2、创建二维码 ticket，每次创建二维码 ticket 的时候需要提供一个开发者自行设定的参数（scene_id）</h4><ul><li>临时二维码请求说明：</li></ul><p>http 请求方式: POST URL: <a href="https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=TOKEN">https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=TOKEN</a><br>POST 数据格式：json POST 数据例子：{“expire_seconds”: 604800, “action_name”: “QR_SCENE”, “action_info”: {“scene”: {“scene_id”: 123}}}<br>或者也可以使用以下 POST 数据创建字符串形式的二维码参数：{“expire_seconds”: 604800, “action_name”: “QR_STR_SCENE”, “action_info”: {“scene”: {“scene_str”: “test”}}}</p><ul><li>永久二维码请求说明：</li></ul><p>http 请求方式: POST URL: <a href="https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=TOKEN">https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=TOKEN</a><br>POST 数据格式：json POST 数据例子：{“action_name”: “QR_LIMIT_SCENE”, “action_info”: {“scene”: {“scene_id”: 123}}}<br>或者也可以使用以下 POST 数据创建字符串形式的二维码参数： {“action_name”: “QR_LIMIT_STR_SCENE”, “action_info”: {“scene”: {“scene_str”: “test”}}}<br>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>expire_seconds</td><td>该二维码有效时间，以秒为单位。 最大不超过 2592000（即 30 天），此字段如果不填，则默认有效期为 30 秒。</td></tr><tr><td>action_name</td><td>二维码类型，QR_SCENE 为临时的整型参数值，QR_STR_SCENE 为临时的字符串参数值，QR_LIMIT_SCENE 为永久的整型参数值，QR_LIMIT_STR_SCENE 为永久的字符串参数值</td></tr><tr><td>action_info</td><td>二维码详细信息</td></tr><tr><td>scene_id</td><td>场景值 ID，临时二维码时为 32 位非 0 整型，永久二维码时最大值为 100000（目前参数只支持 1–100000）</td></tr><tr><td>scene_str</td><td>场景值 ID（字符串形式的 ID），字符串类型，长度限制为 1 到 64</td></tr></tbody></table><p>返回结果：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629280679555-56ea95b4-07f5-481b-bfb9-a5297d561bfb.png#clientId=ud8b45352-b391-4&from=paste&height=440&id=uc6d7e361&margin=%5Bobject%20Object%5D&name=image.png&originHeight=440&originWidth=1042&originalType=binary%E2%88%B6=1&size=49740&status=done&style=shadow&taskId=u731aaf3a-505e-48eb-9a59-8050e199537&width=1042" alt="image.png"><br>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>ticket</td><td>获取的二维码 ticket，凭借此 ticket 可以在有效时间内换取二维码。</td></tr><tr><td>expire_seconds</td><td>该二维码有效时间，以秒为单位。 最大不超过 2592000（即 30 天）。</td></tr><tr><td>url</td><td>二维码图片解析后的地址，开发者可根据该地址自行生成需要的二维码图片</td></tr></tbody></table><h4 id="3-4-3、通过-ticket-换取二维码"><a href="#3-4-3、通过-ticket-换取二维码" class="headerlink" title="3.4.3、通过 ticket 换取二维码"></a>3.4.3、通过 ticket 换取二维码</h4><p>获取二维码 ticket 后，开发者可用 ticket 换取二维码图片。请注意，本接口无须登录态即可调用。<br>请求说明：<br>HTTP GET 请求（请使用 https 协议）<a href="https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=TICKET">https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=TICKET</a> 提醒：TICKET 记得进行 UrlEncode<br>返回结果：二维码图片地址就是下面返回的请求地址。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629280782630-f6bdad0a-e7a1-4b52-ac0f-c2457b0510c3.png#clientId=ud8b45352-b391-4&from=paste&height=386&id=u70faf395&margin=%5Bobject%20Object%5D&name=image.png&originHeight=386&originWidth=887&originalType=binary%E2%88%B6=1&size=31930&status=done&style=shadow&taskId=ua35c6cf0-1d23-4ccf-b226-a417ef18369&width=887" alt="image.png"></p><h4 id="3-4-4、代码"><a href="#3-4-4、代码" class="headerlink" title="3.4.4、代码"></a>3.4.4、代码</h4><ul><li>生成带场景值的二维码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成带场景值二维码</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 二维码url</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;qr-code/&#123;userNo&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">createQrCode</span><span class="params">(<span class="meta">@PathVariable</span> String userNo)</span> <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;绑定用户账号为: &#123;&#125;&quot;</span>, userNo);</span><br><span class="line">    <span class="comment">// 获取ticket，时间不填默认30秒，最大30天</span></span><br><span class="line">    WxMpQrCodeTicket ticket =</span><br><span class="line">        <span class="keyword">this</span>.wxMpService.getQrcodeService().qrCodeCreateTmpTicket(userNo, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 根据ticket创建临时二维码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.wxMpService.getQrcodeService().qrCodePictureUrl(ticket.getTicket());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网站显示二维码图片<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629361169489-af03d521-03bf-4e24-841d-f64982bc91c6.png#clientId=u9ebebc8a-3940-4&from=paste&height=529&id=dBKNV&margin=%5Bobject%20Object%5D&name=image.png&originHeight=529&originWidth=560&originalType=binary%E2%88%B6=1&size=55116&status=done&style=shadow&taskId=uf178a8b6-8d45-4da5-b633-5ec713cd4bb&width=560" alt="image.png"></p><ul><li>修改消息路由规则</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629289356445-dc4bd974-c7d2-4aac-965b-6000e539dddf.png#clientId=ud8b45352-b391-4&from=paste&height=346&id=OqHc2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=346&originWidth=1253&originalType=binary%E2%88%B6=1&size=403641&status=done&style=shadow&taskId=u1dd9929f-a327-4538-94af-d4a9d501d05&width=1253" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.rule().async(<span class="keyword">false</span>).msgType(WxConsts.XmlMsgType.EVENT).event(WxConsts.EventType.SCAN).handler(wxMpScanHandler).end();</span><br></pre></td></tr></table></figure><ul><li>添加用于处理扫描的消息处理器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxMpScanHandler</span> <span class="keyword">implements</span> <span class="title">WxMpMessageHandler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WxMpScanHandler.class);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WxMpXmlOutMessage <span class="title">handle</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      WxMpXmlMessage wxMessage,</span></span></span><br><span class="line"><span class="params"><span class="function">      Map&lt;String, Object&gt; map,</span></span></span><br><span class="line"><span class="params"><span class="function">      WxMpService wxMpService,</span></span></span><br><span class="line"><span class="params"><span class="function">      WxSessionManager wxSessionManager)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;系统用户账号为：&#123;&#125;&quot;</span>, wxMessage.getEventKey());</span><br><span class="line">    logger.info(<span class="string">&quot;openId: &#123;&#125;&quot;</span>, wxMessage.getFromUser());</span><br><span class="line">    <span class="keyword">return</span> WxMpXmlOutMessage.TEXT()</span><br><span class="line">        .content(<span class="string">&quot;绑定系统用户成功！&quot;</span>)</span><br><span class="line">        .fromUser(wxMessage.getToUser())</span><br><span class="line">        .toUser(wxMessage.getFromUser())</span><br><span class="line">        .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改关注事件消息处理器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxMpSubscribeHandler</span> <span class="keyword">implements</span> <span class="title">WxMpMessageHandler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WxMpSubscribeHandler.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WxMpXmlOutMessage <span class="title">handle</span><span class="params">(WxMpXmlMessage wxMessage, Map&lt;String, Object&gt; context, WxMpService wxMpService,</span></span></span><br><span class="line"><span class="params"><span class="function">WxSessionManager sessionManager)</span> <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(wxMessage.getEventKey())) &#123;</span><br><span class="line">           <span class="comment">// 通过扫描带场景值二维码关注的用户，用于系统绑定用户</span></span><br><span class="line">logger.info(<span class="string">&quot;用户账号为：&#123;&#125;&quot;</span>, wxMessage.getEventKey().split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">logger.info(<span class="string">&quot;新用户关注 OPENID: &#123;&#125;&quot;</span>, wxMessage.getFromUser());</span><br><span class="line">String uri = <span class="string">&quot;http://intelliws.vaiwan.com/api/wx/portal/APPID/callback&quot;</span>;</span><br><span class="line">uri = uri.replace(<span class="string">&quot;APPID&quot;</span>, wxMpService.getWxMpConfigStorage().getAppId());</span><br><span class="line">String href = <span class="string">&quot;欢迎关注！&lt;a href=\&quot;&quot;</span> + wxMpService.getOAuth2Service().buildAuthorizationUrl(uri,</span><br><span class="line">WxConsts.OAuth2Scope.SNSAPI_USERINFO, wxMpService.getWxMpConfigStorage().getToken())</span><br><span class="line">+ <span class="string">&quot;\&quot;&gt;请点击此处进行网页授权，测试用！！！&lt;/a&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> WxMpXmlOutMessage.TEXT().content(href).fromUser(wxMessage.getToUser()).toUser(wxMessage.getFromUser())</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，公众号用户与系统用户绑定的流程就完成了。</p><h2 id="4、模板消息"><a href="#4、模板消息" class="headerlink" title="4、模板消息"></a>4、模板消息</h2><h3 id="4-1、使用规则"><a href="#4-1、使用规则" class="headerlink" title="4.1、使用规则"></a>4.1、使用规则</h3><ol><li>所有服务号都可以在功能-&gt;添加功能插件处看到申请模板消息功能的入口，但只有<strong>认证后的服务号才可以申请模板消息的使用权限并获得该权限</strong>；</li><li>需要选择公众账号服务所处的 2 个行业，每月可更改 1 次所选行业；</li><li>在所选择行业的模板库中选用已有的模板进行调用；</li><li>每个账号可以同时使用 25 个模板。</li><li>当前每个账号的模板消息的<strong>日调用上限为 10 万次</strong>，单个模板没有特殊限制。【2014 年 11 月 18 日将接口调用频率从默认的日 1 万次提升为日 10 万次，可在 MP 登录后的开发者中心查看】。当账号粉丝数超过 10W/100W/1000W 时，模板消息的日调用上限会相应提升，以公众号 MP 后台开发者中心页面中标明的数字为准。</li></ol><h3 id="4-2、模板消息接口"><a href="#4-2、模板消息接口" class="headerlink" title="4.2、模板消息接口"></a>4.2、<a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Template_Message_Interface.html">模板消息接口</a></h3><h4 id="4-2-1、注意点："><a href="#4-2-1、注意点：" class="headerlink" title="4.2.1、注意点："></a>4.2.1、注意点：</h4><ol><li>模板消息调用时主要需要模板 ID 和模板中各参数的赋值内容；</li><li>模板中参数内容必须以”.DATA”结尾，否则视为保留字；</li><li>模板保留符号””。</li></ol><h4 id="4-2-2、发送模板消息"><a href="#4-2-2、发送模板消息" class="headerlink" title="4.2.2、发送模板消息"></a>4.2.2、发送模板消息</h4><h5 id="4-2-2-1、接口调用请求说明"><a href="#4-2-2-1、接口调用请求说明" class="headerlink" title="4.2.2.1、接口调用请求说明"></a>4.2.2.1、接口调用请求说明</h5><blockquote><p>http 请求方式: POST <a href="https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=ACCESS_TOKEN">https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=ACCESS_TOKEN</a></p></blockquote><h5 id="4-2-2-2、POST-数据说明"><a href="#4-2-2-2、POST-数据说明" class="headerlink" title="4.2.2.2、POST 数据说明"></a>4.2.2.2、POST 数据说明</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;touser&quot;</span>: <span class="string">&quot;OPENID&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;template_id&quot;</span>: <span class="string">&quot;ngqIpbwh8bUfcSsECmogfXcV14J0tQlEpBO27izEYtY&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://weixin.qq.com/download&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;miniprogram&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;appid&quot;</span>: <span class="string">&quot;xiaochengxuappid12345&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;pagepath&quot;</span>: <span class="string">&quot;index?foo=bar&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;first&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;恭喜你购买成功！&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;#173177&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;keyword1&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;巧克力&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;#173177&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;keyword2&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;39.8元&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;#173177&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;keyword3&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;2014年9月22日&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;#173177&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;remark&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;欢迎再次购买！&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;#173177&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数说明;<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629291049016-5342225b-c980-48ce-a35d-b99ff5de2806.png#clientId=ud8b45352-b391-4&from=paste&height=565&id=uf4fceeb6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=565&originWidth=1062&originalType=binary%E2%88%B6=1&size=44955&status=done&style=shadow&taskId=u95ef3691-049b-413e-998f-3cbadbc68a2&width=1062" alt="image.png"><br>注：<strong>url 和 miniprogram 都是非必填字段，若都不传则模板无跳转；若都传，会优先跳转至小程序。开发者可根据实际需要选择其中一种跳转方式即可。当用户的微信客户端版本不支持跳小程序时，将会跳转至 url</strong>。</p><h3 id="4-3、添加模板"><a href="#4-3、添加模板" class="headerlink" title="4.3、添加模板"></a>4.3、添加模板</h3><p>如果是认证过后的服务号，可以登录微信公众号后台管理，从模板库中添加，如果找不到适合的模板，还可以申请新模板(一个月只可以申请三个模板)；现在我们可以先在测试号中手动添加模板。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629291420031-71aebf7c-7aa0-48b9-b483-af8f5ede823a.png#clientId=ud8b45352-b391-4&from=paste&height=931&id=ub832a7d4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=931&originWidth=1911&originalType=binary%E2%88%B6=1&size=103855&status=done&style=shadow&taskId=u6926396e-2003-4fdd-9881-c7430038d1d&width=1911" alt="image.png"><br>在测试号中手动添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;first.DATA&#125;&#125; 商家名称：&#123;&#123;keyword1.DATA&#125;&#125; 商家电话：&#123;&#123;keyword2.DATA&#125;&#125; 订单号：&#123;&#123;keyword3.DATA&#125;&#125; 状态：&#123;&#123;keyword4.DATA&#125;&#125; 总价：&#123;&#123;keyword5.DATA&#125;&#125; &#123;&#123;remark.DATA&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629291617212-cc76ef15-0fe8-4047-bb67-2bfe4fcc8bf8.png#clientId=ud8b45352-b391-4&from=paste&height=737&id=ucae8fae9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=737&originWidth=1126&originalType=binary%E2%88%B6=1&size=80735&status=done&style=shadow&taskId=u34b79e9d-7f37-4a5d-a9c6-90ea2bf23fe&width=1126" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1629291685334-102868ad-b978-4553-8d71-669cc69de2bd.png#clientId=ud8b45352-b391-4&from=paste&height=222&id=ufc578fb8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=222&originWidth=1064&originalType=binary%E2%88%B6=1&size=24721&status=done&style=shadow&taskId=u618e4746-ecc3-4fbf-b691-44b67790761&width=1064" alt="image.png"></p><h3 id="4-4、代码"><a href="#4-4、代码" class="headerlink" title="4.4、代码"></a>4.4、代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 发送模板消息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> WxErrorException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;send&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendTemplateMessage</span><span class="params">()</span> <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line">    logger.info(wxMpService.getAccessToken());</span><br><span class="line">    <span class="comment">// 发送模板消息接口</span></span><br><span class="line">    WxMpTemplateMessage templateMessage =</span><br><span class="line">        WxMpTemplateMessage.builder()</span><br><span class="line">        <span class="comment">// 接收者openid</span></span><br><span class="line">        .toUser(<span class="string">&quot;openId&quot;</span>)</span><br><span class="line">        <span class="comment">// 模板id</span></span><br><span class="line">        .templateId(<span class="string">&quot;templateId&quot;</span>)</span><br><span class="line">        <span class="comment">// 模板跳转链接</span></span><br><span class="line">        .url(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="comment">// 添加模板数据</span></span><br><span class="line">    templateMessage</span><br><span class="line">        .addData(<span class="keyword">new</span> WxMpTemplateData(<span class="string">&quot;first&quot;</span>, <span class="string">&quot;用餐愉快哦&quot;</span>, <span class="string">&quot;#FF00FF&quot;</span>))</span><br><span class="line">        .addData(<span class="keyword">new</span> WxMpTemplateData(<span class="string">&quot;keyword1&quot;</span>, <span class="string">&quot;微信点餐&quot;</span>, <span class="string">&quot;#A9A9A9&quot;</span>))</span><br><span class="line">        .addData(<span class="keyword">new</span> WxMpTemplateData(<span class="string">&quot;keyword2&quot;</span>, <span class="string">&quot;13826913333&quot;</span>, <span class="string">&quot;#FF00FF&quot;</span>))</span><br><span class="line">        .addData(<span class="keyword">new</span> WxMpTemplateData(<span class="string">&quot;keyword3&quot;</span>, <span class="string">&quot;2021081722150001&quot;</span>, <span class="string">&quot;#FF00FF&quot;</span>))</span><br><span class="line">        .addData(<span class="keyword">new</span> WxMpTemplateData(<span class="string">&quot;keyword4&quot;</span>, <span class="string">&quot;￥56.5&quot;</span>, <span class="string">&quot;#FF00FF&quot;</span>))</span><br><span class="line">        .addData(<span class="keyword">new</span> WxMpTemplateData(<span class="string">&quot;remark&quot;</span>, <span class="string">&quot;用餐愉快哦&quot;</span>, <span class="string">&quot;#000000&quot;</span>));</span><br><span class="line">    String msgId = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 发送模板消息</span></span><br><span class="line">        msgId = wxMpService.getTemplateMsgService().sendTemplateMsg(templateMessage);</span><br><span class="line">        logger.info(wxMpService.getAccessToken());</span><br><span class="line">        logger.warn(<span class="string">&quot;·==++--·推送微信模板信息：&#123;&#125;·--++==·&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">        System.out.println(wxMpService.getAccessToken());</span><br><span class="line">        logger.warn(<span class="string">&quot;·==++--·推送微信模板信息：&#123;&#125;·--++==·&quot;</span>, <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msgId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，如果想使用 redis 保存 accessToken 的话，可以在配置文件中配置并且还要加入 redis 的依赖：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wx:</span></span><br><span class="line">  <span class="attr">mp:</span></span><br><span class="line">    <span class="attr">app-id:</span> <span class="string">xxxxxxxx</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">xxxxxxxx</span></span><br><span class="line">    <span class="attr">token:</span> <span class="string">xxxxxxxx</span></span><br><span class="line">    <span class="attr">config-storage:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redistemplate</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">xxx.xx.xxx.xxx</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--wx-java-mp的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wx-java-mp-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.5.B<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--redis的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码仓库 <code>[https://e.coding.net/start520823/notes/wx-mp.git](https://e.coding.net/start520823/notes/wx-mp.git)</code></p><h2 id="5、公司服务号"><a href="#5、公司服务号" class="headerlink" title="5、公司服务号"></a>5、公司服务号</h2><p>经过如下配置后，就和我们使用测试号就是一样的效果了。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1630029387063-9893df0c-3ee3-44eb-a748-0dcfa1a7241c.png#clientId=u020d3638-3ac3-4&from=paste&height=915&id=u64ce1326&margin=%5Bobject%20Object%5D&name=image.png&originHeight=915&originWidth=1884&originalType=binary%E2%88%B6=1&size=216180&status=done&style=none&taskId=u371b409a-214e-4171-857d-170c4829ef5&width=1884" alt="image.png"><br>至此，大功告成！撒花 ❀❀❀</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><h3 id="1、官方链接"><a href="#1、官方链接" class="headerlink" title="1、官方链接"></a>1、官方链接</h3><h4 id="1-1、微信公众平台测试号"><a href="#1-1、微信公众平台测试号" class="headerlink" title="1.1、微信公众平台测试号"></a>1.1、<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&t=sandbox/index">微信公众平台测试号</a></h4><h4 id="1-2、公众号文档"><a href="#1-2、公众号文档" class="headerlink" title="1.2、公众号文档"></a>1.2、<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html#0">公众号文档</a></h4><h4 id="1-3、公众号后台管理"><a href="#1-3、公众号后台管理" class="headerlink" title="1.3、公众号后台管理"></a>1.3、<a href="https://mp.weixin.qq.com/advanced/advanced?action=dev&t=advanced/dev&token=1012990949%E2%9F%A8=zh_CN">公众号后台管理</a></h4><h4 id="1-4、微信公众平台接口调试工具"><a href="#1-4、微信公众平台接口调试工具" class="headerlink" title="1.4、微信公众平台接口调试工具"></a>1.4、<a href="https://mp.weixin.qq.com/debug/cgi-bin/apiinfo">微信公众平台接口调试工具</a></h4><h3 id="2、WxJava"><a href="#2、WxJava" class="headerlink" title="2、WxJava"></a>2、WxJava</h3><h4 id="2-1、github-链接，可以在-test-目录查看各个功能的用法"><a href="#2-1、github-链接，可以在-test-目录查看各个功能的用法" class="headerlink" title="2.1、github 链接，可以在 test 目录查看各个功能的用法"></a>2.1、<a href="https://github.com/Wechat-Group/WxJava">github 链接，可以在 test 目录查看各个功能的用法</a></h4><h4 id="2-2、开发文档"><a href="#2-2、开发文档" class="headerlink" title="2.2、开发文档"></a>2.2、<a href="https://github.com/Wechat-Group/WxJava/wiki">开发文档</a></h4><h4 id="2-3、wx-java-mp-demo"><a href="#2-3、wx-java-mp-demo" class="headerlink" title="2.3、wx-java-mp-demo"></a>2.3、<a href="https://github.com/binarywang/weixin-java-mp-demo">wx-java-mp-demo</a></h4><h4 id="2-4、容易入手的教程1，2，建议先看这个"><a href="#2-4、容易入手的教程1，2，建议先看这个" class="headerlink" title="2.4、容易入手的教程1，2，建议先看这个"></a>2.4、容易入手的教程<a href="https://www.cnblogs.com/shouyaya/p/13235897.html">1</a>，<a href="https://www.cnblogs.com/runningA/archive/2020/01/24/12221878.html">2</a>，建议先看这个</h4><h4 id="2-5、比较全面的教程"><a href="#2-5、比较全面的教程" class="headerlink" title="2.5、比较全面的教程"></a>2.5、<a href="https://blog.csdn.net/weixin_45070175/article/details/118532572">比较全面的教程</a></h4><h3 id="3、公众号用户与网站用户绑定方案重要"><a href="#3、公众号用户与网站用户绑定方案重要" class="headerlink" title="3、公众号用户与网站用户绑定方案重要"></a>3、<a href="https://www.jianshu.com/p/a51c54ddd0f3">公众号用户与网站用户绑定方案</a>重要</h3><p>​</p><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>minio</title>
      <link href="/2021/08/13/yuque/minio/"/>
      <url>/2021/08/13/yuque/minio/</url>
      
        <content type="html"><![CDATA[<h2 id="0、介绍"><a href="#0、介绍" class="headerlink" title="0、介绍"></a>0、介绍</h2><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>MinIO 是全球领先的对象存储先锋，目前在全世界有数百万的用户. 在标准硬件上，读/写速度上高达 183 GB / 秒 和 171 GB / 秒。<br>对象存储可以充当主存储层，以处理 Spark、Presto、TensorFlow、H2O.ai 等各种复杂工作负载以及成为 Hadoop HDFS 的替代品。<br>MinIO 用作云原生应用程序的主要存储，与传统对象存储相比，云原生应用程序需要更高的吞吐量和更低的延迟。而这些都是 MinIO 能够达成的性能指标。</p><h3 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h3><p>MinIO 利用了 Web 缩放器的来之不易的知识，为对象存储带来了简单的缩放模型。 这是我们坚定的理念 “简单可扩展.” 在 MinIO, 扩展从单个群集开始，该群集可以与其他 MinIO 群集联合以创建全局名称空间, 并在需要时可以跨越多个不同的数据中心。 通过添加更多集群可以扩展名称空间, 更多机架，直到实现目标。</p><h3 id="云的原生支持"><a href="#云的原生支持" class="headerlink" title="云的原生支持"></a>云的原生支持</h3><p>MinIO 是在过去 4 年的时间内从 0 开始打造的一款软件 ，符合一切原生云计算的架构和构建过程，并且包含最新的云计算的全新的技术和概念。 其中包括支持 Kubernetes 、微服和多租户的的容器技术。使对象存储对于 Kubernetes 更加友好。</p><h3 id="开放全部源代码-企业级支持"><a href="#开放全部源代码-企业级支持" class="headerlink" title="开放全部源代码 + 企业级支持"></a>开放全部源代码 + 企业级支持</h3><p>MinIO 基于 Apache V2 license 100% 开放源代码 。 这就意味着 MinIO 的客户能够自动的、无限制、自由免费使用和集成 MinIO、自由的创新和创造、 自由的去修改、自由的再次发行新的版本和软件. 确实, MinIO 强有力的支持和驱动了很多世界 500 强的企业。 此外，其部署的多样性和专业性提供了其他软件无法比拟的优势。</p><h3 id="与-Amazon-S3-兼容"><a href="#与-Amazon-S3-兼容" class="headerlink" title="与 Amazon S3 兼容"></a>与 Amazon S3 兼容</h3><p>亚马逊云的 S3 API（接口协议） 是在全球范围内达到共识的对象存储的协议，是全世界内大家都认可的标准。 MinIO 在很早的时候就采用了 S3 兼容协议，并且 MinIO 是第一个支持 S3 Select 的产品. MinIO 对其兼容性的全面性感到自豪， 并且得到了 750 多个组织的认同, 包括 Microsoft Azure 使用 MinIO 的 S3 网关 - 这一指标超过其他同类产品的总和。</p><h3 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h3><p>极简主义是 MinIO 的指导性设计原则。简单性减少了出错的机会，提高了正常运行时间，提供了可靠性，同时简单性又是性能的基础。 只需下载一个二进制文件然后执行，即可在几分钟内安装和配置 MinIO。 配置选项和变体的数量保持在最低限度，这样让失败的配置概率降低到接近于 0 的水平。 MinIO 升级是通过一个简单命令完成的，这个命令可以无中断的完成 MinIO 的升级，并且不需要停机即可完成升级操作 - 降低总使用和运维成本。</p><hr><h2 id="1、minio-环境搭建"><a href="#1、minio-环境搭建" class="headerlink" title="1、minio 环境搭建"></a>1、minio 环境搭建</h2><p>官方文档：<a href="https://docs.min.io/">https://docs.min.io/</a><br>中文文档：<a href="http://docs.minio.org.cn/docs/">http://docs.minio.org.cn/docs/</a>（没有及时更新，容易踩坑）</p><h3 id="1-1、拉取镜像"><a href="#1-1、拉取镜像" class="headerlink" title="1.1、拉取镜像"></a>1.1、拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search minio</span><br><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure><h3 id="1-2、启动-docker-镜像"><a href="#1-2、启动-docker-镜像" class="headerlink" title="1.2、启动 docker 镜像"></a>1.2、启动 docker 镜像</h3><ul><li>密钥必须大于 8 位，否则会创建失败</li><li>文件目录和配置文件一定要映射到主机</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 9000:9000 \</span><br><span class="line">-p 9001:9001 \</span><br><span class="line">--name minio \</span><br><span class="line">-v /mnt/data:/data \</span><br><span class="line">-e &quot;MINIO_ROOT_USER=admin&quot; \</span><br><span class="line">-e &quot;MINIO_ROOT_PASSWORD=12345678&quot; \</span><br><span class="line">-d minio/minio server /data --console-address &quot;:9001&quot;</span><br></pre></td></tr></table></figure><h3 id="1-3、登录"><a href="#1-3、登录" class="headerlink" title="1.3、登录"></a>1.3、登录</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628934962888-e6a7337c-00b1-47ef-a5e1-c4ec5ef9724f.png#clientId=uc4243a03-4657-4&from=paste&height=560&id=u12ecc65c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=560&originWidth=1018&originalType=binary%E2%88%B6=1&size=41624&status=done&style=shadow&taskId=u4ec942a5-112c-41d3-95be-33c5df5bdd7&width=1018" alt="image.png"></p><h3 id="1-4、创建-bucket"><a href="#1-4、创建-bucket" class="headerlink" title="1.4、创建 bucket"></a>1.4、创建 bucket</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628935114597-ffff4fca-d071-49ce-9876-569d797ed71c.png#clientId=uc4243a03-4657-4&from=paste&height=932&id=u5dc3c760&margin=%5Bobject%20Object%5D&name=image.png&originHeight=932&originWidth=1908&originalType=binary%E2%88%B6=1&size=175408&status=done&style=shadow&taskId=u0b410d88-0f0a-4b6e-9c16-be697853376&width=1908" alt="image.png"></p><h3 id="1-5、上传图片"><a href="#1-5、上传图片" class="headerlink" title="1.5、上传图片"></a>1.5、上传图片</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628935207132-d5d690d7-553a-4c80-b666-14579f941ddd.png#clientId=uc4243a03-4657-4&from=paste&height=931&id=u3ac42f1c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=931&originWidth=1919&originalType=binary%E2%88%B6=1&size=160557&status=done&style=shadow&taskId=ude7a32a6-27a0-4bc2-94b6-2b2f050bb89&width=1919" alt="image.png"></p><h3 id="1-6、修改-bucket-访问权限"><a href="#1-6、修改-bucket-访问权限" class="headerlink" title="1.6、修改 bucket 访问权限"></a>1.6、修改 bucket 访问权限</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628949135387-f18c97ad-7e42-4796-8518-566d08fdffe1.png#clientId=u2e99bad5-430a-4&from=paste&height=936&id=ud74e41ec&margin=%5Bobject%20Object%5D&name=image.png&originHeight=936&originWidth=1919&originalType=binary%E2%88%B6=1&size=143118&status=done&style=shadow&taskId=uff1064e0-3b21-496f-a613-19f3e4e2b08&width=1919" alt="image.png"></p><h3 id="1-7、分享图片"><a href="#1-7、分享图片" class="headerlink" title="1.7、分享图片"></a>1.7、分享图片</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628949594311-c6065226-03f9-4209-a4e6-cc48400af7fb.png#clientId=u2e99bad5-430a-4&from=paste&height=935&id=ue76c1d7c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=935&originWidth=1920&originalType=binary%E2%88%B6=1&size=160909&status=done&style=shadow&taskId=ue2383b26-cc3b-456d-853a-cb3102d2ab5&width=1920" alt="image.png"><br>访问图片，默认是下载，如果想要直接查看，需要后面的设置。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628949424705-081bac16-3e06-4d0c-a26b-c43b05f1ef89.png#clientId=u2e99bad5-430a-4&from=paste&height=1037&id=udaea84a8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1037&originWidth=1920&originalType=binary%E2%88%B6=1&size=85130&status=done&style=shadow&taskId=ub9af759c-2460-4186-8b9d-b18f48c04ab&width=1920" alt="image.png"></p><h2 id="2、minio-客户端"><a href="#2、minio-客户端" class="headerlink" title="2、minio 客户端"></a>2、minio 客户端</h2><h3 id="2-1、拉取镜像"><a href="#2-1、拉取镜像" class="headerlink" title="2.1、拉取镜像"></a>2.1、拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/mc</span><br></pre></td></tr></table></figure><h3 id="2-2、启动-docker-镜像"><a href="#2-2、启动-docker-镜像" class="headerlink" title="2.2、启动 docker 镜像"></a>2.2、启动 docker 镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --entrypoint=/bin/sh minio/mc</span><br></pre></td></tr></table></figure><h3 id="2-3、添加一个云存储服务"><a href="#2-3、添加一个云存储服务" class="headerlink" title="2.3、添加一个云存储服务"></a>2.3、添加一个云存储服务</h3><p>运行完成后，需要进行配置，将自己的 minio 服务配置到客户端上，配置的格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mc config host add &lt;ALIAS&gt; &lt;YOUR-S3-ENDPOINT&gt; &lt;YOUR-ACCESS-KEY&gt; &lt;YOUR-SECRET-KEY&gt; [--api API-SIGNATURE]</span><br></pre></td></tr></table></figure><p>针对自己的 minio 服务可以进行如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mc config host add minio http://120.78.177.161:9000 admin 12345678</span><br></pre></td></tr></table></figure><h3 id="2-4、常用命令"><a href="#2-4、常用命令" class="headerlink" title="2.4、常用命令"></a>2.4、常用命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>ls</td><td>列出文件和文件夹</td></tr><tr><td>mb</td><td>创建一个存储桶或一个文件夹</td></tr><tr><td>cat</td><td>显示文件和对象内容</td></tr><tr><td>pipe</td><td>将一个 STDIN 重定向到一个对象或者文件或者 STDOUT</td></tr><tr><td>share</td><td>生成用于共享的 URL</td></tr><tr><td>cp</td><td>拷贝文件和对象</td></tr><tr><td>mirror</td><td>给存储桶和文件夹做镜像</td></tr><tr><td>find</td><td>基于参数查找文件</td></tr><tr><td>diff</td><td>对两个文件夹或者存储桶比较差异</td></tr><tr><td>rm</td><td>删除文件和对象</td></tr><tr><td>events</td><td>管理对象通知</td></tr><tr><td>watch</td><td>监视文件和对象的事件</td></tr><tr><td>policy</td><td>管理访问策略</td></tr><tr><td>config</td><td>管理 mc 配置文件</td></tr><tr><td>update</td><td>检查软件更新</td></tr><tr><td>version</td><td>输出版本信息</td></tr></tbody></table><p>以下只列出部分命令的用法，详细的可以参考文档：</p><h4 id="2-4-1、ls"><a href="#2-4-1、ls" class="headerlink" title="2.4.1、ls"></a>2.4.1、ls</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看存储桶(其中minio为添加服务时的别名)</span></span><br><span class="line">mc ls minio</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看存储桶中存在的文件</span></span><br><span class="line">mc ls minio/blog</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628990455910-22216e8a-e269-414e-855d-cbf89ccfd86d.png#clientId=u1f44b90e-c608-4&from=paste&height=208&id=ucf00dd5f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=208&originWidth=759&originalType=binary%E2%88%B6=1&size=28395&status=done&style=none&taskId=uecceeb17-96ec-4ff2-8314-f890a2d1226&width=759" alt="image.png"></p><h4 id="2-4-2、mb"><a href="#2-4-2、mb" class="headerlink" title="2.4.2、mb"></a>2.4.2、mb</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个名为<span class="built_in">test</span>的存储桶</span></span><br><span class="line">mc mb minio/test</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628990499503-9329fa08-463c-4cd1-b9fe-5d1e6a4280df.png#clientId=u1f44b90e-c608-4&from=paste&height=118&id=uc30c5454&margin=%5Bobject%20Object%5D&name=image.png&originHeight=118&originWidth=761&originalType=binary%E2%88%B6=1&size=10527&status=done&style=none&taskId=u53520bef-454a-4dba-b7a4-f4ec0a655a7&width=761" alt="image.png">​</p><h4 id="2-4-3、share"><a href="#2-4-3、share" class="headerlink" title="2.4.3、share"></a>2.4.3、share</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 共享图片的下载路径</span></span><br><span class="line">mc share download minio/blog/0972023f-470a-4cf2-b388-6991f886df91.jpg</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628990600342-c5ddaef9-769d-4975-bf63-0bde75880e71.png#clientId=u1f44b90e-c608-4&from=paste&height=151&id=u00cad035&margin=%5Bobject%20Object%5D&name=image.png&originHeight=151&originWidth=761&originalType=binary%E2%88%B6=1&size=21419&status=done&style=none&taskId=u9210ee33-23b5-4f9f-90bb-943c99d1c27&width=761" alt="image.png"></p><h4 id="2-4-4、find"><a href="#2-4-4、find" class="headerlink" title="2.4.4、find"></a>2.4.4、find</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找某个存储桶中的jpg文件</span></span><br><span class="line">mc find minio/blog --name &quot;*.jpg&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628990760225-18ad0082-78f2-49a4-bd9d-a00af0a8257e.png#clientId=u1f44b90e-c608-4&from=paste&height=66&id=ubae1a288&margin=%5Bobject%20Object%5D&name=image.png&originHeight=66&originWidth=759&originalType=binary%E2%88%B6=1&size=5357&status=done&style=none&taskId=u2187e5d8-6774-4adf-8d4c-8dd2ee76e14&width=759" alt="image.png"></p><h4 id="2-4-5、policy"><a href="#2-4-5、policy" class="headerlink" title="2.4.5、policy"></a>2.4.5、policy</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 目前可以设置这四种权限：none, download, upload, public</span></span><br><span class="line">mc policy set download minio/blog</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看存储桶的权限</span></span><br><span class="line">mc policy get minio/blog</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628991343912-f740e0b0-ccbd-40fa-8b00-b589c257ae17.png#clientId=u1f44b90e-c608-4&from=paste&height=124&id=u7e8fd73f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=124&originWidth=760&originalType=binary%E2%88%B6=1&size=11319&status=done&style=none&taskId=u10a38530-d755-4c48-8eb3-af06fe141e3&width=760" alt="image.png"></p><h2 id="3、兼容-AWS-S3"><a href="#3、兼容-AWS-S3" class="headerlink" title="3、兼容 AWS S3"></a>3、兼容 AWS S3</h2><blockquote><p>当对接第三方服务要用到对象存储的时候，这些服务往往都是支持 AWS S3 的。由于 minio 兼容 AWS S3 的大多数 API，所以可以直接拿它当 AWS S3 来使用。</p></blockquote><h4 id="3-1、下载AWS-S3-客户端"><a href="#3-1、下载AWS-S3-客户端" class="headerlink" title="3.1、下载AWS S3 客户端"></a>3.1、下载<a href="https://s3browser.com/">AWS S3 客户端</a></h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628992490763-14b86399-4f5b-4272-90cc-0a941763516e.png#clientId=u1bc12cb2-fcb2-4&from=paste&height=938&id=ubf90a584&margin=%5Bobject%20Object%5D&name=image.png&originHeight=938&originWidth=1375&originalType=binary%E2%88%B6=1&size=265241&status=done&style=shadow&taskId=ua516148f-1f9b-4b3a-9cde-0e1be169cb0&width=1375" alt="image.png"></p><h4 id="3-2、安装并添加一个账号"><a href="#3-2、安装并添加一个账号" class="headerlink" title="3.2、安装并添加一个账号"></a>3.2、安装并添加一个账号</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628992661600-f626f6e1-eaeb-4fbf-a976-eeb3c6f9c983.png#clientId=u1bc12cb2-fcb2-4&from=paste&height=763&id=u1e908dce&margin=%5Bobject%20Object%5D&name=image.png&originHeight=763&originWidth=1004&originalType=binary%E2%88%B6=1&size=94565&status=done&style=shadow&taskId=uc5c60afc-d10a-4e05-bd90-0ed75143e91&width=1004" alt="image.png"><br>连接成功后，可以看到之前之前上传的存储桶和上传的图片。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628992784043-88feaf08-e238-43ae-a0e8-1228bf390abb.png#clientId=u1bc12cb2-fcb2-4&from=paste&height=762&id=u478cd27e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=762&originWidth=1010&originalType=binary%E2%88%B6=1&size=75608&status=done&style=shadow&taskId=ua7ffb161-3837-4517-a831-294c28711d5&width=1010" alt="image.png"><br>相较于 minio console，S3 Browser 还是相当强大的。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628992832923-47be8351-2d48-467d-afca-fcc46ee987b2.png#clientId=u1bc12cb2-fcb2-4&from=paste&height=762&id=u48cccc9b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=762&originWidth=1010&originalType=binary%E2%88%B6=1&size=105495&status=done&style=shadow&taskId=u7a6f1fd3-aa90-4a3d-b0e3-e9cf43f8ad7&width=1010" alt="image.png"></p><h4 id="3-3、解决上面提到的图片直接下载而无法查看的问题"><a href="#3-3、解决上面提到的图片直接下载而无法查看的问题" class="headerlink" title="3.3、解决上面提到的图片直接下载而无法查看的问题"></a>3.3、解决上面提到的图片直接下载而无法查看的问题</h4><p>图片无法直接查看，其实是因为访问图片时，minio 返回的 Content-Type 为 <code>application/octet-stream</code> 导致的。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628993223018-a39d662c-ed55-4cea-a864-b9906603f731.png#clientId=u1bc12cb2-fcb2-4&from=paste&height=762&id=u84dc7a1a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=762&originWidth=1010&originalType=binary%E2%88%B6=1&size=81631&status=done&style=shadow&taskId=u50ba34c0-a7b9-4dd3-8196-5bffa31e6e1&width=1010" alt="image.png"><br>所以接下来可以通过 <code>S3 Browser</code> 来修改默认返回的响应头。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628993302019-6884df4f-3f33-4ba7-8cb1-34f90f3f2725.png#clientId=u1bc12cb2-fcb2-4&from=paste&height=762&id=u89f588fc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=762&originWidth=1010&originalType=binary%E2%88%B6=1&size=101828&status=done&style=shadow&taskId=u095985ed-200a-4c62-9f89-7796f267cc9&width=1010" alt="image.png"><br>将所有的 jpg 文件的响应头改成 <code>image/png</code> 即可。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628993427393-552db4b7-531f-4af0-b657-1223e7d116bf.png#clientId=u1bc12cb2-fcb2-4&from=paste&height=608&id=ue3a88b72&margin=%5Bobject%20Object%5D&name=image.png&originHeight=608&originWidth=688&originalType=binary%E2%88%B6=1&size=42518&status=done&style=shadow&taskId=u88283b72-1e7c-4eae-a932-174d7cd7cfe&width=688" alt="image.png"><br>以前的文件需要重新上传才能生效，可以试一下新上传的文件有没有生效就行，此时访问链接应该是可以直接查看图片了。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628993879274-a8e69e9a-da3e-4fab-83f3-25208eb736ed.png#clientId=u1bc12cb2-fcb2-4&from=paste&height=762&id=u6924940e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=762&originWidth=1010&originalType=binary%E2%88%B6=1&size=91699&status=done&style=shadow&taskId=u29f61b39-bc2f-4cc8-b5d9-01ea63a4e56&width=1010" alt="image.png"></p><h4 id="3-4、修改-bucket-权限"><a href="#3-4、修改-bucket-权限" class="headerlink" title="3.4、修改 bucket 权限"></a>3.4、修改 bucket 权限</h4><p>如果像修改存储桶的访问权限的话可以直接通过 <code>Permissions</code> 标签修改即可。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1628995705127-839420c7-e721-425b-89c9-75352dc4f34e.png#clientId=u1bc12cb2-fcb2-4&from=paste&height=762&id=u8c9a4e7d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=762&originWidth=1010&originalType=binary%E2%88%B6=1&size=84590&status=done&style=shadow&taskId=u9d9854df-001b-47de-bf3b-2d3e4e0e6d5&width=1010" alt="image.png"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/qq_15273441/article/details/100094667">https://blog.csdn.net/qq_15273441/article/details/100094667</a><br><a href="https://blog.csdn.net/weixin_45730091/article/details/106780517">https://blog.csdn.net/weixin_45730091/article/details/106780517</a><br><a href="https://docs.min.io/docs/java-client-api-reference.html">https://docs.min.io/docs/java-client-api-reference.html</a>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库思维导图(MySQL)</title>
      <link href="/2021/08/13/yuque/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE(MySQL)/"/>
      <url>/2021/08/13/yuque/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE(MySQL)/</url>
      
        <content type="html"><![CDATA[<p>{“format”:”lakeboard”,”type”:”Board”,”version”:”1.0”,”diagramData”:{“head”:{“version”:”2.0.0”},”body”:[{“id”:”75ecf20b-1664-4787-98c2-1c037f21b3bd”,”x”:-131,”y”:368,”html”:”&lt;span style=&quot;color:rgb(38, 38, 38);&quot;&gt;MySQL</span>“,”border”:{“fill”:”#FBD3D0”,”shape”:”capsule”},”type”:”mindmap”,”children”:[{“layout”:{“quadrant”:1},”treeEdge”:{“stroke”:”#A287E1”},”id”:”f66eef84-dcd0-48da-a29a-1b52126f3168”,”children”:[{“id”:”a1bb48cd-0f79-46a7-b910-5c4309309fa9”,”children”:[],”zIndex”:2,”html”:”数据库管理系统(DBMS)”,”border”:{“shape”:”capsule”}},{“html”:”数据库(DB)”,”id”:”1a8664ea-f8e3-4200-a5d7-64e15d72d0af”,”children”:[],”zIndex”:3,”border”:{“shape”:”capsule”}},{“html”:”SQL(结构化查询语句)”,”border”:{“shape”:”capsule”},”id”:”ca158464-cb83-4880-9f7d-039a761d95b6”,”children”:[],”zIndex”:1}],”zIndex”:4,”html”:”数据库概述”,”border”:{“shape”:”capsule”}},{“html”:”​”,”layout”:{“quadrant”:1},”treeEdge”:{“stroke”:”#6F81DB”},”id”:”ebac239e-462b-406f-aef7-b266f3e5f077”,”children”:[],”zIndex”:0,”border”:{“shape”:”capsule”}}],”zIndex”:5}]},”viewportSetting”:{“zoom”:1,”tlCanvasPoint”:[-583,0,1],”width”:1920,”height”:1023},”text”:”MySQL 数据库概述数据库管理系统(DBMS)数据库(DB)SQL(结构化查询语句)​”}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2021/08/13/yuque/MySQL/"/>
      <url>/2021/08/13/yuque/MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="1、数据库概述"><a href="#1、数据库概述" class="headerlink" title="1、数据库概述"></a>1、数据库概述</h2><h3 id="1-1、数据库管理系统-DBMS"><a href="#1-1、数据库管理系统-DBMS" class="headerlink" title="1.1、数据库管理系统(DBMS)"></a>1.1、数据库管理系统(DBMS)</h3><p>数据库管理系统，英文单词 DatabaseManagement，简称 DBMS。<strong>数据库管理系统是专门用来管理数据库中数据的，数据库管理系统可以对数据库当中的数据进行增删改查</strong>。<br>常见的数据库管理系统：<strong>MySQL</strong>、<strong>Oracle</strong>、DB2、SqlServer…</p><h3 id="1-2、数据库-DB"><a href="#1-2、数据库-DB" class="headerlink" title="1.2、数据库(DB)"></a>1.2、数据库(DB)</h3><p>数据库，英文单词 database，简称 DB。<strong>按照一定的格式存储数据的一些文件的组合</strong>。顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了具有特定格式的数据。</p><h3 id="1-3、SQL-结构化查询语言"><a href="#1-3、SQL-结构化查询语言" class="headerlink" title="1.3、SQL(结构化查询语言)"></a>1.3、SQL(结构化查询语言)</h3><p>SQL，全称(Structured Query Language)，<strong>SQL 用来和数据库打交道，完成和数据库的通信，SQL 是一套标准</strong>。但是每一个数据库都有自己的特性是别的数据库没有，当使用这个数据库特性功能时，这时 SQL 语句可能就不是标准了(90%以上的 SQL 都是通用的)。</p><h2 id="2、MySQL-安装与卸载"><a href="#2、MySQL-安装与卸载" class="headerlink" title="2、MySQL 安装与卸载"></a>2、MySQL 安装与卸载</h2><p>​</p><p>​</p><p>​</p><h3 id="​"><a href="#​" class="headerlink" title="​"></a>​</h3><p>​</p><h3 id="​-1"><a href="#​-1" class="headerlink" title="​"></a>​</h3><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端</title>
      <link href="/2021/07/12/yuque/%E5%90%8E%E7%AB%AF/"/>
      <url>/2021/07/12/yuque/%E5%90%8E%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>注解</title>
      <link href="/2021/07/01/yuque/%E6%B3%A8%E8%A7%A3/"/>
      <url>/2021/07/01/yuque/%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>注解时 JDK1.5 版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它主要的作用有以下四方面：</p><ul><li>生成文档，通过代码里标识的元数据生成 javadoc 文档。</li><li>编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。</li><li>编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。</li><li>运动时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入案例。</li></ul><p>注解的常见分类：</p><ul><li><strong>Java 内置注解注解，</strong>包括<code>@Override</code>、<code>@Deprecated</code>、<code>@SupperssWarnings</code>，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。</li><li><strong>元注解</strong>，元注解用于定义注解的注解，包括<code>@Retention</code>、<code>@Target</code>、<code>@Inherited</code>、<code>@Documented</code>，分别用于标明注解被保留的阶段、标明注解使用的范围、标明注解可以继承、标明是否生成 javadoc 文档。</li><li><strong>自定义注解</strong>，可以根据自己的需求定义注解，并可以用元注解对自定义注解进行注解。</li></ul><h2 id="1、Java-内置注解"><a href="#1、Java-内置注解" class="headerlink" title="1、Java 内置注解"></a>1、Java 内置注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 重载父类的test方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 被弃用的方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">oldMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 忽略告警</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">processList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK1.5 开始自带的标准注解，包括<code>@Override</code>、<code>@Deprecated</code>、<code>@SuppressWarnings</code>：</p><h3 id="1、-Override"><a href="#1、-Override" class="headerlink" title="1、@Override"></a>1、@Override</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从定义可以看出，这个注解可以被用来修饰方法，并且它只在编译时有效，在编译后的 class 文件中便不再存在。这个注解的作用就是告诉编译器被修饰的方法是重写父类中签名相同的方法，编译器会对此做出检查，若发现父类中不存在这个方法或是存在的方法签名不同，则会报错。</p><h3 id="2、-Deprecated"><a href="#2、-Deprecated" class="headerlink" title="2、@Deprecated"></a>2、@Deprecated</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从定义可以看出，它会被文档化，能够保留到运行时，能够修饰构造方法、属性、局部变量、方法、包、参数、类型。这个注解的作用是告诉编译器被修饰的程序元素已被”废弃”，不再建议用户使用。</p><h3 id="3、-SupressWarnings"><a href="#3、-SupressWarnings" class="headerlink" title="3、@SupressWarnings"></a>3、@SupressWarnings</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它能够修饰的程序元素包括类型、属性、方法、参数、构造器、局部变量，只能存活在源码时，取值为 String[]。它的作用是告诉编译器忽略指定的警告信息，它可以取的值如下所示：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>all</td><td>抑制所有警告</td></tr><tr><td>boxing</td><td>抑制装箱、拆箱操作时候的警告</td></tr><tr><td>cast</td><td>抑制映射相关的警告</td></tr><tr><td>dep-ann</td><td>抑制启用注释的警告</td></tr><tr><td>deprecation</td><td>抑制过期方法警告</td></tr><tr><td>fallthrough</td><td>抑制确在 switch 中缺失 breaks 的警告</td></tr><tr><td>finally</td><td>抑制 finally 模块没有返回的警告</td></tr><tr><td>hiding</td><td>抑制与隐藏变数的区域变数相关的警告</td></tr><tr><td>incomplete-switch</td><td>忽略没有完整的 switch 语句</td></tr><tr><td>nls</td><td>忽略非 nls 格式的字符</td></tr><tr><td>null</td><td>忽略对 null 的操作</td></tr><tr><td>rawtype</td><td>使用 generics 时忽略没有指定相应的类型，抑制泛型警告</td></tr><tr><td>restriction</td><td>抑制与使用不建议或禁止参照相关的警告</td></tr><tr><td>serial</td><td>忽略在 serializable 类中没有声明 serialVersionUID 变量</td></tr><tr><td>static-access</td><td>抑制不正确的静态访问方式警告</td></tr><tr><td>synthetic-access</td><td>抑制子类没有按最优方法访问内部类的警告</td></tr><tr><td>unchecked</td><td>抑制没有进行类型检查操作的警告</td></tr><tr><td>unqualified-field-access</td><td>抑制没有权限访问的域的警告</td></tr><tr><td>unused</td><td>抑制没被使用过的代码的警告</td></tr></tbody></table><h2 id="2、元注解"><a href="#2、元注解" class="headerlink" title="2、元注解"></a>2、元注解</h2><p>上述的内置注解的定义中使用了一些元注解（用于定义注解的注解），在 JDK1.5 中提供了 4 个标准的元注解：<code>@Target</code>、<code>@Retention</code>、<code>@Documented</code>、<code>@Inherited</code>，在 JDK1.8 中提供了两个元注解<code>@Repeatable</code>和<code>@Native</code>。</p><h3 id="1、-Target"><a href="#1、-Target" class="headerlink" title="1、@Target"></a>1、@Target</h3><blockquote><p>Target 注解的作用是：描述注解的使用范围(即：被修饰的注解可以用在什么地方)</p></blockquote><p>Target 注解用来说明那些被它所注解的注解类可修饰的对象范围：注解可以用于修饰 packages、types(类、接口、枚举、注解类)、类成员(方法、构造方法、成员变量、枚举值)、方法参数和本地变量(如循环变量、catch 参数)，在定义注解类时使用了 @Target 能够更加清晰的知道它能够被用来修饰哪些对象，它的取值范围定义在 ElementType 枚举中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ElementType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TYPE, <span class="comment">// 类、接口、枚举类</span></span><br><span class="line"></span><br><span class="line">    FIELD, <span class="comment">// 成员变量（包括：枚举常量）</span></span><br><span class="line"></span><br><span class="line">    METHOD, <span class="comment">// 成员方法</span></span><br><span class="line"></span><br><span class="line">    PARAMETER, <span class="comment">// 方法参数</span></span><br><span class="line"></span><br><span class="line">    CONSTRUCTOR, <span class="comment">// 构造方法</span></span><br><span class="line"></span><br><span class="line">    LOCAL_VARIABLE, <span class="comment">// 局部变量</span></span><br><span class="line"></span><br><span class="line">    ANNOTATION_TYPE, <span class="comment">// 注解类</span></span><br><span class="line"></span><br><span class="line">    PACKAGE, <span class="comment">// 可用于修饰：包</span></span><br><span class="line"></span><br><span class="line">    TYPE_PARAMETER, <span class="comment">// 类型参数，JDK 1.8 新增</span></span><br><span class="line"></span><br><span class="line">    TYPE_USE <span class="comment">// 使用类型的任何地方，JDK 1.8 新增</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、-Retention"><a href="#2、-Retention" class="headerlink" title="2、@Retention"></a>2、@Retention</h3><blockquote><p>Retention 注解的作用是：描述注解保留的时间范围(即：被描述的注解在它所修饰的类中可以被保留到何时)</p></blockquote><p>Retention 注解用来限定那些被它所注解的注解类在注解到其他类上以后，可被保留到何时，一共有三种策略，定义在 RetentionPolicy 枚举中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RetentionPolicy</span> </span>&#123;</span><br><span class="line">    SOURCE,    <span class="comment">// 源文件保留</span></span><br><span class="line">    CLASS,       <span class="comment">// 编译期保留，默认值</span></span><br><span class="line">    RUNTIME   <span class="comment">// 运行期保留，可通过反射去获取注解信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、-Documented"><a href="#3、-Documented" class="headerlink" title="3、@Documented"></a>3、@Documented</h3><blockquote><p>Documented 注解的作用是：描述在使用 javadoc 工具为类生成帮助文档的时候是否要保留其注解信息</p></blockquote><h3 id="4、-Inherited"><a href="#4、-Inherited" class="headerlink" title="4、@Inherited"></a>4、@Inherited</h3><blockquote><p>Inherited 注解的作用是：被它修饰的 Annotation 将具有继承性。如果某个类使用了被 @Inherited 修饰的 Annotation，则其子类将自动具有该注解</p></blockquote><h2 id="3、注解与反射接口"><a href="#3、注解与反射接口" class="headerlink" title="3、注解与反射接口"></a>3、注解与反射接口</h2><blockquote><p>定义注解之后，如果获取注解中的内容呢？反射包 <code>java.lang.reflect</code> 下的 AnnotatedElement 接口提供这些方法。这里注意：只有注解被定义为 runtime 后，该注解才能是运行时可见，当 class 文件被装载时被保存在 class 文件中的 annotation 才会被虚拟机读取</p></blockquote><p>AnnotatedElement 接口是所有程序元素(Class、Method 和 Constructor)的父接口，所以程序通过反射获取了某个类的 AnnotatedElement 对象之后，程序就可以调用该对象的方法来访问 Annotation 信息。</p><ul><li><code>boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</code></li></ul><p>判断该程序元素上是否包含指定类型的注解，存在则返回 true，否则返回 false。注意：此方法会忽略注解对应的注解容器</p><ul><li><code>&lt;T extends Annotation&gt; T getAnnotation(Class&lt;T&gt; annotationClass)</code></li></ul><p>返回该程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回 null</p><ul><li><code>Annotation[] getAnnotations()</code></li></ul><p>返回该程序元素上存在的所有注解，若没有注解，返回长度为 0 的数组</p><ul><li><code>&lt;T extends Annotation&gt; T[] getAnnotationsByType(Class&lt;T&gt; anotationClass)</code></li></ul><p>返回该程序元素上存在的、指定类型的注解数组。没有注解对应类型的注解时，返回长度为 0 的数组。该方法的调用者可以随意修改返回的数组，而不会对其他调用者返回的数组产生任何影响。<code>getAnnotationsByType</code>方法与<code>getAnnotation</code>的区别在于，<code>getAnnotationsByType</code>会检测注解对应的重复注解容器。若程序元素为类，当前类上找不到注解，且该注解为可继承的，则会去父类上检测对应的注解。</p><ul><li><code>&lt;T extends Annotation&gt; getDeclaredAnnotation(Class&lt;T&gt; annotationClass)</code></li></ul><p>返回直接存在于此元素上的所有注解。与此接口中的其他方法不同，该方法将忽略继承的注解。如果没有注解直接存在于此元素上，则返回 null</p><ul><li><code>&lt;T extends Annotation&gt; T[] getDeclaredAnnotationsByType(Class&lt;T&gt; annotationClass)</code></li></ul><p>返回直接存在于此元素上的所有注解。于此接口中的其他方法不同，将方法将忽略继承的注释</p><ul><li><code>Annotation[] getDeclaredAnnotations()</code></li></ul><p>返回直接存在于此元素上的所有注解以及注解对应的重复注解容器。于此接口中的其他方法不同，该方法将忽略继承的注解。如果没有注解直接存在于此元素上，则返回长度为 0 的数组。该方法的调用者可以随意修改返回的数组，而不会对其他调用者返回的数组产生任何影响。</p><h2 id="4、自定义注解"><a href="#4、自定义注解" class="headerlink" title="4、自定义注解"></a>4、自定义注解</h2><ul><li>定义自己的注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyMethodAnnotation &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">title</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMethodAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@MyMethodAnnotation(title = &quot;toStringMethod&quot;, description = &quot;override toString method&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Override toString method&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@MyMethodAnnotation(title = &quot;old static method&quot;, description = &quot;deprecated old static method&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">oldMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;old method, don&#x27;t use it.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;deprecation&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@MyMethodAnnotation(title = &quot;test method&quot;, description = &quot;suppress warning static method&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">genericsTest</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        List l = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        l.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        oldMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用反射接口获取注解信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取所有methods</span></span><br><span class="line">        Method[] methods = TestMethodAnnotation.class.getClassLoader()</span><br><span class="line">                .loadClass((<span class="string">&quot;com.pdai.java.annotation.TestMethodAnnotation&quot;</span>))</span><br><span class="line">                .getMethods();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="comment">// 方法上是否有MyMethodAnnotation注解</span></span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(MyMethodAnnotation.class)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 获取并遍历方法上的所有注解</span></span><br><span class="line">                    <span class="keyword">for</span> (Annotation anno : method.getDeclaredAnnotations()) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;Annotation in Method &#x27;&quot;</span></span><br><span class="line">                                + method + <span class="string">&quot;&#x27; : &quot;</span> + anno);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获取MyMethodAnnotation对象信息</span></span><br><span class="line">                    MyMethodAnnotation methodAnno = method</span><br><span class="line">                            .getAnnotation(MyMethodAnnotation.class);</span><br><span class="line"></span><br><span class="line">                    System.out.println(methodAnno.title());</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException | ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试的输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Annotation in Method <span class="string">&#x27;public static void com.pdai.java.annotation.TestMethodAnnotation.oldMethod()&#x27;</span> : <span class="meta">@java</span>.lang.Deprecated()</span><br><span class="line">Annotation in Method <span class="string">&#x27;public static void com.pdai.java.annotation.TestMethodAnnotation.oldMethod()&#x27;</span> : <span class="meta">@com</span>.pdai.java.annotation.MyMethodAnnotation(title=old <span class="keyword">static</span> method, description=deprecated old <span class="keyword">static</span> method)</span><br><span class="line">old <span class="keyword">static</span> method</span><br><span class="line">Annotation in Method <span class="string">&#x27;public static void com.pdai.java.annotation.TestMethodAnnotation.genericsTest() throws java.io.FileNotFoundException&#x27;</span> : <span class="meta">@com</span>.pdai.java.annotation.MyMethodAnnotation(title=test method, description=suppress warning <span class="keyword">static</span> method)</span><br><span class="line">test method</span><br><span class="line">Annotation in Method <span class="string">&#x27;public java.lang.String com.pdai.java.annotation.TestMethodAnnotation.toString()&#x27;</span> : <span class="meta">@com</span>.pdai.java.annotation.MyMethodAnnotation(title=toStringMethod, description=override toString method)</span><br><span class="line">toStringMethod</span><br></pre></td></tr></table></figure><h2 id="5、自定义注解和-AOP-通过切面实现解耦"><a href="#5、自定义注解和-AOP-通过切面实现解耦" class="headerlink" title="5、自定义注解和 AOP-通过切面实现解耦"></a>5、自定义注解和 AOP-通过切面实现解耦</h2><blockquote><p>最为常见的就是使用 Spring AOP 切面实现<strong>统一的操作日志管理</strong>，下面是一个开源项目中的例子(只展示主要代码)，展示下如何通过注解实现解耦的</p></blockquote><ul><li>自定义 Log 注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.PARAMETER, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">title</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BusinessType <span class="title">businessType</span><span class="params">()</span> <span class="keyword">default</span> BusinessType.OTHER</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作人类别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OperatorType <span class="title">operatorType</span><span class="params">()</span> <span class="keyword">default</span> OperatorType.MANAGE</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否保存请求的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSaveRequestData</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现日志的切面，对自定义注解 Log 作切点进行拦截，即对注解了@Log 的方法进行切点拦截</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置织入点 - 自定义注解的包路径</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.xxx.aspectj.lang.annotation.Log)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理完请求后执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;logPointCut()&quot;, returning = &quot;jsonResult&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(JoinPoint joinPoint, Object jsonResult)</span> </span>&#123;</span><br><span class="line">        handleLog(joinPoint, <span class="keyword">null</span>, jsonResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截异常操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;logPointCut()&quot;, throwing = &quot;e&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterThrowing</span><span class="params">(JoinPoint joinPoint, Exception e)</span> </span>&#123;</span><br><span class="line">        handleLog(joinPoint, e, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleLog</span><span class="params">(<span class="keyword">final</span> JoinPoint joinPoint, <span class="keyword">final</span> Exception e, Object jsonResult)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获得注解</span></span><br><span class="line">            Log controllerLog = getAnnotationLog(joinPoint);</span><br><span class="line">            <span class="keyword">if</span> (controllerLog == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取当前的用户</span></span><br><span class="line">            User currentUser = ShiroUtils.getSysUser();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// *========数据库日志=========*//</span></span><br><span class="line">            OperLog operLog = <span class="keyword">new</span> OperLog();</span><br><span class="line">            operLog.setStatus(BusinessStatus.SUCCESS.ordinal());</span><br><span class="line">            <span class="comment">// 请求的地址</span></span><br><span class="line">            String ip = ShiroUtils.getIp();</span><br><span class="line">            operLog.setOperIp(ip);</span><br><span class="line">            <span class="comment">// 返回参数</span></span><br><span class="line">            operLog.setJsonResult(JSONObject.toJSONString(jsonResult));</span><br><span class="line"></span><br><span class="line">            operLog.setOperUrl(ServletUtils.getRequest().getRequestURI());</span><br><span class="line">            <span class="keyword">if</span> (currentUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">                operLog.setOperName(currentUser.getLoginName());</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotNull(currentUser.getDept())</span><br><span class="line">                        &amp;&amp; StringUtils.isNotEmpty(currentUser.getDept().getDeptName())) &#123;</span><br><span class="line">                    operLog.setDeptName(currentUser.getDept().getDeptName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                operLog.setStatus(BusinessStatus.FAIL.ordinal());</span><br><span class="line">                operLog.setErrorMsg(StringUtils.substring(e.getMessage(), <span class="number">0</span>, <span class="number">2000</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置方法名称</span></span><br><span class="line">            String className = joinPoint.getTarget().getClass().getName();</span><br><span class="line">            String methodName = joinPoint.getSignature().getName();</span><br><span class="line">            operLog.setMethod(className + <span class="string">&quot;.&quot;</span> + methodName + <span class="string">&quot;()&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置请求方式</span></span><br><span class="line">            operLog.setRequestMethod(ServletUtils.getRequest().getMethod());</span><br><span class="line">            <span class="comment">// 处理设置注解上的参数</span></span><br><span class="line">            getControllerMethodDescription(controllerLog, operLog);</span><br><span class="line">            <span class="comment">// 保存数据库</span></span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordOper(operLog));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exp) &#123;</span><br><span class="line">            <span class="comment">// 记录本地异常日志</span></span><br><span class="line">            log.error(<span class="string">&quot;==前置通知异常==&quot;</span>);</span><br><span class="line">            log.error(<span class="string">&quot;异常信息:&#123;&#125;&quot;</span>, exp.getMessage());</span><br><span class="line">            exp.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取注解中对方法的描述信息 用于Controller层注解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> log 日志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operLog 操作日志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getControllerMethodDescription</span><span class="params">(Log log, OperLog operLog)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 设置action动作</span></span><br><span class="line">        operLog.setBusinessType(log.businessType().ordinal());</span><br><span class="line">        <span class="comment">// 设置标题</span></span><br><span class="line">        operLog.setTitle(log.title());</span><br><span class="line">        <span class="comment">// 设置操作人类别</span></span><br><span class="line">        operLog.setOperatorType(log.operatorType().ordinal());</span><br><span class="line">        <span class="comment">// 是否需要保存request，参数和值</span></span><br><span class="line">        <span class="keyword">if</span> (log.isSaveRequestData()) &#123;</span><br><span class="line">            <span class="comment">// 获取参数的信息，传入到数据库中。</span></span><br><span class="line">            setRequestValue(operLog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求的参数，放到log中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operLog</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRequestValue</span><span class="params">(OperLog operLog)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String[]&gt; map = ServletUtils.getRequest().getParameterMap();</span><br><span class="line">        String params = JSONObject.toJSONString(map);</span><br><span class="line">        operLog.setOperParam(StringUtils.substring(params, <span class="number">0</span>, <span class="number">2000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否存在注解，如果存在就获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Log <span class="title">getAnnotationLog</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) signature;</span><br><span class="line">        Method method = methodSignature.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> method.getAnnotation(Log.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用@Log 注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/system/dept&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">&quot;system/dept&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IDeptService deptService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增保存部门</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Log(title = &quot;部门管理&quot;, businessType = BusinessType.INSERT)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;system:dept:add&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">addSave</span><span class="params">(<span class="meta">@Validated</span> Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (UserConstants.DEPT_NAME_NOT_UNIQUE.equals(deptService.checkDeptNameUnique(dept))) &#123;</span><br><span class="line">            <span class="keyword">return</span> error(<span class="string">&quot;新增部门&#x27;&quot;</span> + dept.getDeptName() + <span class="string">&quot;&#x27;失败，部门名称已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> toAjax(deptService.insertDept(dept));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Log(title = &quot;部门管理&quot;, businessType = BusinessType.UPDATE)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;system:dept:edit&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/edit&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">editSave</span><span class="params">(<span class="meta">@Validated</span> Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (UserConstants.DEPT_NAME_NOT_UNIQUE.equals(deptService.checkDeptNameUnique(dept))) &#123;</span><br><span class="line">            <span class="keyword">return</span> error(<span class="string">&quot;修改部门&#x27;&quot;</span> + dept.getDeptName() + <span class="string">&quot;&#x27;失败，部门名称已存在&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dept.getParentId().equals(dept.getDeptId())) &#123;</span><br><span class="line">            <span class="keyword">return</span> error(<span class="string">&quot;修改部门&#x27;&quot;</span> + dept.getDeptName() + <span class="string">&quot;&#x27;失败，上级部门不能是自己&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> toAjax(deptService.updateDept(dept));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Log(title = &quot;部门管理&quot;, businessType = BusinessType.DELETE)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;system:dept:remove&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/remove/&#123;deptId&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">remove</span><span class="params">(<span class="meta">@PathVariable(&quot;deptId&quot;)</span> Long deptId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (deptService.selectDeptCount(deptId) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> AjaxResult.warn(<span class="string">&quot;存在下级部门,不允许删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (deptService.checkDeptExistUser(deptId)) &#123;</span><br><span class="line">            <span class="keyword">return</span> AjaxResult.warn(<span class="string">&quot;部门存在用户,不允许删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> toAjax(deptService.deleteDeptById(deptId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同样的，你也可以看到权限管理也是通过类似的注解(<code>@RequirePermissions</code>)机制来实现的。所以可以看到，通过注解+AOP 最终的目标是为了实现模块的解耦。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2021/06/22/yuque/%E5%8F%8D%E5%B0%84/"/>
      <url>/2021/06/22/yuque/%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="1、反射机制"><a href="#1、反射机制" class="headerlink" title="1、反射机制"></a>1、反射机制</h2><h3 id="1、Java-Reflection"><a href="#1、Java-Reflection" class="headerlink" title="1、Java Reflection"></a>1、Java Reflection</h3><ol><li>反射被视为<strong>动态语言</strong>的关键，反射机制允许程序在执行期间借助于<strong>Reflection API</strong>取得任何类的内部信息(比如：成员变量，构造器，成员方法)，并能直接操作任意对象的内部属性及方法。</li><li>加载完类之后，在堆内存中就产生了一个<strong>Class</strong>类型的对象(<strong>一个类只有一个 Class 对象)<strong>，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：</strong>反射</strong>。</li></ol><h3 id="2、反射机制原理图"><a href="#2、反射机制原理图" class="headerlink" title="2、反射机制原理图"></a>2、反射机制原理图</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1625997427544-57cc039d-b5cd-4aae-9f66-aa0fcc2c4deb.png#align=left&display=inline&height=314&margin=%5Bobject%20Object%5D&originHeight=314&originWidth=694&size=0&status=done&style=none&width=694"></p><h3 id="3、Java-反射机制提供的功能："><a href="#3、Java-反射机制提供的功能：" class="headerlink" title="3、Java 反射机制提供的功能："></a>3、Java 反射机制提供的功能：</h3><ol><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ol><h3 id="4、反射相关的主要类"><a href="#4、反射相关的主要类" class="headerlink" title="4、反射相关的主要类"></a>4、反射相关的主要类</h3><ol><li><strong>java.lang.Class</strong>：代表一个类，<strong>Class</strong>对象表示某个类加载后在堆内存中的对象</li><li><strong>java.lang.reflect.Method</strong>：代表类的方法，<strong>Method</strong>对象表示某个类的方法</li><li><strong>java.lang.reflect.Field</strong>：代表类的成员变量，<strong>Field</strong>对象表示某个类的成员变量</li><li><strong>java.lang.reflect.Constructor：</strong>代表类的构造方法，<strong>Constructor</strong>对象表示构造器</li></ol><h3 id="5、反射优点和缺点"><a href="#5、反射优点和缺点" class="headerlink" title="5、反射优点和缺点"></a>5、反射优点和缺点</h3><ul><li>优点：可以动态的创建和使用对象（就是框架底层核心），使用灵活，没有反射机制，框架技术就失去底层支撑</li><li>缺点：使用反射基本是解释执行，对执行速度有影响</li></ul><h3 id="6、反射调用优化-关闭访问检查"><a href="#6、反射调用优化-关闭访问检查" class="headerlink" title="6、反射调用优化-关闭访问检查"></a>6、反射调用优化-关闭访问检查</h3><ol><li><strong>Method、Field、Constructor</strong>对象都有<code>setAccessible()</code>方法</li><li><code>setAccessible()</code>作用是启动和禁用访问安全检查开关</li><li>参数为<strong>true</strong>表示：反射的对象在使用时取消访问检查，提高反射的效率；参数为<strong>false</strong>表示：反射的对象执行访问检查</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1625998145507-92f6dc52-787e-4f6e-848d-5aaf13a5cab4.png#align=left&display=inline&height=224&margin=%5Bobject%20Object%5D&originHeight=224&originWidth=319&size=0&status=done&style=none&width=319"></p><h2 id="2、理解-Class-类并获取-Class-实例"><a href="#2、理解-Class-类并获取-Class-实例" class="headerlink" title="2、理解 Class 类并获取 Class 实例"></a>2、理解 Class 类并获取 Class 实例</h2><h3 id="1、Class-类"><a href="#1、Class-类" class="headerlink" title="1、Class 类"></a>1、Class 类</h3><p>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，<strong>JRE</strong>都为其保留一个不变的<strong>Class</strong>类型的对象。一个<strong>Class</strong>对象包含了某个特定结构(<strong>class/inteface/enum.annotation/primitive type/void/[]</strong>)<strong>的</strong>有关信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">GenericDeclaration</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">Type</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">AnnotatedElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ANNOTATION= <span class="number">0x00002000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ENUM      = <span class="number">0x00004000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SYNTHETIC = <span class="number">0x00001000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        registerNatives();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Private constructor. Only the Java Virtual Machine creates Class objects.   //私有构造器，只有JVM才能调用创建Class对象</span></span><br><span class="line"><span class="comment">     * This constructor is not used and prevents the default constructor being</span></span><br><span class="line"><span class="comment">     * generated.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Class</span><span class="params">(ClassLoader loader)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Initialize final field for classLoader.  The initialization value of non-null</span></span><br><span class="line">        <span class="comment">// prevents future JIT optimizations from assuming this final field is null.</span></span><br><span class="line">        classLoader = loader;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Class</strong>本身也是一个类，因此也继承<strong>Object</strong>类</li><li><strong>Class</strong>类只存在私有构造函数，因此<strong>Class</strong>对象只能由 JVM 创建和加载</li><li>对于某个类的<strong>Class</strong>对象，在内存只有一份，因为类只加载一次</li><li>每个类的实例都会记得自己是由哪个<strong>Class</strong>实例所生成</li><li>通过<strong>Class</strong>可以完整地得到一个类中地所有被加载的结构</li><li><strong>Class</strong>对象存放在堆内存中</li><li>类的字节码二进制数据存放在方法区中，有的地方成为类的元数据(包括：方法，变量名，方法名，访问权限等)</li><li><strong>Class</strong>类是<strong>Reflection</strong>的根源，针对任何你想动态加载、运行的类，唯有先获得相应的<strong>Class</strong>对象</li></ul><h3 id="2、常用方法"><a href="#2、常用方法" class="headerlink" title="2、常用方法"></a>2、常用方法</h3><p>| <strong>方法名</strong>                                         | <strong>功能说明</strong>                                       |<br>| ————————————————– | ————————————————– | —- | —— | ——– | ——— |<br>| static Class forName(String name)                  | 返回执指定类名的 Class 对象                        |<br>| Object newInstance()                               | 调用缺省构造函数，返回该 Class 对象的一个实例      |<br>| getName()                                          | 返回此 Class 对象所表示的实体(类                   | 接口 | 数组类 | 基本类型 | void)名称 |<br>| Class[] getInterfaces()                            | 获取当前 Class 对象的接口                          |<br>| ClassLoder getClassLoder()                         | 返回该类的类加载器                                 |<br>| Class getSuperClass()                              | 返回表示此 Class 所表示的实体的超类的 Class        |<br>| Constructor[] getConstructors()                    | 返回一个包含某些 Constructor 对象的数组            |<br>| Field[] getDeclaredFields()                        | 返回 Field 对象的一个数组                          |<br>| Method getMethod(String name, Class… paramTypes) | 返回一个 Method 对象，此对象的形参类型为 paramType |</p><h3 id="3、哪些类型有-Class-对象"><a href="#3、哪些类型有-Class-对象" class="headerlink" title="3、哪些类型有 Class 对象"></a>3、哪些类型有 Class 对象</h3><ol><li>外部类、成员内部类、静态内部类、局部内部类、匿名内部类</li><li>接口</li><li>数组</li><li>枚举</li><li>注解</li><li>基本数据类型</li><li>void</li></ol><h3 id="4、获取-Class-类的实例"><a href="#4、获取-Class-类的实例" class="headerlink" title="4、获取 Class 类的实例"></a>4、获取 Class 类的实例</h3><ol><li>** 前提**：若已知具体的类，通过类的 class 属性获取，该方法最为安全可靠，程序性能最高</li></ol><p><strong>实例</strong>：<code>Class clazz = String.class</code></p><ol start="2"><li>** 前提<strong>：已知某个类的实例，调用该实例的 getClass()方法获取</strong>Class**对象</li></ol><p><strong>实例</strong>：<code>Class clazz = &quot;abc&quot;.getClass()</code></p><ol start="3"><li>** 前提：<strong>已知一个类的全类名，且该类在类路径下，可通过</strong>Class<strong>类的静态方法</strong>forName()**获取，可能抛出 ClassNotFoundException</li></ol><p><strong>实例</strong>：<code>Class clazz = Class.forName(&quot;java.lang.String&quot;)</code></p><h2 id="3、类加载"><a href="#3、类加载" class="headerlink" title="3、类加载"></a>3、类加载</h2><h3 id="1、基本说明"><a href="#1、基本说明" class="headerlink" title="1、基本说明"></a>1、基本说明</h3><p>反射机制时 Java 实现动态语言的关键，也就是通过反射实现类的动态加载。</p><ol><li>静态加载：<strong>编译</strong>时加载相关类，如果没有则报错，依赖性太强</li><li>动态加载：运行时加载需要的类，如果运行时不用该类，即使不存在该类，也不报错，降低了依赖性</li></ol><h3 id="2、类加载过程图"><a href="#2、类加载过程图" class="headerlink" title="2、类加载过程图"></a>2、类加载过程图</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1625998735855-88894d99-2ca7-4b2c-8f8e-97840afae271.png#align=left&display=inline&height=272&margin=%5Bobject%20Object%5D&originHeight=272&originWidth=572&size=0&status=done&style=none&width=572"></p><h3 id="3、类加载三个阶段完成任务"><a href="#3、类加载三个阶段完成任务" class="headerlink" title="3、类加载三个阶段完成任务"></a>3、类加载三个阶段完成任务</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1625998832883-69a73b6f-f9c0-4472-8c2f-7d998c4dac06.png#align=left&display=inline&height=275&margin=%5Bobject%20Object%5D&originHeight=275&originWidth=532&size=0&status=done&style=none&width=532"></p><h4 id="1、加载阶段"><a href="#1、加载阶段" class="headerlink" title="1、加载阶段"></a>1、加载阶段</h4><p>将 class 文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区中类数据的访问入口（及引用地址）。所有需要访问和使用类数据只能通过这个 Class 对象。这个加载的过程需要类加载器参与。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1625998884509-2fdf94a6-6850-45af-ba3f-020a83cc6cf4.png#align=left&display=inline&height=230&margin=%5Bobject%20Object%5D&originHeight=230&originWidth=609&size=0&status=done&style=none&width=609"></p><h4 id="2、连接阶段"><a href="#2、连接阶段" class="headerlink" title="2、连接阶段"></a>2、连接阶段</h4><ol><li>验证：<ul><li>目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全</li><li>包括：文件格式验证(是否以魔数 <code>oxcafebabe</code> 开头)、元数据验证、字节码验证和符号以用验证</li><li>可以考虑使用 <code>-Xverify:none</code> 参数来关闭大部分的类验证措施，缩短虚拟机类加载的时间</li></ul></li><li>准备：JVM 会在该阶段为静态变量(<strong>static</strong>)分配内存并<strong>设置默认初始值</strong>，这些变量所使用的内存都将在方法区中进行分配</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类加载的连接阶段——准备</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoad02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性（成员变量，字段）</span></span><br><span class="line">    <span class="comment">//分析类加载的连接阶段——准备，属性是如何处理：</span></span><br><span class="line">    <span class="comment">//1. n1是成员变量，不是静态变量，因此在准备阶段，不会分配内存</span></span><br><span class="line">    <span class="comment">//2. n2是静态变量，分配内存，n2是默认初始化0，而不是20</span></span><br><span class="line">    <span class="comment">//3. n3是static final常量，和静态变量不一样，因为一旦赋值就不变，n3 = 30</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> n1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n2 = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> n3 = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>解析：虚拟机常量池内的符号引用(常量名)替换为直接引用(地址)的过程</li></ol><h4 id="3、初始化："><a href="#3、初始化：" class="headerlink" title="3、初始化："></a>3、初始化：</h4><ul><li>到初始化阶段，才真正开始执行类中定义的 Java 程序代码，此阶段是执行**类构造器<clinit>()**方法的过程。</li><li><strong>类构造器<clinit>()方法是由编译器自动收集类中所有静态变量的赋值动作和静态代码块中的语句合并产生的。</strong>(类构造器是构造类信息的，不是构造该类对象的构造器)</li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化</li><li>虚拟机会保证一个类的**<clinit>()<strong>方法在多线程环境中被正确加锁和同步，如果多个线程同时区初始化一个类，那么只会有一个线程去执行这个类的</strong><clinit>()<strong>方法，其他线程都需要阻塞等待，直到活动线程执行</strong><clinit>()**方法完毕</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类加载初始化阶段</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoad03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载B类，并生成对应的Class类对象</span></span><br><span class="line">        <span class="comment">//2.连接 num = 0;</span></span><br><span class="line">        <span class="comment">//3.初始化阶段：依次自动收集类中的所有静态变量的赋值动作和静态代码块中的语句，并合并</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            clinit()&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;B 静态代码块被执行&quot;);</span></span><br><span class="line"><span class="comment">                //num = 300;</span></span><br><span class="line"><span class="comment">                num = 100;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            合并：num = 100;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//new B(); //类加载</span></span><br><span class="line">        <span class="comment">//System.out.println(B.num); //100，如果直接使用类的静态属性，也会导致类的加载</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载类的时候，是有同步机制控制</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            protected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException &#123;</span></span><br><span class="line"><span class="comment">                //正因为有这个机制，才能保证某个类在内存中，只有一个 Class 对象</span></span><br><span class="line"><span class="comment">                synchronized (getClassLoadingLock(name)) &#123;</span></span><br><span class="line"><span class="comment">                    //...</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 静态代码块被执行&quot;</span>);</span><br><span class="line">        num = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 构造器被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、什么时候发生类初始化"><a href="#4、什么时候发生类初始化" class="headerlink" title="4、什么时候发生类初始化"></a>4、什么时候发生类初始化</h3><h4 id="1、类的主动引用-一定会发生类的初始化"><a href="#1、类的主动引用-一定会发生类的初始化" class="headerlink" title="1、类的主动引用(一定会发生类的初始化)"></a>1、类的主动引用(一定会发生类的初始化)</h4><ul><li>当虚拟机启动，先初始化<strong>main</strong>方法所在的类</li><li><strong>new</strong>一个类的对象</li><li>调用类的静态成员(除了 final 常量)和静态方法</li><li>使用<strong>java.lang.reflect</strong>包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul><h4 id="2、类的被动引用-不会发生类的初始化"><a href="#2、类的被动引用-不会发生类的初始化" class="headerlink" title="2、类的被动引用(不会发生类的初始化)"></a>2、类的被动引用(不会发生类的初始化)</h4><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化</li><li>当通过子类引用父类的静态变量，不会导致子类初始化</li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化(常量在连接阶段就存入调用类的常量池中了)</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1626000427673-4d266799-012c-4b59-898f-bad10df1333b.png#align=left&display=inline&height=483&margin=%5Bobject%20Object%5D&name=image.png&originHeight=483&originWidth=952&size=140910&status=done&style=none&width=952" alt="image.png"></p><h2 id="4、ClassLoader-的理解"><a href="#4、ClassLoader-的理解" class="headerlink" title="4、ClassLoader 的理解"></a>4、ClassLoader 的理解</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1626000546856-591996d4-8a05-4c0e-8bf1-855e60eb0e19.png#align=left&display=inline&height=278&margin=%5Bobject%20Object%5D&name=image.png&originHeight=278&originWidth=870&size=127016&status=done&style=none&width=870" alt="image.png"></p><h4 id="1、类加载器的作用"><a href="#1、类加载器的作用" class="headerlink" title="1、类加载器的作用"></a>1、类加载器的作用</h4><ul><li>类加载器的作用：将<strong>Class</strong>文件字节码内容加载到内存中，并将这些<strong>静态数据转换成方法区的运行时的数据结构</strong>，然后在堆中生成一个代表这个类的<strong>java.lang.Class</strong>对象，作为方法区中类数据的访问入口</li><li>类缓存：标准的<strong>JavaSE</strong>类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载(缓存)一段时间，不过<strong>jvm</strong>垃圾回收机制可以回收这些<strong>Class</strong>对象</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1626000893037-e8f52c60-f3d6-49cd-8b5c-5fc0ad8a64df.png#align=left&display=inline&height=313&margin=%5Bobject%20Object%5D&name=image.png&originHeight=313&originWidth=890&size=105491&status=done&style=none&width=890" alt="image.png"></p><h4 id="2、最常用方法"><a href="#2、最常用方法" class="headerlink" title="2、最常用方法"></a>2、最常用方法</h4><p><strong>getResoureAsStream(String str)：</strong>获取类路径下的指定文件的输入流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;test.properties&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="5、获取运行时的完整结构"><a href="#5、获取运行时的完整结构" class="headerlink" title="5、获取运行时的完整结构"></a>5、获取运行时的完整结构</h2><h3 id="1、Class-类及其用法"><a href="#1、Class-类及其用法" class="headerlink" title="1、Class 类及其用法"></a>1、Class 类及其用法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>forName()</td><td>获取 Class 对象的一个引用</td></tr><tr><td>getName()</td><td>取全限定的类名(包括包名)，即类的完整名字</td></tr><tr><td>getSimpleName()</td><td>获取类名(不包括包名)</td></tr><tr><td>isInterface()</td><td>判断 Class 对象是否是表示一个接口</td></tr><tr><td>getInterfaces()</td><td>返回 Class 对象数组，表示 Class 对象所引用的类所实现的所有接口</td></tr><tr><td>getSupercalss()</td><td>返回 Class 对象，表示 Class 对象所引用的类所继承的直接基类。应用该方法可在运行时发现一个对象完整的继承结构。</td></tr><tr><td>getAnnotations()</td><td>以 Annotation[]形式返回注解信息</td></tr><tr><td>newInstance()</td><td>返回一个 Oject 对象，是实现“虚拟构造器”的一种途径。使用该方法创建的类，必须带有无参的构造器。</td></tr><tr><td>getFields()</td><td>获得所有 public 修饰的属性，包含本类以及父类的</td></tr><tr><td>getDeclaredFields()</td><td>获得本类中的所有属性</td></tr><tr><td>getMethods()</td><td>获取所有 pubilc 修饰的方法，包含本类以及父类的</td></tr><tr><td>getDeclaredMethods()</td><td>获取本类中的所有方法</td></tr><tr><td>getConstructots()</td><td>获取本类中所有 public 修饰的构造器</td></tr><tr><td>getDeclaredConstructors()</td><td>获取本类中的所有构造器</td></tr></tbody></table><h3 id="2、Field-类及其用法"><a href="#2、Field-类及其用法" class="headerlink" title="2、Field 类及其用法"></a>2、Field 类及其用法</h3><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Field</td><td>getDeclaredField(String name)</td><td>获取指定 name 名称的(包含 private 修饰的)字段，不包括继承的字段</td></tr><tr><td>Field[]</td><td>getDeclaredFields()</td><td>获取 Class 对象所表示的类或接口的所有(包含 private 修饰的)字段,不包括继承的字段</td></tr><tr><td>Field</td><td>getField(String name)</td><td>获取指定 name 名称、具有 public 修饰的字段，包含继承字段</td></tr><tr><td>Field[]</td><td>getFields()</td><td>获取修饰符为 public 的字段，包含继承字段</td></tr></tbody></table><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>void</td><td>set(Object obj, Object value)</td><td>将指定对象变量上此 Field 对象表示的字段设置为指定的新值。</td></tr><tr><td>Object</td><td>get(Object obj)</td><td>返回指定对象上此 Field 表示的字段的值</td></tr><tr><td>Class&lt;?&gt;</td><td>getType()</td><td>返回一个 Class 对象，它标识了此 Field 对象所表示字段的声明类型。</td></tr><tr><td>String</td><td>getName()</td><td>返回此 Field 对象表示的字段的名称</td></tr><tr><td>void</td><td>setAccessible(boolean flag)</td><td>将此对象的 accessible 标志设置为指示的布尔值,即设置其可访问性</td></tr></tbody></table><h3 id="3、Method-类及其用法"><a href="#3、Method-类及其用法" class="headerlink" title="3、Method 类及其用法"></a>3、Method 类及其用法</h3><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Method</td><td>getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回一个指定参数的 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。</td></tr><tr><td>Method[]</td><td>getDeclaredMethods()</td><td>返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</td></tr><tr><td>Method</td><td>getMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。</td></tr><tr><td>Method[]</td><td>getMethods()</td><td>返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。</td></tr></tbody></table><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Object</td><td>invoke(Object obj, Object… args)</td><td>对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。</td></tr><tr><td>Class&lt;?&gt;</td><td>getReturnType()</td><td>返回一个 Class 对象，该对象描述了此 Method 对象所表示的方法的正式返回类型,即方法的返回类型</td></tr><tr><td>Class&lt;?&gt;[]</td><td>getParameterTypes()</td><td>按照声明顺序返回 Class 对象的数组，这些对象描述了此 Method 对象所表示的方法的形参类型。即返回方法的参数类型组成的数组</td></tr><tr><td>String</td><td>getName()</td><td>以 String 形式返回此 Method 对象表示的方法名称，即返回方法的名称</td></tr></tbody></table><h3 id="4、Constructor-类及其用法"><a href="#4、Constructor-类及其用法" class="headerlink" title="4、Constructor 类及其用法"></a>4、Constructor 类及其用法</h3><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Constructor</td><td>getConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回指定参数类型、具有 public 访问权限的构造函数对象</td></tr><tr><td>Constructor&lt;?&gt;[]</td><td>getConstructors()</td><td>返回所有具有 public 访问权限的构造函数的 Constructor 对象数组</td></tr><tr><td>Constructor</td><td>getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回指定参数类型、所有声明的（包括 private）构造函数对象</td></tr><tr><td>Constructor&lt;?&gt;[]</td><td>getDeclaredConstructor()</td><td>返回所有声明的（包括 private）构造函数对象</td></tr><tr><td>T</td><td>newInstance()</td><td>调用无参构造器创建此 Class 对象所表示的类的一个新实例。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射获取类的结构信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionUtils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">api_02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//得到Class对象</span></span><br><span class="line">        Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;com.hspedu.reflection.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//getDeclaredFields:获取本类中所有属性</span></span><br><span class="line">        <span class="comment">//规定 说明: 默认修饰符 是0 ， public  是1 ，private 是 2 ，protected 是 4 , static 是 8 ，final 是 16</span></span><br><span class="line">        Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有属性=&quot;</span> + declaredField.getName()</span><br><span class="line">                    + <span class="string">&quot; 该属性的修饰符值=&quot;</span> + declaredField.getModifiers()</span><br><span class="line">                    + <span class="string">&quot; 该属性的类型=&quot;</span> + declaredField.getType());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredMethods:获取本类中所有方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName()</span><br><span class="line">                    + <span class="string">&quot; 该方法的访问修饰符值=&quot;</span> + declaredMethod.getModifiers()</span><br><span class="line">                    + <span class="string">&quot; 该方法返回类型&quot;</span> + declaredMethod.getReturnType());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出当前这个方法的形参数组情况</span></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = declaredMethod.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;该方法的形参类型=&quot;</span> + parameterType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredConstructors:获取本类中所有构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = declaredConstructor.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;该构造器的形参类型=&quot;</span> + parameterType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一组方法API</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">api_01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//得到Class对象</span></span><br><span class="line">        Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;com.hspedu.reflection.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//getName:获取全类名</span></span><br><span class="line">        System.out.println(personCls.getName());</span><br><span class="line">        <span class="comment">//getSimpleName:获取简单类名</span></span><br><span class="line">        System.out.println(personCls.getSimpleName());</span><br><span class="line">        <span class="comment">//getFields:获取所有public修饰的属性，包含本类以及父类的</span></span><br><span class="line">        Field[] fields = personCls.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的属性=&quot;</span> + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredFields:获取本类中所有属性</span></span><br><span class="line">        Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有属性=&quot;</span> + declaredField.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getMethods:获取所有public修饰的方法，包含本类以及父类的</span></span><br><span class="line">        Method[] methods = personCls.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的方法=&quot;</span> + method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredMethods:获取本类中所有方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getConstructors: 获取所有public修饰的构造器，包含本类</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = personCls.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类的构造器=&quot;</span> + constructor.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredConstructors:获取本类中所有构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getPackage:以Package形式返回 包信息</span></span><br><span class="line">        System.out.println(personCls.getPackage());</span><br><span class="line">        <span class="comment">//getSuperClass:以Class形式返回父类信息</span></span><br><span class="line">        Class&lt;?&gt; superclass = personCls.getSuperclass();</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的class对象=&quot;</span> + superclass);</span><br><span class="line">        <span class="comment">//getInterfaces:以Class[]形式返回接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = personCls.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接口信息=&quot;</span> + anInterface);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getAnnotations:以Annotation[] 形式返回注解信息</span></span><br><span class="line">        Annotation[] annotations = personCls.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注解信息=&quot;</span> + annotation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">IA</span>, <span class="title">IB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> age; <span class="comment">// 4 + 8 = 12</span></span><br><span class="line">    String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> sal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> sal)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSDN页面另存为pdf</title>
      <link href="/2021/06/07/yuque/CSDN%E9%A1%B5%E9%9D%A2%E5%8F%A6%E5%AD%98%E4%B8%BApdf/"/>
      <url>/2021/06/07/yuque/CSDN%E9%A1%B5%E9%9D%A2%E5%8F%A6%E5%AD%98%E4%B8%BApdf/</url>
      
        <content type="html"><![CDATA[<ol><li>将如下内容放入页面的 console 中执行</li><li>将打印机改成”另存为 pdf”，关闭页眉页脚</li><li>可以看到输出的页面多了很多没用的元素，可以先在页面上删除掉多余的元素，再进行上面的操作。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> articleBox = $(<span class="string">&quot;div.article_content&quot;</span>);</span><br><span class="line">  articleBox.removeAttr(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;#btn-readmore&quot;</span>).parent().remove();</span><br><span class="line">  $(<span class="string">&quot;#side&quot;</span>).remove();</span><br><span class="line">  $(</span><br><span class="line">    <span class="string">&quot;#comment_title, #comment_list, #comment_bar, #comment_form, .announce, #ad_cen, #ad_bot&quot;</span></span><br><span class="line">  ).remove();</span><br><span class="line">  $(<span class="string">&quot;.nav_top_2011, #header, #navigator&quot;</span>).remove();</span><br><span class="line">  $(<span class="string">&quot;.csdn-side-toolbar,.template-box,.reward-user-box&quot;</span>).remove();</span><br><span class="line">  $(</span><br><span class="line">    <span class="string">&quot;.p4course_target, .comment-box, .recommend-box, #csdn-toolbar, #tool-box,#dmp_ad_58, .more-toolbox, .article-info-box, .btn-readmore&quot;</span></span><br><span class="line">  ).remove();</span><br><span class="line">  $(<span class="string">&quot;aside&quot;</span>).remove();</span><br><span class="line">  $(<span class="string">&quot;.tool-box&quot;</span>).remove();</span><br><span class="line">  $(<span class="string">&quot;main&quot;</span>).css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;content&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;main&quot;</span>).css(<span class="string">&quot;float&quot;</span>, <span class="string">&quot;left&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;#mainBox&quot;</span>).css(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;100%&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;.main_father.clearfix.d-flex.justify-content-center&quot;</span>).css(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;100%&quot;</span>); <span class="comment">//显示不全关键在于修改这里的width的比例</span></span><br><span class="line">  <span class="built_in">window</span>.print(); <span class="comment">// 修改成 90% 基本就可以显示全</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1623070852547-f0a32540-6940-4b77-bd27-e9d897bed548.png#align=left&display=inline&height=859&margin=%5Bobject%20Object%5D&name=image.png&originHeight=859&originWidth=1304&size=188158&status=done&style=none&width=1304" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot 学习之旅 01-入门篇</title>
      <link href="/2021/05/24/yuque/Springboot%20%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%2001-%E5%85%A5%E9%97%A8%E7%AF%87/"/>
      <url>/2021/05/24/yuque/Springboot%20%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%2001-%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="1、Springboot-简介"><a href="#1、Springboot-简介" class="headerlink" title="1、Springboot 简介"></a>1、Springboot 简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">简化Spring应用开发的一个框架，整个spring技术栈的一个大整合，J2EE开发的一站式解决方案</span><br></pre></td></tr></table></figure><h2 id="2、开发环境"><a href="#2、开发环境" class="headerlink" title="2、开发环境"></a>2、开发环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JDK1.8: Springboot推荐JDK1.7及以上版本；</span><br><span class="line">MAVEN3.3.9: MAVEN3.3以上版本</span><br><span class="line">IDEA2018: 可以说是一个非常好用的java开发工具</span><br><span class="line">Springboot1.5.9.RELEASE</span><br></pre></td></tr></table></figure><h3 id="1、MAVEN-配置"><a href="#1、MAVEN-配置" class="headerlink" title="1、MAVEN 配置"></a>1、MAVEN 配置</h3><p><strong>以下内容全是在 maven 文件夹下 conf 文件夹下的 setting.xml 文件中配置。</strong></p><h4 id="1、配置-jar-下载位置，localRepository-标签里面的文件夹路径自定义"><a href="#1、配置-jar-下载位置，localRepository-标签里面的文件夹路径自定义" class="headerlink" title="1、配置 jar 下载位置，localRepository 标签里面的文件夹路径自定义"></a>1、配置 jar 下载位置，localRepository 标签里面的文件夹路径自定义</h4><p><code>&lt;localRepository&gt;D:/develop/apache-maven-3.3.9/repository&lt;/localRepository&gt;</code></p><h4 id="2、配置使用阿里云镜像源下载，在-mirrors-标签中添加"><a href="#2、配置使用阿里云镜像源下载，在-mirrors-标签中添加" class="headerlink" title="2、配置使用阿里云镜像源下载，在 mirrors 标签中添加"></a>2、配置使用阿里云镜像源下载，在 mirrors 标签中添加</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、在的-profiles-标签中添加"><a href="#3、在的-profiles-标签中添加" class="headerlink" title="3、在的 profiles 标签中添加"></a>3、在的 profiles 标签中添加</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、IDEA-配置"><a href="#2、IDEA-配置" class="headerlink" title="2、IDEA 配置"></a>2、IDEA 配置</h3><p><strong>配置 maven，方便后续开发时下载以及导入依赖。</strong></p><h2 id="3、Springboot-HelloWorld"><a href="#3、Springboot-HelloWorld" class="headerlink" title="3、Springboot-HelloWorld"></a>3、Springboot-HelloWorld</h2><p><strong>学习每一项技术之前好像都是从 HelloWorld 开始的，SpringBoot 学习之旅当然不例外。</strong></p><h3 id="1、使用-Spring-Initializer-快速创建项目"><a href="#1、使用-Spring-Initializer-快速创建项目" class="headerlink" title="1、使用 Spring Initializer 快速创建项目"></a>1、使用 Spring Initializer 快速创建项目</h3><p><code>此过程需要联网，创建完后，idea会利用maven帮项目导入相关依赖，如果依赖在maven的本地仓库中找不到，就会从阿里云镜像源上下载，依赖导入完毕，接下来的工作就是书写业务相关代码。</code></p><p>其中 resources 文件夹中目录结构：</p><ul><li>static：保存所有的静态资源(css，js，img)</li><li>temaplates：保存所有的模板页面，Springboot 默认 jar 包使用嵌入式的 tomcat，默认不支持 JSP 页面；但是可以使用模板引擎(freemarker、thymeleaf)。</li><li><strong>application.properties</strong>：Springboot 应用的配置文件，可以在此处<strong>修改 Springboot 自动配置时的默认配置</strong>。</li></ul><h3 id="2、编写相关的-controller，service-repository"><a href="#2、编写相关的-controller，service-repository" class="headerlink" title="2、编写相关的 controller，service, repository"></a>2、编写相关的 controller，service, repository</h3><p><code>创建HelloController文件,用来测试项目是否可以是否正常运行。</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行HelloworldApplication中的main方法即可启动应用，打开浏览器在地址栏上输入localhost:8080/hello ，即可看到页面上输出hello springboot 字样，代表我们访问后台成功，项目正常运行。</code></p><h3 id="3、HelloWorld-探究"><a href="#3、HelloWorld-探究" class="headerlink" title="3、HelloWorld 探究"></a>3、HelloWorld 探究</h3><p><code>以前我们使用SSM框架时需要配置一堆的xml文件，如要书写大量的配置，现在启动Springboot应用的时候为什么没有做任何配置的工作就可以正常运行呢？不用说，肯定是Springboot帮我们完成了这一部分工作，让我们更加专注于业务代码。那我们接下来看看Springboot是如何做的。</code></p><h4 id="1、POM-文件"><a href="#1、POM-文件" class="headerlink" title="1、POM 文件"></a>1、POM 文件</h4><p>父项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击<code>spring-boot-starter-parent</code>，可以看到有一个父项目，继续点击<code>spring-boot-dependencies</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到在<code>&lt;properties&gt;</code>中配置了大量的版本号，其实这个父项目就是用来真正管理 Springboot 应用中所有依赖的版本，是 Springboot 的版本仲裁中心。以后我们导入的依赖默认是不需要写版本号的，但是没有在此管理的依赖在导入时还是需要写版本号的。</p><p>maven 插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>maven 插件可以将项目打包成一个可执行的 jar 包，包括把应用中所有的依赖打包进 jar 包内，此时直接使用 java -jar 命令行的方式即可启动项目。</p><h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong>-<strong>web</strong>可以拆分成两部分来解读。<br><strong>spring-boot-starter</strong>：Springboot 将所有的功能场景抽取出来，做成一个个的<code>starter(启动器)</code>，需要什么功能，就导入什么场景的启动器，引入场景启动器后该功能所需有的全部依赖都会导入进来。<br><strong>web</strong>：web 就代表导入 web 功能所需要的依赖。</p><h4 id="3、主程序类-入口"><a href="#3、主程序类-入口" class="headerlink" title="3、主程序类/入口"></a>3、主程序类/入口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloworldApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloworldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@SpringBootApplication</code>标注在某个类上就代表这个类是 Springboot 应用的主配置类，Springboot 就应该运行这个类中的 main 方法来启动 Springboot 应用。<br><code>@SpringBootApplication</code>是一个组合注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">  excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">  type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">  classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">  type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">  classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure><p><code>@SpringBootConfiguration</code>标注在某个类上就代表这个一个 Springboot 的配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"> <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"> <span class="meta">@Documented</span></span><br><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line"> <span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br></pre></td></tr></table></figure><p><code>@SpringBootConfiguration</code>是一个组合注解，底层是<code>@Configuration</code>注解，<code>@Configuration</code>标注在某个类上就代表该类是一个配置类，现在的配置类就相当于以前的 xml 配置文件，现在可以在配置类中使用<code>@Bean</code>注解向容器中导入组件。<code>@Configuration</code>的底层是<code>@Component</code>注解，说明配置类也是容器中的一个组件。</p><p><code>@EnableAutoConfiguration</code>代表开启自动配置功能。以前需要我们配置的东西(如视图解析器，包扫描等配置)Springboot 会帮我们自动配置，需要使用<code>@EnableAutoConfiguration</code>注解来告诉 Springboot 来开启自动配置功能，这样自动配置才会生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;EnableAutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure><p><code>@AutoConfigurationPackage</code>：自动配置包<br><code>@Import(&#123;Registrar.class&#125;)</code>：<code>@Import</code>是 Spring 的一个底层注解，用于给容器中导入一个组件们现在导入的组件是<code>Registrar.class</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"> AutoConfigurationPackages.register(registry, (<span class="keyword">new</span> AutoConfigurationPackages.PackageImport(metadata)).getPackageName());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>作用是将主配置类(<code>@SpringBootApplication</code>标注的类)所在包及其所有子包下的所有组件扫描进容器中。就是把我们写的业务代码中的 controller，service，repository 给扫描进 Spring 容器中。</strong><br><code>@Import(EnableAutoConfigurationImportSelector.class)</code>导入哪些组件的选择器，将所需要导入的组件以全类名的方式返回，然后这些组件就会被添加到容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line"><span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">AnnotationAttributes attributes = <span class="keyword">this</span>.getAttributes(annotationMetadata);</span><br><span class="line">List&lt;String&gt; configurations = <span class="keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">configurations = <span class="keyword">this</span>.removeDuplicates(configurations);</span><br><span class="line">configurations = <span class="keyword">this</span>.sort(configurations, autoConfigurationMetadata);</span><br><span class="line">Set&lt;String&gt; exclusions = <span class="keyword">this</span>.getExclusions(annotationMetadata, attributes);</span><br><span class="line"><span class="keyword">this</span>.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">configurations.removeAll(exclusions);</span><br><span class="line">configurations = <span class="keyword">this</span>.filter(configurations, autoConfigurationMetadata);</span><br><span class="line"><span class="keyword">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line"><span class="keyword">return</span> (String[])configurations.toArray(<span class="keyword">new</span> String[configurations.size()]);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException var6) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var6);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());</span><br><span class="line">Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>this.getSpringFactoriesLoaderFactoryClass()</code>等于<code>EnableAutoConfiguration.class</code>；Springboot 应用在启动的时候会从类路径下搜寻所有<code>META-INF/spring.factories</code>的配置文件，并将其中<code>EnableAutoConfiguration</code>对应的配置项通过反射实例化为对应的标注了<code>@Configuration</code>的 JavaConfig 形式的自动配置类加载到容器中。自动配置类此时就生效，帮我们完成配置的工作(以前需要我们自己配置的东西，自动配置类都帮我们实现了)，J2EE 的整体解决方案和自动配置都在<code>spring-boot-autoconfigure-1.5.9.RELEASE.jar</code>中。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot 学习之旅 02-配置篇</title>
      <link href="/2021/05/24/yuque/Springboot%20%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%2002-%E9%85%8D%E7%BD%AE%E7%AF%87/"/>
      <url>/2021/05/24/yuque/Springboot%20%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%2002-%E9%85%8D%E7%BD%AE%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><h2 id="上一篇介绍了-Springboot-的入门，了解到-Springboot-使用-”约定大于配置”-项目中存在大量的默认配置，让你无需配置任何东西-的理念就让你的项目快速启动，要想把-Springboot-玩的溜，就得学会如何去修改各个功能模块的默认配置，此时就需要了解-Springboot-的配置文件application-properties-。"><a href="#上一篇介绍了-Springboot-的入门，了解到-Springboot-使用-”约定大于配置”-项目中存在大量的默认配置，让你无需配置任何东西-的理念就让你的项目快速启动，要想把-Springboot-玩的溜，就得学会如何去修改各个功能模块的默认配置，此时就需要了解-Springboot-的配置文件application-properties-。" class="headerlink" title="上一篇介绍了 Springboot 的入门，了解到 Springboot 使用**”约定大于配置”(项目中存在大量的默认配置，让你无需配置任何东西)的理念就让你的项目快速启动，要想把 Springboot 玩的溜，就得学会如何去修改各个功能模块的默认配置，此时就需要了解 Springboot 的配置文件application.properties**。"></a>上一篇介绍了 Springboot 的入门，了解到 Springboot 使用**”约定大于配置”<strong>(项目中存在大量的默认配置，让你无需配置任何东西)的理念就让你的项目快速启动，要想把 Springboot 玩的溜，就得学会如何去修改各个功能模块的默认配置，此时就需要了解 Springboot 的配置文件</strong>application.properties**。</h2><h2 id="2、正文"><a href="#2、正文" class="headerlink" title="2、正文"></a>2、正文</h2><p>如果你使用 Spring Initializer 快速创建项目，则默认会在<strong>类路径下</strong>创建一个<strong>application.properties</strong>的全局配置文件，该配置文件的作用是对 Springboot 的一些<strong>默认配置进行修改</strong>。</p><h3 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h3><p>配置文件有几种格式，比较常见的是以<code>.xml/.json/.properties</code>结尾的文件，最适合做配置文件的应该是以<code>.yaml/.yml</code>结尾的文件，<code>.yaml/.yml</code>文件<strong>以数据为中心</strong>，不会将太多的时间浪费在无用的标签上(以前写<code>.xml</code>配置文件时需要写大量的标签)，所以推荐使用<code>.yaml/.yml</code>结尾的配置文件。</p><h3 id="2、YAML-语法"><a href="#2、YAML-语法" class="headerlink" title="2、YAML 语法"></a>2、YAML 语法</h3><h4 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h4><ul><li><code>k: v</code>表示一对键值对，其中冒号与 v 之间必须要有空格。</li><li>以空格的缩进来控制层级关系，只要是左对齐的一列数据，那么就是同级的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">  path: /hello</span><br></pre></td></tr></table></figure><ul><li>属性与值都是大小写敏感的。</li></ul><h4 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h4><ul><li><strong>字面量</strong>：普通的值(<strong>数字</strong>，<strong>字符串</strong>，<strong>布尔</strong>)<br>字符串默认不用加上单引号或者双引号。<br>其中双引号不会转义字符串里面的特殊字符，特殊字符会作为本身想表示的意思，如 name: “zhangsan \n lisi”，输出：zhangsan 换行 lisi。<br>单引号会转义特殊字符，特殊字符最终只是一个普通的字符串数据，如 name: “zhangsan \n lisi”，输出：zhangsan \n lisi。</li><li><strong>对象</strong>、<strong>Map(键值对)<strong>：<br><strong>对象</strong>或者</strong>Map</strong>还是以 <code>k: v</code>的形式表示，需要注意缩进。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><ul><li><strong>行内写法</strong>：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> &#123; <span class="attr">lastName:</span> <span class="string">zhangsan</span>, <span class="attr">age:</span> <span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>**数组(List、Set)**：<br>用<code>- v</code>来表示数组中一个元素。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><ul><li><strong>行内写法</strong>：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>, <span class="string">dog</span>, <span class="string">pig</span>]</span><br></pre></td></tr></table></figure><h3 id="3、自定义属性"><a href="#3、自定义属性" class="headerlink" title="3、自定义属性"></a>3、自定义属性</h3><p><code>application.yaml</code> 配置文件提供自定义属性的支持，这样我们就可以将一些常量配置在这里。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">last-name:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">1995</span><span class="string">/07/13</span></span><br><span class="line">  <span class="attr">maps:</span> &#123; <span class="attr">k1:</span> <span class="string">v1</span>, <span class="attr">k2:</span> <span class="string">v2</span> &#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">fish</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xiaobai</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>然后可以通过<code>@value</code>注解绑定到你想要的属性上面，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动工程，访问 hello，则看到的效果是 hello 张三。</p><p>有时候，属性太多，一个个绑定不现实，所以推荐使用第二种方法，<strong>将配置文件中配置的每一个属性的值映射到这个组件中</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> boss;</span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line"><span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p><code>@ConfigurationProperties(prefix = &quot;person&quot;)</code>告诉 Springboot 将本类中的所有属性与全局配置文件中相关的配置进行绑定，其中<code>prefix = “person”</code>指明与配置文件中哪个下面的所有属性进行一一映射。</p><p>但是需要注意一点，只有这个组件是容器中的组件，才能使用容器提供的<code>@ConfigurationProperties</code>功能。</p><p>在我们在配置文件中给 javaBean 的属性绑定值的时候，可以先导入一个依赖，这样在配置文件中进行绑定的时候就会给出提示。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>@value</code>与@<code>@ConfigurationProperties</code>比较</p><table><thead><tr><th></th><th>@ConfigurationProperties</th><th><a href="/value">@value </a></th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303 校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><ul><li><strong>松散绑定</strong>：类属性名在配置文件中可以使用短横线或下划线来替代驼峰形式命名的属性。</li><li><strong>SpEL</strong>：EL 表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br></pre></td></tr></table></figure><ul><li><strong>JSR303 校验</strong>：数据校验</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span> <span class="comment">// 数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="meta">@Email</span> <span class="comment">// 必须为email格式</span></span><br><span class="line"><span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure><ul><li>当配置文件中的值不是 email 格式时，则会抛出异常</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Property: person.email</span><br><span class="line">Value: 23234564654</span><br><span class="line">Reason: 不是一个合法的电子邮件地址</span><br></pre></td></tr></table></figure><ul><li><strong>复杂类型封装</strong>：如<strong>map</strong>，<strong>list</strong>等，<code>@value</code>并不支持读取复杂类型的配置项。</li></ul><h3 id="4、使用自定义配置文件"><a href="#4、使用自定义配置文件" class="headerlink" title="4、使用自定义配置文件"></a>4、使用自定义配置文件</h3><h4 id="1、-PropertySource"><a href="#1、-PropertySource" class="headerlink" title="1、@PropertySource "></a>1、<a href="/PropertySource">@PropertySource </a></h4><p>有时候我们不希望把所有的配置全部都放在<code>application.properties</code>或者<code>application.yaml</code>配置文件中，我们可以自定义一个配置文件，可以任意取名，文件名后缀为 properties/yaml 即可。这里需要特别注意一点，<code>@PropertySource</code><strong>默认只对 properties 文件可以进行加载，但对于 yml 或者 yaml 不能支持</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPropertySourceFactory</span> <span class="keyword">implements</span> <span class="title">PropertySourceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultPropertySourceFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PropertySource&lt;?&gt; createPropertySource(String name, EncodedResource resource) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? <span class="keyword">new</span> ResourcePropertySource(name, resource) : <span class="keyword">new</span> ResourcePropertySource(resource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想<strong>支持 yaml 文件</strong>，只需要继承<code>DefaultPropertySourceFactory</code>类并重写其 <code>createPropertySource</code> 方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;config&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(value = &#123; &quot;classpath:test.yaml&quot; &#125;, factory = MixPropertySourceFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigTestBean</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String want;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MixPropertySourceFactory</span> <span class="keyword">extends</span> <span class="title">DefaultPropertySourceFactory</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PropertySource&lt;?&gt; createPropertySource(String name, EncodedResource resource) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">String sourceName = name != <span class="keyword">null</span> ? name : resource.getResource().getFilename();</span><br><span class="line"><span class="keyword">if</span> (!resource.getResource().exists()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PropertiesPropertySource(sourceName, <span class="keyword">new</span> Properties());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sourceName.endsWith(<span class="string">&quot;.yaml&quot;</span>) || sourceName.endsWith(<span class="string">&quot;.yml&quot;</span>)) &#123;</span><br><span class="line">Properties propertiesFromYaml = loadYml(resource);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PropertiesPropertySource(sourceName, propertiesFromYaml);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.createPropertySource(name, resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Properties <span class="title">loadYml</span><span class="params">(EncodedResource resource)</span> </span>&#123;</span><br><span class="line">YamlPropertiesFactoryBean factory = <span class="keyword">new</span> YamlPropertiesFactoryBean();</span><br><span class="line">factory.setResources(resource.getResource());</span><br><span class="line">factory.afterPropertiesSet();</span><br><span class="line"><span class="keyword">return</span> factory.getObject();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、-ImportResource"><a href="#2、-ImportResource" class="headerlink" title="2、@ImportResource "></a>2、<a href="/ImportResource">@ImportResource </a></h4><p>导入 Spring 的配置文件，让配置文件中的内容生效。</p><p>Springboot 里面没有 Spring 的配置文件，需要我们自己编写配置文件，编写之后也不能自动识别，想让其生效，需要将<code>@ImportResource</code>注解标注在一个配置类上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource(locations = &#123;&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>Springboot 不推荐使用这种方式给容器添加组件，推荐使用<strong>全注解的方式给容器添加组件</strong>：</p><ul><li><code>@Configuration</code>标注在某个类上指明当前类是一个配置类，相当于以前的.xml 配置文件</li><li><code>@Bean</code>标注在某个方法上，将方法的返回值添加到容器中，容器中这个组件默认的 id 就是方法名。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppconfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderService <span class="title">orderService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;給Springboot添加OrderService組件&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式给容器中添加组件，相当于在<strong>OrderServiceImpl</strong>类上添加<code>@Service</code>注解，效果一样。</p><h3 id="5、随机值配置"><a href="#5、随机值配置" class="headerlink" title="5、随机值配置"></a>5、随机值配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.int&#125;、$&#123;random.long&#125;</span><br><span class="line">$&#123;random.int(10)&#125;、$&#123;random.int[1024,65536]&#125;</span><br></pre></td></tr></table></figure><p><strong>占位符获取之前配置的值，如果没有可以指定默认值。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">last-name:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">age:</span> <span class="string">$&#123;random.int(18)&#125;</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">1995</span><span class="string">/07/13</span></span><br><span class="line">  <span class="attr">maps:</span> &#123; <span class="attr">k1:</span> <span class="string">v1</span>, <span class="attr">k2:</span> <span class="string">v2</span> &#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">fish</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br><span class="line">    <span class="attr">age:</span> <span class="string">$&#123;person.age&#125;</span></span><br><span class="line">  <span class="attr">email:</span> <span class="number">2329862718</span><span class="string">@qq.com</span></span><br></pre></td></tr></table></figure><h3 id="6、profile-多环境配置"><a href="#6、profile-多环境配置" class="headerlink" title="6、profile-多环境配置"></a>6、profile-多环境配置</h3><p>当应用程序需要部署到不同运行环境时，一些配置细节通常会有所不同，比如日志，生产日志会将日志级别设置 WRAN 或者更高级别，将日志写入日志文件，而开发的时候需要日志级别为 DEBUG，日志输出到控制台即可。比如数据库，生产环境与测试环境连接的数据库肯定不是同一个数据库。如果按照这种做法，就是每次发布的时候替换掉配置文件，这样太麻烦，Springboot 的 profile 就给我们提供了解决方案，<strong>在打成 jar 包用命令行启动的时候带上参数选择哪个配置文件,默认是使用 application.properties 的配置。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure><p>在 Springboot 中多环境配置文件名需要<code>application-&#123;profile&#125;.properties/yaml</code>的格式，其中<code>&#123;profile&#125;</code>对应你的环境标识，比如：</p><ul><li>application-dev.properties：开发环境</li><li>application-prod.properties：生产环境</li></ul><p>想要使用对应的环境，只需要在<code>application.properties</code>中使用<code>spring.profiles.active</code>属性来设置，<strong>值对应上面提到的环境标识</strong>，这里就是指<strong>dev</strong>、<strong>prod</strong>这两个。</p><p><strong>yaml 支持多文档块方式</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span> <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure><p><strong>激活指定 profile 的几种方式</strong>：</p><ul><li>在配置文件中指定<code>spring.profiles.active</code>属性</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure><ul><li>命令行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure><ul><li>虚拟机参数</li></ul><h3 id="7、配置文件优先顺序"><a href="#7、配置文件优先顺序" class="headerlink" title="7、配置文件优先顺序"></a>7、配置文件优先顺序</h3><p>Springboot 启动时会扫描以下位置的<code>application.properties/yaml</code>文件作为 Springboot 的默认配置文件。</p><ul><li>外置，在相当于应用程序运行目录/config 子目录里</li><li>外置，在应用程序运行目录里</li><li>内置，在类路径下/config 目录里</li><li>内置，在类路径下，创建 Springboot 项目时默认会放在此处</li></ul><p><strong>优先级由高到低</strong>，Springboot 会把这<strong>四个位置的配置文件全部加载进来</strong>，对于属性相同的配置，<strong>高优先级的配置会覆盖低优先级的配置</strong>，对于属性不同的配置，会形成<strong>互补配置</strong>。</p><h3 id="8、外部加载配置顺序"><a href="#8、外部加载配置顺序" class="headerlink" title="8、外部加载配置顺序"></a>8、外部加载配置顺序</h3><p>Springboot 也可以从以下位置加载配置文件，<strong>优先级从高到低，高优先级的配置会覆盖低优先级的配置，所有的配置会形成互补配置</strong>。</p><ul><li><strong>命令行参数</strong>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar --server.port=8087  --server.context-path=/friday</span><br></pre></td></tr></table></figure><ul><li>多个配置用空格分开， –配置项=值</li><li><strong>优先加载带 profile 的文件，再从 jar 包外向 jar 内进行寻找</strong><br>jar 包外 config 目录下带 profile 的配置文件——&gt;与 jar 同级目录下的带 profile 的配置文件——&gt;jar 包内类路径下 config 目录下的带 profile 的配置文件——&gt;jar 包内类路径下的带 profile 的配置文件——&gt;jar 包外 config 目录下不带 profile 的配置文件——&gt;与 jar 同级目录下的不带 profile 的配置文件——&gt;jar 包内类路径下 config 目录下的不带 profile 的配置文件——&gt;jar 包内类路径下的不带 profile 的配置文件</li></ul><h3 id="9、自动配置原理"><a href="#9、自动配置原理" class="headerlink" title="9、自动配置原理"></a>9、自动配置原理</h3><h4 id="1、分析"><a href="#1、分析" class="headerlink" title="1、分析"></a>1、分析</h4><p>上一节已经分析了<strong>Springboot 项目启动时会开启自动配置，给容器中添加大量的自动配置类</strong>，这一节我们详细分析<strong>该自动配置类是否真的添加到容器中</strong>以及我们该<strong>如何修改该自动配置类的默认值</strong>。</p><p>以<strong>HttpEncodingAutoConfiguration</strong>为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HttpEncodingProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">this</span>.properties = properties;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@Bean</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@ConditionalOnMissingBean(CharacterEncodingFilter.class)</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter characterEncodingFilter()</span> </span>&#123;</span><br><span class="line">CharacterEncodingFilter filter = <span class="keyword">new</span>             OrderedCharacterEncodingFilter();</span><br><span class="line">         filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());       filter.setForceRequestEncoding(</span><br><span class="line">             <span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">         filter.setForceResponseEncoding(</span><br><span class="line">           <span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> Charset charset = DEFAULT_CHARSET;</span><br><span class="line"><span class="keyword">private</span> Boolean force;</span><br><span class="line"><span class="keyword">private</span> Boolean forceRequest;</span><br><span class="line"><span class="keyword">private</span> Boolean forceResponse;</span><br><span class="line"><span class="keyword">private</span> Map&lt;Locale, Charset&gt; mapping;</span><br></pre></td></tr></table></figure><p><code>@Configuration</code>注解表明该类是一个配置类，加上<code>@Bean</code>注解可以给容器添加组件;</p><p><code>@EnableConfigurationProperties(HttpEncodingProperties.class)</code>注解作用是<strong>启用指定类的 ConfigurationProperties 功能</strong>，将<code>application.peoperties</code><strong>配置文件中对应的值和该类中的属性一一映射</strong>，并**把该类添加到容器中(方便在对应的自动配置类中使用配置文件中的属性值)**。</p><p><code>@ConditionalOnWebApplication</code>注解的作用是<strong>判断当前应用是不是一个 web 应用，如果是，则当前自动配置类生效</strong>。该注解是<code>@Conditional</code>注解的派生，<strong>根据不同的条件，判断整个自动配置类里面的配置是否生效</strong>。</p><p><code>@ConditionalOnClass(CharacterEncodingFilter.class)</code>注解的作用是<strong>判断当前项目中有没有 CharacterEncodingFilter(SpringMVC 中进行乱码解决的过滤器)这个类，如果有，则当前自动配置类生效</strong>。</p><p><code>@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</code>注解的作用是<strong>判断当前配置文件中是否存在某个配置</strong><code>spring.http.encoding.enabled</code>，<strong>如果不存在的话该自动配置类也是默认生效的，但是如果存在且值为 false 则该自动配置类不生效</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">this</span>.properties = properties;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br></pre></td></tr></table></figure><p>当该类只有一个有参构造器的情况下，参数的值会从容器中取，此处的 properties 就等于从刚才的 HttpEncodingProperties 类中取，而 HttpEncodingProperties 类中的属性又和配置文件中的属性一一映射，就相当于是把配置文件中配置的属性值给应用起来了，效果相当于<code>@Autowired</code>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(CharacterEncodingFilter.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br></pre></td></tr></table></figure><p><code>@ConditionalOnMissingBean(CharacterEncodingFilter.class)</code><strong>判断容器中有没有这个组件</strong>，<strong>如果容器中不存在该组件，此处就会给容器中添加一个 characterEncodingFilter 组件</strong>。<code>@Configuration</code>+<code>@Bean</code><strong>全注解的方式给容器中添加组件</strong>。</p><p><strong>总结：</strong></p><ul><li><strong>Springboot 启动会加载大量的自动配置类</strong></li><li><strong>根据我们需要的功能导入 Springboot 的 starter，再看这个 starter 对应的自动配置类中配置了哪些组件</strong></li><li><strong>自动配置类给容器中添加组价时会从 properties 类中获取属性值，而 properties 类中的属性又与 application.properties 配置文件中的属性值一一映射，所以我们如果想修改自动配置类的默认配置，可以在 application.properties 配置文件中指定这些属性的值即可。</strong></li></ul><h4 id="2、-Conditional-派生注解"><a href="#2、-Conditional-派生注解" class="headerlink" title="2、@Conditional  派生注解"></a>2、<a href="/Conditional">@Conditional </a> 派生注解</h4><p>作用：<strong>必须是</strong><a href="/Conditional">**@Conditional **</a>** 指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效； **</p><p>| <a href="/Conditional">@Conditional </a><br>扩展注解 | 作用（判断是否满足当前指定条件） |<br>| — | — |<br>| <a href="/ConditionalOnJava">@ConditionalOnJava </a> | 系统的 java 版本是否符合要求 |<br>| <a href="/ConditionalOnBean">@ConditionalOnBean </a> | 容器中存在指定 Bean； |<br>| @ConditionalOnMissingBean | 容器中不存在指定 Bean； |<br>| @ConditionalOnExpression | 满足 SpEL 表达式指定 |<br>| <a href="/ConditionalOnClass">@ConditionalOnClass </a> | 系统中有指定的类 |<br>| @ConditionalOnMissingClass | 系统中没有指定的类 |<br>| @ConditionalOnSingleCandidate | 容器中只有一个指定的 Bean，或者这个 Bean 是首选 Bean |<br>| @ConditionalOnProperty | 系统中指定的属性是否有指定的值 |<br>| @ConditionalOnResource | 类路径下是否存在指定资源文件 |<br>| @ConditionalOnWebApplication | 当前是 web 环境 |<br>| @ConditionalOnNotWebApplication | 当前不是 web 环境 |<br>| <a href="/ConditionalOnJndi">@ConditionalOnJndi </a> | JNDI 存在指定项 |</p><p><strong>自动配置类必须在一定的条件下才能生效；</strong></p><p>如何知道 Sprinigboot 启动时给容器中导入了哪些组件，可以<strong>在配置文件中启动 debug 模式</strong>，让控制台打印自动配置报告，如此可以很方便的知道哪些自动配置类生效与否。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java8 新特性</title>
      <link href="/2021/04/12/yuque/Java8%20%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2021/04/12/yuque/Java8%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java8 的新特性：Lamada 表达式、强大的 Stream API、全新时间日期 API。这新特性使 Java 的运行速度更快、代码更少（Lamada 表达式）、便于并行、最大化减少空指针异常。</p></blockquote><h2 id="1、Lamada-表达式"><a href="#1、Lamada-表达式" class="headerlink" title="1、Lamada 表达式"></a>1、Lamada 表达式</h2><h3 id="1、基础语法"><a href="#1、基础语法" class="headerlink" title="1、基础语法"></a>1、基础语法</h3><p>Java8 中引入了一个新的操作符 “-&gt;”，该操作符称为箭头操作符，箭头操作符将 Lamada 表达式拆分称两部分：</p><ul><li>左侧：Lamada 表达式的参数列表，空参则括号里面什么都不写</li><li>右侧：Lamada 表达式中所需执行的功能，即 Lamada 体</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/webp/576791/1603289238239-5d8d3272-531f-4e00-9a3b-0ec5e13f45ea.webp?x-oss-process=image/resize,w_746#height=132&id=GbE0A&originHeight=132&originWidth=746&originalType=binary%E2%88%B6=1&status=done&style=none&width=746"></p><h4 id="1、语法格式一：无参数，无返回值"><a href="#1、语法格式一：无参数，无返回值" class="headerlink" title="1、语法格式一：无参数，无返回值"></a>1、语法格式一：无参数，无返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; System.out.println(<span class="string">&quot;Hello Lamada!&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="2、语法格式二：有一个参数（小括号可以省略），无返回值"><a href="#2、语法格式二：有一个参数（小括号可以省略），无返回值" class="headerlink" title="2、语法格式二：有一个参数（小括号可以省略），无返回值"></a>2、语法格式二：有一个参数（小括号可以省略），无返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x -&gt; System.out.println(x);</span><br></pre></td></tr></table></figure><h4 id="3、语法格式三：有两个以上参数，有返回值，Lamada-体中有多条语句（只有一条语句时，return-和大括号可以省略）"><a href="#3、语法格式三：有两个以上参数，有返回值，Lamada-体中有多条语句（只有一条语句时，return-和大括号可以省略）" class="headerlink" title="3、语法格式三：有两个以上参数，有返回值，Lamada 体中有多条语句（只有一条语句时，return 和大括号可以省略）"></a>3、语法格式三：有两个以上参数，有返回值，Lamada 体中有多条语句（只有一条语句时，return 和大括号可以省略）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com = (x, y) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;函数式接口&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、语法格式四：Lamada-表达式的参数列表的数据类型可以省略不写，因为-JVM-编译器通过上下文可以推断出数据类型，即”类型推断”"><a href="#4、语法格式四：Lamada-表达式的参数列表的数据类型可以省略不写，因为-JVM-编译器通过上下文可以推断出数据类型，即”类型推断”" class="headerlink" title="4、语法格式四：Lamada 表达式的参数列表的数据类型可以省略不写，因为 JVM 编译器通过上下文可以推断出数据类型，即”类型推断”"></a>4、语法格式四：Lamada 表达式的参数列表的数据类型可以省略不写，因为 JVM 编译器通过上下文可以推断出数据类型，即”类型推断”</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Integer x,Integer y)-&gt; Integer.compare(x, y);</span><br></pre></td></tr></table></figure><h3 id="2、函数式接口"><a href="#2、函数式接口" class="headerlink" title="2、函数式接口"></a>2、函数式接口</h3><p><strong>Lamada 表达式需要 “函数式接口”的支持</strong>，函数式接口：<strong>接口中只有一个抽象方法</strong>。一般在函数式接口上都有个注解 <code>@FunctionalInterface</code> ，该注解的作用类似 <code>@Override</code> 一样告诉编译器这是一个函数式接口，用于编译器期间检测该接口是否仅有一个抽象方法，如果拥有多个则编译不通过。如下图所示<br><img src="https://cdn.nlark.com/yuque/0/2020/webp/576791/1603289238185-a9f52a5d-23aa-4041-bb92-81d28cb699ad.webp#height=136&id=GlZ6e&originHeight=136&originWidth=204&originalType=binary%E2%88%B6=1&status=done&style=none&width=204"></p><h3 id="3、四大内置核心函数式接口"><a href="#3、四大内置核心函数式接口" class="headerlink" title="3、四大内置核心函数式接口"></a>3、四大内置核心函数式接口</h3><ul><li>Consumer<T>：消费型接口，<code>void accept(T t);</code></li><li>Supplier<T>：供给型接口，<code>T get();</code></li><li>Function&lt;T, R&gt;：函数型接口，<code>R apply(T t);</code></li><li>Predicate<T>：断言型接口，<code>boolean test(T t);</code></li></ul><h3 id="4、其他接口"><a href="#4、其他接口" class="headerlink" title="4、其他接口"></a>4、其他接口</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1618835186086-a8003633-c54d-47eb-8a62-376a071ed863.png#height=751&id=kBxFQ&originHeight=751&originWidth=1209&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=1209"></p><h3 id="5、引用"><a href="#5、引用" class="headerlink" title="5、引用"></a>5、引用</h3><p>若 Lamada 表达式体中的内容已有方法实现，则可以使用”方法应用”。<br><strong>Lamada 表达式体中调用方法的参数列表、返回值类型必须与函数式接口中的抽象方法保持一致</strong>。</p><h4 id="1、方法引用"><a href="#1、方法引用" class="headerlink" title="1、方法引用"></a>1、方法引用</h4><h5 id="1、对象-实例方法"><a href="#1、对象-实例方法" class="headerlink" title="1、对象::实例方法"></a>1、对象::实例方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PrintStream ps = System.out;</span><br><span class="line">    Consumer&lt;String&gt; con1 = (s) -&gt; ps.println(s);</span><br><span class="line">    con1.accept(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Consumer&lt;String&gt; con2 = ps::println;</span><br><span class="line">    con2.accept(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、类-静态方法"><a href="#2、类-静态方法" class="headerlink" title="2、类::静态方法"></a>2、类::静态方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; com1 = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line">    System.out.println(com1.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class="line">    System.out.println(com2.compare(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、类-实例方法"><a href="#3、类-实例方法" class="headerlink" title="3、类::实例方法"></a>3、类::实例方法</h5><p>注意：<strong>Lamada 参数列表中的第一个参数是方法的调用者，第二个参数是方法的参数时，才能使用 ClassName::Method</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BiPredicate&lt;String, String&gt; bp1 = (x, y) -&gt; x.equals(y);</span><br><span class="line">    System.out.println(bp1.test(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>));</span><br><span class="line"></span><br><span class="line">    BiPredicate&lt;String, String&gt; bp2 = String::equals;</span><br><span class="line">    System.out.println(bp2.test(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;c&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、构造器引用"><a href="#2、构造器引用" class="headerlink" title="2、构造器引用"></a>2、构造器引用</h4><p>注意：<strong>需要调用的构造器的参数列表要与函数式接口中的抽象方法的参数列表保持一致。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Supplier&lt;Employee&gt; sup = Employee::<span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、Stream-API"><a href="#2、Stream-API" class="headerlink" title="2、Stream API"></a>2、Stream API</h2><h3 id="1、简述"><a href="#1、简述" class="headerlink" title="1、简述"></a>1、简述</h3><p>流（Stream）是数据渠道，用于操作数据源（集合和数组等）所生成的元素序列。<br>“集合讲的是数据，流讲的是计算”。<br>注意：</p><ul><li>Stream 自己不会存储元素</li><li>Stream 不会改变源对象。相反，会返回一个持有结果的新 Stream。</li><li>Stream 操作是延迟执行的。这意味着它们会等到需要结果的时候才会执行。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1618836646217-e24f66ba-cbf6-491c-bfd1-66f1c2b4af85.png#height=427&id=Bzg1M&margin=%5Bobject%20Object%5D&name=image.png&originHeight=427&originWidth=680&originalType=binary%E2%88%B6=1&size=109796&status=done&style=none&width=680" alt="image.png"></p><h3 id="2、创建流的方法"><a href="#2、创建流的方法" class="headerlink" title="2、创建流的方法"></a>2、创建流的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建流</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 集合流</span></span><br><span class="line"><span class="comment">    *  - Collection.stream() 串行流</span></span><br><span class="line"><span class="comment">    *  - Collection.parallelStream() 并行流</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组流</span></span><br><span class="line">    <span class="comment">//Arrays.stream(array)</span></span><br><span class="line">    String[] strings = <span class="keyword">new</span> String[<span class="number">10</span>];</span><br><span class="line">    Stream&lt;String&gt; stream2 = Arrays.stream(strings);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Stream 静态方法</span></span><br><span class="line">    <span class="comment">//Stream.of(...)</span></span><br><span class="line">    Stream&lt;Integer&gt; stream3 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无限流</span></span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">    Stream&lt;Integer&gt; stream4 = Stream.iterate(<span class="number">0</span>, (i) -&gt; ++i+i++);</span><br><span class="line">    stream4.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    Stream.generate(() -&gt; Math.random())</span><br><span class="line">        .limit(<span class="number">5</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、筛选与切片"><a href="#3、筛选与切片" class="headerlink" title="3、筛选与切片"></a>3、筛选与切片</h3><h4 id="1、filter"><a href="#1、filter" class="headerlink" title="1、filter"></a>1、filter</h4><blockquote><p><code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code> 返回此流中匹配元素组成的流</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">numbers</span><br><span class="line">        .stream()</span><br><span class="line">        .filter(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">//过滤掉奇数</span></span><br><span class="line">        .forEach(System.out::println); <span class="comment">// 终端操作，打印结果</span></span><br><span class="line"><span class="comment">// 输出：2 4 6 8 10</span></span><br></pre></td></tr></table></figure><h4 id="2、distinct"><a href="#2、distinct" class="headerlink" title="2、distinct"></a>2、distinct</h4><blockquote><p><code>Stream&lt;T&gt; distinct()</code>通过流所生成的元素的 hashCode() 和 equals() 去除重复元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">                .stream()</span><br><span class="line">                .distinct() <span class="comment">// 去除重复</span></span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"><span class="comment">// 输出: 1234</span></span><br></pre></td></tr></table></figure><h4 id="3、limit"><a href="#3、limit" class="headerlink" title="3、limit"></a>3、limit</h4><blockquote><p>Stream limit(long maxSize) 截取流，返回一个不超过给定长度的流</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">                .stream()</span><br><span class="line">                .limit(<span class="number">3</span>) <span class="comment">// 截取前三个元素</span></span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"><span class="comment">// 输出: 123</span></span><br></pre></td></tr></table></figure><h4 id="4、skip"><a href="#4、skip" class="headerlink" title="4、skip"></a>4、skip</h4><blockquote><p><code>Stream&lt;T&gt; skip(long n)</code> 跳过给定长度的流</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">                .stream()</span><br><span class="line">                .skip(<span class="number">2</span>) <span class="comment">// 跳过前两个元素</span></span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"><span class="comment">// 输出: 345</span></span><br></pre></td></tr></table></figure><h3 id="4、映射"><a href="#4、映射" class="headerlink" title="4、映射"></a>4、映射</h3><h4 id="1、map"><a href="#1、map" class="headerlink" title="1、map"></a>1、map</h4><blockquote><p><code>&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper)</code>接收 Lambda ，将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">numbers</span><br><span class="line">        .stream()</span><br><span class="line">        .map(i -&gt; i + <span class="string">&quot;str &quot;</span>) <span class="comment">// 转换成String</span></span><br><span class="line">        .forEach(System.out::print); <span class="comment">// 终端操作，打印结果</span></span><br><span class="line"><span class="comment">// 输出：1str 2str 3str 4str 5str 6str 7str 8str 9str 10str</span></span><br></pre></td></tr></table></figure><h4 id="2、flatmap"><a href="#2、flatmap" class="headerlink" title="2、flatmap"></a>2、flatmap</h4><blockquote><p><code>&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper)</code>接收一个函数作为参数，将流中的每个值都转换成另一个流，然后把所有流连接一个流，即会将每个元素扁平化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = strings</span><br><span class="line">                .stream() <span class="comment">// 将集合转成流</span></span><br><span class="line">                .map(s -&gt; s.split(<span class="string">&quot;&quot;</span>)) <span class="comment">// 转换成[&#x27;H&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;],[&#x27;W&#x27;,&#x27;o&#x27;,&#x27;r&#x27;,&#x27;l&#x27;,&#x27;d&#x27;] 两个数组</span></span><br><span class="line">                .flatMap(Arrays::stream) <span class="comment">// 将两个数组扁平化成为[&#x27;H&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;,&#x27;W&#x27;,&#x27;o&#x27;,&#x27;r&#x27;,&#x27;l&#x27;,&#x27;d&#x27;]，实际上还是把两个数组再次转成流</span></span><br><span class="line">                .distinct() <span class="comment">// 去除重复元素</span></span><br><span class="line">                .collect(Collectors.toList()); <span class="comment">// 终端操作，转化成集合</span></span><br><span class="line">System.out.println(list);</span><br><span class="line"><span class="comment">// 输出: [H, e, l, o, W, r, d]</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1554080/1619060219136-64248750-f4a2-49f7-b7ce-c902b81f3676.jpeg#height=994&id=Gy3uT&originHeight=994&originWidth=1382&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=1382"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers1 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">List&lt;Integer&gt; numbers2 = Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">Stream.of(numbers1, numbers2) <span class="comment">// 将两个集合转成流</span></span><br><span class="line">        .flatMap(numbers -&gt; numbers.stream()) <span class="comment">// 两个集合流扁平化为[1,2,3,4,5,6]</span></span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line"><span class="comment">// 输出: 1，2，3，4，5，6</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1619060275416-b1a8d4c8-b3ef-4981-b6cd-bcf2f39711d5.png#height=668&id=RCUbP&originHeight=668&originWidth=1544&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=1544"></p><h3 id="5、排序"><a href="#5、排序" class="headerlink" title="5、排序"></a>5、排序</h3><h4 id="1、sorted"><a href="#1、sorted" class="headerlink" title="1、sorted"></a>1、sorted</h4><blockquote><p><code>Stream&lt;T&gt; sorted()</code> 对流中的元素自然排序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">                .stream()</span><br><span class="line">                .sorted() <span class="comment">// 顺序排序</span></span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"><span class="comment">// 输出: 12345</span></span><br></pre></td></tr></table></figure><h4 id="2、sorted-Comparator-com"><a href="#2、sorted-Comparator-com" class="headerlink" title="2、sorted(Comparator com)"></a>2、sorted(Comparator com)</h4><blockquote><p><code>Stream&lt;T&gt; sorted(Comparator com)</code>可以传入一个 Comparator 来实现自己的排序规则</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">                .stream()</span><br><span class="line">                .sorted(Comparator.reverseOrder()) <span class="comment">// 倒序排序</span></span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"><span class="comment">// 输出: 54321</span></span><br></pre></td></tr></table></figure><h3 id="6、查找与匹配"><a href="#6、查找与匹配" class="headerlink" title="6、查找与匹配"></a>6、查找与匹配</h3><h4 id="1、allMatch"><a href="#1、allMatch" class="headerlink" title="1、allMatch"></a>1、allMatch</h4><blockquote><p><code>boolean allMatch(Predicate&lt;? super T&gt; predicate)</code> allMatch：此流的所有元素是都匹配返回 ture，否者为 false</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全部匹配</span></span><br><span class="line">System.out.println(Stream.of(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>).allMatch(i -&gt; i &gt;= <span class="number">5</span>)); <span class="comment">// true</span></span><br><span class="line">System.out.println(Stream.of(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>).allMatch(i -&gt; i &gt; <span class="number">5</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="2、anyMatch"><a href="#2、anyMatch" class="headerlink" title="2、anyMatch"></a>2、anyMatch</h4><blockquote><p><code>boolean anyMatch(Predicate&lt;? super T&gt; predicate)</code> anyMatch：此流的任意元素有一个匹配返回 ture，都不匹配返回 false</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意一个匹配</span></span><br><span class="line">System.out.println(Stream.of(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>).anyMatch(i -&gt; i &gt; <span class="number">5</span>)); <span class="comment">// true</span></span><br><span class="line">System.out.println(Stream.of(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>).anyMatch(i -&gt; i &gt; <span class="number">9</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="3、noneMatch"><a href="#3、noneMatch" class="headerlink" title="3、noneMatch"></a>3、noneMatch</h4><blockquote><p><code>boolean noneMatch(Predicate&lt;? super T&gt; predicate)</code> noneMatch：此流中没有一个元素匹配返回 ture,否者返回 false</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都不匹配</span></span><br><span class="line">System.out.println(Stream.of(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>).noneMatch(i -&gt; i &gt; <span class="number">5</span>)); <span class="comment">// false</span></span><br><span class="line">System.out.println(Stream.of(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>).noneMatch(i -&gt; i &gt; <span class="number">9</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="4、findFirst-findAny"><a href="#4、findFirst-findAny" class="headerlink" title="4、findFirst,findAny"></a>4、findFirst,findAny</h4><blockquote><p><code>Optional&lt;T&gt; findFirst()</code> 返回此流的第一个元素的 Optional，如果流为空，则返回空 Optional。 <code>Optional&lt;T&gt; findAny()</code> 返回此流的任意一个元素的 Optional，如果流为空，则返回空 Optional。 findFirst 在并行流中的执行代价非常大，需要注意</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; first = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">                                .stream().findFirst();</span><br><span class="line">System.out.println(first.get()); <span class="comment">// 输出 1</span></span><br><span class="line">Optional&lt;Integer&gt; any = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">                            .stream().findAny();</span><br><span class="line">System.out.println(any.get()); <span class="comment">// 因为是顺序流，所以输出1</span></span><br></pre></td></tr></table></figure><h3 id="7、规约"><a href="#7、规约" class="headerlink" title="7、规约"></a>7、规约</h3><blockquote><p>聚合操作 sum()、max()、min()、count()调用的都是 reduce <code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</code> 无初始值，按传入的 lambda 的累加规则来聚合数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无默认值，求和</span></span><br><span class="line">Optional&lt;Integer&gt; sum1 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">                            .stream()</span><br><span class="line">                            .reduce((a, b) -&gt; a + b);</span><br><span class="line">System.out.println(sum1.get()); <span class="comment">// 输出：15</span></span><br></pre></td></tr></table></figure><blockquote><p><code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code> 第一个参数为初始值，第二个参数为累加器（归并数据的 lambda）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有默认值，求和</span></span><br><span class="line">Integer sum2 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">                    .stream()</span><br><span class="line">                    .reduce(<span class="number">5</span>, (a, b) -&gt; a + b);</span><br><span class="line">System.out.println(sum2); <span class="comment">// 输出：20</span></span><br><span class="line"><span class="comment">// 求最大值</span></span><br><span class="line">Integer max = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">                    .stream()</span><br><span class="line">                    .reduce(<span class="number">0</span>, Integer::max); <span class="comment">// 也可以写成 reduce(0, (a, b) -&gt; a &gt; b ? a : b);</span></span><br><span class="line">System.out.println(max); <span class="comment">// 输出：20</span></span><br></pre></td></tr></table></figure><h3 id="8、收集"><a href="#8、收集" class="headerlink" title="8、收集"></a>8、收集</h3><blockquote><p><code>&lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector)</code> 收集，对数据做聚合，将流转换为其他形式,比如 List，Map，Integer，Long…但是 Collectors 实用类提供了很多静态方法，可以方便地创建常见收集齐实例。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//个数</span></span><br><span class="line">Long count= employees.stream()</span><br><span class="line">    .collect(Collectors.counting());</span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="comment">//平均值</span></span><br><span class="line">Double avg= employees.stream()</span><br><span class="line">    .collect(Collectors.averagingDouble(Employee::getSalary));</span><br><span class="line">System.out.println(avg);</span><br><span class="line"><span class="comment">//总和</span></span><br><span class="line">Double sum= employees.stream()</span><br><span class="line">    .collect(Collectors.summingDouble(Employee::getSalary));</span><br><span class="line">System.out.println(sum);</span><br><span class="line"><span class="comment">//最大值d的员工</span></span><br><span class="line">Optional&lt;Employee&gt; max = employees.stream()</span><br><span class="line">    .collect(Collectors.maxBy((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));</span><br><span class="line">System.out.println(max.get());</span><br><span class="line"><span class="comment">//最小值</span></span><br><span class="line">Optional&lt;Double&gt; min = employees.stream()</span><br><span class="line">    .map(Employee::getSalary)</span><br><span class="line">    .collect(Collectors.minBy(Double::compare));</span><br><span class="line"><span class="comment">//分组</span></span><br><span class="line">Map&lt;Employee.Status, List&lt;Employee&gt;&gt; map = employees.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(Employee::getStatus));</span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="comment">//多级分组</span></span><br><span class="line">Map&lt;Employee.Status, Map&lt;String, List&lt;Employee&gt;&gt;&gt; map = employees.stream()</span><br><span class="line">    .collect(Collectors.groupingBy(Employee::getStatus, Collectors.groupingBy((e) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.getSalary() &lt;= <span class="number">35</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;青年&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getAge() &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;中年&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;老年&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)));</span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="comment">//分区</span></span><br><span class="line">Map&lt;Boolean, List&lt;Employee&gt;&gt; map = employees.stream()</span><br><span class="line">    .collect(Collectors.partitioningBy((e) -&gt; e.getSalary() &gt; <span class="number">8000</span>));</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备一些初始数据</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructorclass</span></span><br><span class="line">Student &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">Student student1 = <span class="keyword">new</span> Student(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>);</span><br><span class="line">Student student2 = <span class="keyword">new</span> Student(<span class="string">&quot;lisi&quot;</span>, <span class="number">15</span>);</span><br><span class="line">Student student3 = <span class="keyword">new</span> Student(<span class="string">&quot;wangwu&quot;</span>, <span class="number">10</span>);</span><br><span class="line">Student student4 = <span class="keyword">new</span> Student(<span class="string">&quot;zhaoliu&quot;</span>, <span class="number">20</span>);</span><br><span class="line">List&lt;Student&gt; students = Arrays.asList(student1, student2, student3, student4);</span><br><span class="line"><span class="comment">// 如果要取出所有学生的姓名并转成集合可以写成</span></span><br><span class="line">List&lt;String&gt; names = students.stream()</span><br><span class="line">    .map(Student::getName) <span class="comment">// 获取name</span></span><br><span class="line">    .collect(Collectors.toList()); <span class="comment">// 转成List</span></span><br><span class="line">System.out.println(names); <span class="comment">// 输出：[zhangsan, lisi, wangwu, zhaoliu]</span></span><br><span class="line"><span class="comment">// 以年龄为key,姓名为value转成Map可以写成</span></span><br><span class="line">Map&lt;Integer, String&gt; map = students.stream()</span><br><span class="line">    .collect(Collectors.toMap(Student::getAge, Student::getName)); <span class="comment">// 此写法会有问题，如果Map的key重复了，会报java.lang.IllegalStateException: Duplicate key  如果可以确保key不会重复就可以省略第三个参数</span></span><br><span class="line">Map&lt;Integer, String&gt; map = students.stream()</span><br><span class="line">    .collect(Collectors.toMap(Student::getAge, Student::getName, (first, second) -&gt; second)); <span class="comment">// 前面两个参数是映射key和value，第三个参数为如果key重复了要如何处理，是保留旧的还是选择新的</span></span><br><span class="line">System.out.println(map); <span class="comment">// 输出：&#123;20=zhaoliu, 10=wangwu, 15=lisi&#125;  因为zhangsan和zhaoliu的年龄都是20,按照我们的策略，始终选择新的，所以key为20的value是zhaoliu</span></span><br><span class="line">Map&lt;Integer, List&lt;Student&gt;&gt; groupByAge = students.stream()</span><br><span class="line">    .collect(Collectors.groupingBy(Student::getAge)); <span class="comment">// 根据age分组</span></span><br><span class="line">System.out.println(groupByAge);</span><br><span class="line"><span class="comment">// 输出：&#123;20=[Student(name=zhangsan, age=20), Student(name=zhaoliu, age=20)], 10=[Student(name=wangwu, age=10)], 15=[Student(name=lisi, age=15)]&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;R&gt; R collect(Supplier&lt;R&gt; supplier,BiConsumer&lt;R, ? super T&gt; accumulator,BiConsumer&lt;R, R&gt; combiner)</code><br>supplier：定义一个容器<br>accumulator：该容器怎么添加流中的数据<br>combiner：容器如何去聚合</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1619073525504-acae5fb1-e2cc-403e-b7f6-7c97d228599c.png#height=276&id=jHYft&originHeight=276&originWidth=813&originalType=binary%E2%88%B6=1&size=0&status=done&style=none&width=813"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仿Collectors.toList(),简单实现一个toList()</span></span><br><span class="line"><span class="comment">// 1.定义一个List容器</span></span><br><span class="line"><span class="comment">// 2.调用List的add方法将元素添加到容器中</span></span><br><span class="line"><span class="comment">// 3.采用List的addAll方法聚合容器</span></span><br><span class="line">List&lt;Integer&gt; toList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).stream().collect(ArrayList::<span class="keyword">new</span>, List::add, List::addAll);</span><br><span class="line">System.out.println(toList);</span><br><span class="line"><span class="comment">// 输出：[1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// 仿Collectors.toMap(),简单实现toMap()</span></span><br><span class="line"><span class="comment">// 1.定义一个Map容器</span></span><br><span class="line"><span class="comment">// 2.调用Map的merge方法将元素添加到容器中</span></span><br><span class="line"><span class="comment">// 3.采用Map的putAll方法聚合容器</span></span><br><span class="line">Map&lt;Object, Object&gt; map = students.stream()</span><br><span class="line">    .collect(HashMap::<span class="keyword">new</span>,</span><br><span class="line">             (map, element) -&gt; &#123;</span><br><span class="line">                 map.merge(element.getAge(), element.getName(), (u, v) -&gt; &#123;</span><br><span class="line">                     <span class="keyword">return</span> u;</span><br><span class="line">                     <span class="comment">// throw new IllegalStateException(String.format(&quot;Duplicate key %s&quot;, u));</span></span><br><span class="line">                 &#125;);</span><br><span class="line">             &#125;, Map::putAll);</span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="comment">// 输出：&#123;20=zhangsan, 10=wangwu, 15=lisi&#125;</span></span><br></pre></td></tr></table></figure><p>其中，map 中的 merge 方法源码：​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> V <span class="title">merge</span><span class="params">(K key, V value, BiFunction&lt;? <span class="keyword">super</span> V, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(remappingFunction);</span><br><span class="line">    Objects.requireNonNull(value);</span><br><span class="line">    V oldValue = <span class="keyword">this</span>.get(key);</span><br><span class="line">    V newValue = oldValue == <span class="keyword">null</span> ? value : remappingFunction.apply(oldValue, value);</span><br><span class="line">    <span class="keyword">if</span> (newValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.remove(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.put(key, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>merge 方法有三个参数，key：map 中的键，value：使用者传入的值，remappingFunction：BiFunction 函数接口(该接口接收两个值，执行自定义功能并返回最终值)。当 map 中不存在指定的 key 时，便将传入的 value 设置为 key 的值，当 key 存在值时，执行一个方法该方法接收 key 的旧值和传入的 value，执行自定义的方法返回最终结果设置为 key 的值。</p></blockquote><h2 id="3、Optional"><a href="#3、Optional" class="headerlink" title="3、Optional"></a>3、Optional</h2><blockquote><p>java8 添加的容器对象，在一些场景下避免使用 null 检查而设定的类，尽可能避免的 NullPointerException。</p></blockquote><h4 id="1、创建-Optional-实例的静态方法"><a href="#1、创建-Optional-实例的静态方法" class="headerlink" title="1、创建 Optional 实例的静态方法"></a>1、创建 Optional 实例的静态方法</h4><p>Optional 私有了构造函数，只能通过 Optional 对外提供的三个静态方法构造实例</p><h5 id="1、empty"><a href="#1、empty" class="headerlink" title="1、empty"></a>1、empty</h5><blockquote><p><code>public static&lt;T&gt; Optional&lt;T&gt; empty()</code> 返回一个空 Optional 实例</p></blockquote><h5 id="2、of"><a href="#2、of" class="headerlink" title="2、of"></a>2、of</h5><blockquote><p><code>public static &lt;T&gt; Optional&lt;T&gt; of(T value)</code> 创建一个包含非 null 值的 Optional 容器，如果值为 null 会直接抛出 NullPointerException</p></blockquote><h5 id="3、ofNullable"><a href="#3、ofNullable" class="headerlink" title="3、ofNullable"></a>3、ofNullable</h5><blockquote><p><code>public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value)</code> 创建一个可以包含 null 值的 Optional 容器</p></blockquote><h4 id="2、Optional-实例方法"><a href="#2、Optional-实例方法" class="headerlink" title="2、Optional 实例方法"></a>2、Optional 实例方法</h4><h5 id="1、get"><a href="#1、get" class="headerlink" title="1、get"></a>1、get</h5><blockquote><p><code>public T get()</code> 返回 Optional 容器保存的非 null 值，如果值为 null 会抛出 NoSuchElementException</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Object&gt; empty = Optional.empty();</span><br><span class="line">System.out.println(empty.get()); <span class="comment">// 抛NoSuchElementException</span></span><br><span class="line">Optional&lt;Object&gt; nullable = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">System.out.println(nullable.get()); <span class="comment">//  抛NoSuchElementException</span></span><br><span class="line">Optional&lt;Object&gt; non = Optional.ofNullable(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">System.out.println(non.get()); <span class="comment">// 输出：test</span></span><br></pre></td></tr></table></figure><h5 id="2、orElse​"><a href="#2、orElse​" class="headerlink" title="2、orElse​"></a>2、orElse​</h5><blockquote><p><code>public T orElse(T other)</code> 如果存在则返回值，否则返回 other，是否存在的判断为 null 或者是一个 empty</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object data1 = Optional.ofNullable(<span class="keyword">null</span>).orElse(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">System.out.println(data1); <span class="comment">// 输出：data</span></span><br><span class="line">Object data2 = Optional.ofNullable(<span class="string">&quot;data1&quot;</span>).orElse(<span class="string">&quot;data2&quot;</span>);</span><br><span class="line">System.out.println(data2); <span class="comment">// 输出：data1</span></span><br></pre></td></tr></table></figure><h5 id="3、orElseGet"><a href="#3、orElseGet" class="headerlink" title="3、orElseGet"></a>3、orElseGet</h5><blockquote><p><code>public T orElseGet(Supplier&lt;? extends T&gt; other)</code> 如果存在则返回值，否则调用 other 并返回该调用的结果。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object data = Optional.ofNullable(<span class="keyword">null</span>).orElseGet(() -&gt; <span class="string">&quot;data&quot;</span>);</span><br><span class="line">System.out.println(data); <span class="comment">// 输出：data</span></span><br></pre></td></tr></table></figure><h5 id="4、orElse-与-orElseGet-的区别"><a href="#4、orElse-与-orElseGet-的区别" class="headerlink" title="4、orElse 与 orElseGet 的区别"></a>4、orElse 与 orElseGet 的区别</h5><blockquote><p><em>** orElse 即使值不为空的情况下，也会调用 orElse()中的函数，而 orElseGet 是在值为空的情况下才会调用 other 中的函数**</em></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getValue</span><span class="params">(T oldValue, T newValue)</span> </span>&#123;</span><br><span class="line">    System.out.println(newValue);</span><br><span class="line">    <span class="keyword">return</span> newValue;</span><br><span class="line">&#125;</span><br><span class="line">Optional.ofNullable(<span class="string">&quot;a&quot;</span>).orElse(getValue(<span class="string">&quot;test1&quot;</span>));</span><br><span class="line">Optional.ofNullable(<span class="string">&quot;b&quot;</span>).orElseGet(() -&gt; <span class="string">&quot;test2&quot;</span>);</span><br><span class="line"><span class="comment">// 此时会看到控制台输出了test1</span></span><br><span class="line"><span class="comment">// orElse即使值不为空的情况下，也会调用orElse()中的函数，而orElseGet是在值为空的情况下才会调用other中的函数</span></span><br><span class="line"><span class="comment">// 如果有如下代码那么将是致命的</span></span><br><span class="line">User u1 = Optional.ofNullable(user).orElse(userMapper.findUserById(<span class="string">&quot;1&quot;</span>)); <span class="comment">// 1</span></span><br><span class="line">User u2 = Optional.ofNullable(user).orElse(<span class="keyword">new</span> User()); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 哪怕user不为空也会去查询一次数据库，或者user不为空也会创建一个对象，加大了性能消耗，所以在使用时需要注意</span></span><br></pre></td></tr></table></figure><h5 id="5、orElseThrow"><a href="#5、orElseThrow" class="headerlink" title="5、orElseThrow"></a>5、orElseThrow</h5><blockquote><p><code>public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) throws X</code> 如果存在返回包含的值，否则抛出定义的异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当user为空的时候，抛出定义的异常</span></span><br><span class="line">User user = Optional.ofNullable(user).orElseThrow(() -&gt; <span class="keyword">new</span> RuntimeException(<span class="string">&quot;User为空&quot;</span>));</span><br></pre></td></tr></table></figure><h5 id="6、isPresent"><a href="#6、isPresent" class="headerlink" title="6、isPresent"></a>6、isPresent</h5><blockquote><p><code>public boolean isPresent()</code> 如果存在值则返回 true，否则返回 false。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b1 = Optional.empty().isPresent(); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">boolean</span> b2 = Optional.ofNullable(<span class="keyword">null</span>).isPresent(); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">boolean</span> b3 = Optional.ofNullable(<span class="string">&quot;&quot;</span>).isPresent(); <span class="comment">// ture</span></span><br></pre></td></tr></table></figure><h5 id="7、ifPresent"><a href="#7、ifPresent" class="headerlink" title="7、ifPresent"></a>7、ifPresent</h5><blockquote><p><code>public void ifPresent(Consumer&lt;? super T&gt; consumer)</code> 如果存在值，则执行指定的操作，否则不执行任何操作。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional.ofNullable(<span class="keyword">null</span>).ifPresent(System.out::println); <span class="comment">// 不会执行</span></span><br><span class="line">Optional.ofNullable(<span class="string">&quot;data&quot;</span>).ifPresent(System.out::println); <span class="comment">// 输出data</span></span><br></pre></td></tr></table></figure><h5 id="8、filter"><a href="#8、filter" class="headerlink" title="8、filter"></a>8、filter</h5><blockquote><p><code>public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code> 根据给定的条件过滤值，过滤后如果存在值则返回 Optional 包装的值，否则返回空的 Optional。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; str1 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>).filter(element -&gt; element.contains(<span class="string">&quot;123&quot;</span>));</span><br><span class="line">System.out.println(str1); <span class="comment">// 输出：Optional[123456]</span></span><br><span class="line">Optional&lt;String&gt; str2 = Optional.ofNullable(<span class="string">&quot;123456&quot;</span>).filter(element -&gt; element.contains(<span class="string">&quot;789&quot;</span>));</span><br><span class="line">System.out.println(str2); <span class="comment">// 输出：Optional.empty</span></span><br></pre></td></tr></table></figure><h5 id="9、map"><a href="#9、map" class="headerlink" title="9、map"></a>9、map</h5><blockquote><p><code>public&lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper)</code> 如果存在值，就对该值执行 mapping 调用，返回 mapping 后 Optional 包装的值，否则返回空的 Optional。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">10</span>);</span><br><span class="line">Optional&lt;String&gt; name = Optional.of(student).map(Student::getName); <span class="comment">// 返回一个Optional包装的值</span></span><br></pre></td></tr></table></figure><h5 id="10、flatMap"><a href="#10、flatMap" class="headerlink" title="10、flatMap"></a>10、flatMap</h5><blockquote><p><code>public&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)</code> 如果值存在，就对该值执行 mapping 调用，返回一个 Optional 类型的值，否则就返回一个空的 Optional 对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">10</span>);</span><br><span class="line">Optional&lt;Integer&gt; age = Optional.of(student).flatMap(s -&gt; Optional.ofNullable(s.getAge())); <span class="comment">// 返回一个Optional包装的值</span></span><br></pre></td></tr></table></figure><h5 id="11、map-与-flatMap-的区别"><a href="#11、map-与-flatMap-的区别" class="headerlink" title="11、map 与 flatMap 的区别"></a>11、map 与 flatMap 的区别</h5><blockquote><p>map 接受的入参为任意类型，flatMap 接受的入参为 Optional 类型，返回的都是 Optional</p></blockquote><h2 id="4、新时间与日期-API"><a href="#4、新时间与日期-API" class="headerlink" title="4、新时间与日期 API"></a>4、新时间与日期 API</h2><p>待续。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Swagger</title>
      <link href="/2021/04/09/yuque/Swagger/"/>
      <url>/2021/04/09/yuque/Swagger/</url>
      
        <content type="html"><![CDATA[<h2 id="1、简述"><a href="#1、简述" class="headerlink" title="1、简述"></a>1、简述</h2><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 Restful 风格接口的 web 服务。接口的方法，参数和模型紧密继承到服务器端的代码，允许 API 始终保持同步。</p><h2 id="2、导包"><a href="#2、导包" class="headerlink" title="2、导包"></a>2、导包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="3、Swagger-配置"><a href="#3、Swagger-配置" class="headerlink" title="3、Swagger 配置"></a>3、Swagger 配置</h2><h3 id="1、配置类"><a href="#1、配置类" class="headerlink" title="1、配置类"></a>1、配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1618322635966-57df7818-83f7-49ae-91f2-9886094c77c9.png#align=left&display=inline&height=866&margin=%5Bobject%20Object%5D&originHeight=866&originWidth=1338&size=0&status=done&style=none&width=1338"></p><h3 id="2、实例"><a href="#2、实例" class="headerlink" title="2、实例"></a>2、实例</h3><p>通过配置 Docket 实例来配置 Swagger。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、配置-API-文档信息"><a href="#3、配置-API-文档信息" class="headerlink" title="3、配置 API 文档信息"></a>3、配置 API 文档信息</h3><p>通过 <code>apiInfo()</code> 属性来配置文档信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;xiaorang&quot;</span>, <span class="string">&quot;www.xiaorang.top&quot;</span>, <span class="string">&quot;15019474951@163.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(<span class="string">&quot;Simple Admin 后台管理系统接口文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;后台管理系统（技术栈：Springboot+SpringSecurity+SpringDataJpa+Mysql+Redis+Vue+ElementUI）&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;www.xiaorang.top&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1618323306428-4a57a52a-9c3f-4dcf-b6fd-16c697601683.png#align=left&display=inline&height=430&margin=%5Bobject%20Object%5D&name=image.png&originHeight=430&originWidth=793&size=40394&status=done&style=none&width=793" alt="image.png"></p><h3 id="4、配置要扫描的接口"><a href="#4、配置要扫描的接口" class="headerlink" title="4、配置要扫描的接口"></a>4、配置要扫描的接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 配置扫描哪个包的接口</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.intelliws.simpleadmin.controller&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello swagger2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1618324097852-74bd2515-3789-4f6d-84c9-8ee8ef766e3b.png#align=left&display=inline&height=521&margin=%5Bobject%20Object%5D&name=image.png&originHeight=521&originWidth=821&size=45343&status=done&style=none&width=821" alt="image.png"><br>除了上面的通过包路径配置扫描接口外，还可以配置其他方式扫描接口：</p><ul><li>_any()_：扫描所有的接口</li><li>_none()_：不扫描任何接口</li><li><em>withClassAnnotation(</em>)：通过类上的注解进行扫描</li><li><em>withMethodAnnotation(</em>)：通过方法上的注解进行扫描</li></ul><h3 id="5、配置接口扫描过滤"><a href="#5、配置接口扫描过滤" class="headerlink" title="5、配置接口扫描过滤"></a>5、配置接口扫描过滤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 配置扫描哪个包的接口</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.intelliws.simpleadmin.controller&quot;</span>))</span><br><span class="line">                <span class="comment">// 配置扫描过滤哪些接口 此处配置为只扫描以 /hello 开头的请求的接口</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/hello/**&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了上面的通过 ant() 来过滤之外，还可以配置其他方式来过滤扫描接口：</p><ul><li><em>any()：任何请求都扫描</em></li><li><em>none()：任何请求都不扫描</em></li><li><em>regex(</em>)：通过正则表达式控制，返回 true 扫描，false 不扫描</li><li><em>ant(</em>)：通过 <em>ant(</em>) 表达式控制， 返回 true 扫描，false 不扫描</li></ul><h3 id="6、配置是否启用-Swagger"><a href="#6、配置是否启用-Swagger" class="headerlink" title="6、配置是否启用 Swagger"></a>6、配置是否启用 Swagger</h3><p>通过 <code>enable()</code> 方法配置是否启用 Swagger ，如果为 false，Swagger 将不能在浏览器中访问。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1618325338767-83f55430-d6c4-4d0d-870f-9cbbd2ae9791.png#align=left&display=inline&height=71&margin=%5Bobject%20Object%5D&name=image.png&originHeight=71&originWidth=426&size=4873&status=done&style=none&width=426" alt="image.png"><br>如何动态配置在 dev 和 test 环境下启用 Swagger，在 prod 环境下禁用 Swagger 呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断当前是否处于dev和test环境下，如果处于这两个环境下，则返回true,即启用Swagger</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;test&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .enable(flag)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 配置扫描哪个包的接口</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.intelliws.simpleadmin.controller&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、配置-API-分组"><a href="#7、配置-API-分组" class="headerlink" title="7、配置 API 分组"></a>7、配置 API 分组</h3><p>如果没有配置分组，默认是 default。通过 <code>groupName()</code> 方法即可配置分组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断当前是否处于dev和test环境下，如果处于这两个环境下，则返回true,即启用Swagger</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;test&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .enable(flag)</span><br><span class="line">                .groupName(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 配置扫描哪个包的接口</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.intelliws.simpleadmin.controller&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1618326129168-3a97dde0-6f66-462c-b31a-6eed5cc5e099.png#align=left&display=inline&height=549&margin=%5Bobject%20Object%5D&name=image.png&originHeight=549&originWidth=1590&size=63668&status=done&style=none&width=1590" alt="image.png"><br>那么如何配置多个分组呢？配置多个分组只需要配置多个 <code>docket</code> 实例即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断当前是否处于dev和test环境下，如果处于这两个环境下，则返回true,即启用Swagger</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;test&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .enable(flag)</span><br><span class="line">                .groupName(<span class="string">&quot;v1.0&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 配置扫描哪个包的接口</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.intelliws.simpleadmin.controller&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;v2.0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;v3.0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1618326355033-87a299f4-eb24-45cf-84c2-578a9f8f0735.png#align=left&display=inline&height=563&margin=%5Bobject%20Object%5D&name=image.png&originHeight=563&originWidth=1613&size=68116&status=done&style=none&width=1613" alt="image.png"></p><h2 id="4、注解使用"><a href="#4、注解使用" class="headerlink" title="4、注解使用"></a>4、注解使用</h2><ol><li>@Api*()*：用在请求的类上，表示对类的说明<ul><li>tags：说明该类的作用，非空时将覆盖 value 的值</li><li>value：描述类的作用</li><li>hidden：默认为 false，配置为 true 的时候将在文档中隐藏</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags=&quot;登录请求&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>@ApiOperation*()*：用在请求的方法上，说明方法的用途、作用<ul><li>value：说明方法的用途、作用</li><li>notes：方法的备注说明</li><li>hidden：默认为 false，配置为 true 的时候将在文档中隐藏</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;登录接口&quot;, notes=&quot;根据用户名、密码进行登录&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserModel <span class="title">login</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;, required = false)</span> String account,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@RequestParam(value = &quot;pass&quot;, required = false)</span> String password)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>@ApiImplicitParams*()<em>：用在请求的方法上，表示一组请求参数说明；@ApiImplicitParam</em>()<em>：用在@ApiImplicitParams</em>()*注解中，指定一个请求参数的各个方面<ul><li>name：参数名称</li><li>value：参数的说明</li><li>required：参数是否必须传，默认为 false，但路径参数必填</li><li>paramType：参数放在哪个地方；header –&gt; 使用 @RequestHandler 获取请求参数，query –&gt; 使用 @RequestParam 获取请求参数，path –&gt; 使用 @PathVariable 获取请求参数</li><li>dataType：参数类型，默认为 String</li><li>defaultValue：参数的默认值</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;登录接口&quot;, notes=&quot;根据用户名、密码进行登录&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">@ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户名&quot;, required = false, paramType = &quot;query&quot;, dataType = &quot;String&quot;),</span></span><br><span class="line"><span class="meta">@ApiImplicitParam(name = &quot;pass&quot;, value = &quot;密码&quot;, required = false, paramType = &quot;query&quot;, dataType = &quot;String&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserModel <span class="title">login</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;, required = false)</span> String account,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@RequestParam(value = &quot;pass&quot;, required = false)</span> String password)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>@ApiModel*()*：用在 pojo 类上，表示对类的说明<ul><li>value：对类的简要说明</li><li>description：类的描述</li></ul></li><li>@ApiModelProperty*()*：用在 pojo 类的属性上，表示对属性的说明<ul><li>value：对属性的简要说明</li><li>name：允许覆盖属性名称</li><li>allowableValues：限制参数的可接受值。以逗号分隔的列表，范围值，设置最小值/最大值</li><li>dataType：参数的数据类型</li><li>required：参数是否必传，默认为 false</li><li>hidden：允许在模型定义中隐藏该属性</li><li>example：属性的示例</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(value=&quot;系统用户实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 密码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value=&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、全局参数"><a href="#5、全局参数" class="headerlink" title="5、全局参数"></a>5、全局参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SwaggerConfig</span><span class="params">(JwtProperties jwtProperties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.jwtProperties = jwtProperties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断当前是否处于dev和test环境下，如果处于这两个环境下，则返回true,即启用Swagger</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = environment.acceptsProfiles(Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;test&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">        .apiInfo(apiInfo())</span><br><span class="line">        .enable(flag)</span><br><span class="line">        .groupName(<span class="string">&quot;v1.0&quot;</span>)</span><br><span class="line">        .globalOperationParameters(getGlobalOperationParameters())</span><br><span class="line">        .select()</span><br><span class="line">        <span class="comment">// 配置扫描哪个包的接口</span></span><br><span class="line">        .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.intelliws.simpleadmin.controller&quot;</span>))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Parameter&gt; <span class="title">getGlobalOperationParameters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ParameterBuilder parameterBuilder = <span class="keyword">new</span> ParameterBuilder();</span><br><span class="line">    Parameter parameter = parameterBuilder.name(jwtProperties.getHeader())</span><br><span class="line">        .modelRef(<span class="keyword">new</span> ModelRef(<span class="string">&quot;String&quot;</span>))</span><br><span class="line">        .description(<span class="string">&quot;访问请求的令牌&quot;</span>)</span><br><span class="line">        .parameterType(<span class="string">&quot;header&quot;</span>)</span><br><span class="line">        .defaultValue(jwtProperties.getTokenStartWith() + <span class="string">&quot; &quot;</span>)</span><br><span class="line">        .required(<span class="keyword">false</span>)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="keyword">return</span> Collections.singletonList(parameter);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="comment"># 令牌前缀</span></span><br><span class="line">  <span class="attr">token-start-with:</span> <span class="string">Bearer</span></span><br><span class="line">  <span class="comment"># 请求头</span></span><br><span class="line">  <span class="attr">header:</span> <span class="string">Authorization</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1618416862651-15d878cc-6f74-48a1-afab-1d7fca506293.png#align=left&display=inline&height=557&margin=%5Bobject%20Object%5D&name=image.png&originHeight=557&originWidth=1567&size=44898&status=done&style=none&width=1567" alt="image.png"></p><h2 id="6、全局参数-2-token"><a href="#6、全局参数-2-token" class="headerlink" title="6、全局参数 2(token)"></a>6、全局参数 2(token)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(value = &quot;defaultApi1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">defaultApi1</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断当前是否处于dev和test环境下，如果处于这两个环境下，则返回true,即启用Swagger</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = environment.acceptsProfiles(Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;test&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">        .apiInfo(apiInfo())</span><br><span class="line">        .enable(flag)</span><br><span class="line">        .groupName(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">        .select()</span><br><span class="line">        <span class="comment">// 配置扫描哪个包的接口</span></span><br><span class="line">        .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.intelliws.simple.controller&quot;</span>))</span><br><span class="line">        .build()</span><br><span class="line">        .securitySchemes(securitySchemes())</span><br><span class="line">        .securityContexts(securityContexts());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;ApiKey&gt; <span class="title">securitySchemes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;ApiKey&gt; apiKeys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    apiKeys.add(<span class="keyword">new</span> ApiKey(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;header&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> apiKeys;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;SecurityContext&gt; <span class="title">securityContexts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;SecurityContext&gt; securityContexts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    securityContexts.add(</span><br><span class="line">        SecurityContext.builder()</span><br><span class="line">        .securityReferences(defaultAuth())</span><br><span class="line">        .forPaths(PathSelectors.regex(<span class="string">&quot;^(?!auth).*$&quot;</span>))</span><br><span class="line">        .build());</span><br><span class="line">    <span class="keyword">return</span> securityContexts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;SecurityReference&gt; <span class="title">defaultAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AuthorizationScope authorizationScope = <span class="keyword">new</span> AuthorizationScope(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">    AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> AuthorizationScope[<span class="number">1</span>];</span><br><span class="line">    authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">    List&lt;SecurityReference&gt; securityReferences = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    securityReferences.add(<span class="keyword">new</span> SecurityReference(<span class="string">&quot;Authorization&quot;</span>, authorizationScopes));</span><br><span class="line">    <span class="keyword">return</span> securityReferences;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1620093657871-181b1f96-ef70-467c-9709-521a2a08e664.png#align=left&display=inline&height=512&margin=%5Bobject%20Object%5D&name=image.png&originHeight=512&originWidth=1901&size=73096&status=done&style=none&width=1901" alt="image.png"></p><h2 id="7、参考链接"><a href="#7、参考链接" class="headerlink" title="7、参考链接"></a>7、参考链接</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Validation</title>
      <link href="/2021/04/08/yuque/Validation/"/>
      <url>/2021/04/08/yuque/Validation/</url>
      
        <content type="html"><![CDATA[<p><a href="https://beanvalidation.org/2.0/">beanvalidation</a>是一种规范，<a href="http://hibernate.org/validator/documentation/">hibernate-validator</a>是它的最佳实现。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p><code>beanvalidation</code> 所有注解在 <code>javax.validation.constraints</code> 包下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1618107183928-d7333201-583f-4636-8aef-173f5e04d720.png#height=795&id=oRqIE&margin=%5Bobject%20Object%5D&name=image.png&originHeight=795&originWidth=542&originalType=binary%E2%88%B6=1&size=288689&status=done&style=none&width=542" alt="image.png"><br><code>hibernate-validator</code> 所有注解在 <code>org.hibernate.validator.constraints</code> 包下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1618109284302-95cdb927-6069-4632-9aa2-cd2f2702b353.png#height=802&id=xydsG&margin=%5Bobject%20Object%5D&name=image.png&originHeight=802&originWidth=559&originalType=binary%E2%88%B6=1&size=312543&status=done&style=none&width=559" alt="image.png"></p><h2 id="常用注解解释"><a href="#常用注解解释" class="headerlink" title="常用注解解释"></a>常用注解解释</h2><table><thead><tr><th><strong>约束注解</strong></th><th><strong>详细信息</strong></th></tr></thead><tbody><tr><td><code>@Null</code></td><td>被注释的元素必须为 <code>null</code></td></tr><tr><td><code>@NotNull</code></td><td>被注释的元素必须不为 <code>null</code></td></tr><tr><td><code>@AssertTrue</code></td><td>被注释的元素必须为 <code>true</code></td></tr><tr><td><code>@AssertFalse</code></td><td>被注释的元素必须为 <code>false</code></td></tr><tr><td><code>@Min(value)</code></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><code>@Max(value)</code></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><code>@DecimalMin(value)</code></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><code>@DecimalMax(value)</code></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><code>@Size(max, min)</code></td><td>被注释的元素的大小必须在指定的范围内</td></tr><tr><td><code>@Digits (integer, fraction)</code></td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td><code>@Past</code></td><td>被注释的元素必须是一个过去的日期</td></tr><tr><td><code>@Future</code></td><td>被注释的元素必须是一个将来的日期</td></tr><tr><td><code>@Pattern(value)</code></td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td><code>@Email</code></td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td><code>@Length</code></td><td>被注释的字符串的大小必须在指定的范围内</td></tr><tr><td><code>@NotEmpty</code></td><td>被注释的字符串的必须非空</td></tr><tr><td><code>@Range</code></td><td>被注释的元素必须在合适的范围内</td></tr></tbody></table><h2 id="约束与校验器类的绑定原理"><a href="#约束与校验器类的绑定原理" class="headerlink" title="约束与校验器类的绑定原理"></a>约束与校验器类的绑定原理</h2><p>在 <code>org.hibernate.validator.internal.metadata.core.ConstraintHelper</code> 类下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1618109478951-519d5e70-a650-4833-8409-81cf8440a9a9.png#height=683&id=iMtHQ&margin=%5Bobject%20Object%5D&name=image.png&originHeight=683&originWidth=1331&originalType=binary%E2%88%B6=1&size=784437&status=done&style=none&width=1331" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1618109624524-23212fb5-57a7-452c-9e69-90f9fb19f645.png#height=835&id=lLBLU&margin=%5Bobject%20Object%5D&name=image.png&originHeight=835&originWidth=926&originalType=binary%E2%88%B6=1&size=636259&status=done&style=none&width=926" alt="image.png"></p><ul><li>从上述两幅图中可以看出，NotEmpty 注解可以校验字符串，集合，Map，数组类型的属性，而为了满足一个注解可以校验多种类型的数据，所有需要为这个注解适配多个对应的校验器。</li><li>注解名称是 xxx，那么校验器的名称就是 xxxValidator。</li></ul><h2 id="自定义消息模板"><a href="#自定义消息模板" class="headerlink" title="自定义消息模板"></a>自定义消息模板</h2><p>消息模板中可以使用 el 表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;名字不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min(value = 18, message = &quot;年龄小于&#123;value&#125;,不得进入&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h2><p>注解上不区分组的话，会使用默认的组：<code>javax.validation.groups.Default</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;名字不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min(value = 18, message = &quot;年龄小于&#123;value&#125;,不得进入&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特别注意的地方：如果使用了某个组进行校验的话，那么默认的组就不会进行校验。</strong>就比如校验 Update 组，那么就算 name 名字为空也不会再校验。如果想在对某个组进行校验，默认的组同时被校验的话，可以让 <strong>分组接口继承 Default 接口即可。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;名字不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min(value = 18, message = &quot;年龄小于&#123;value&#125;,不得进入&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="级联校验"><a href="#级联校验" class="headerlink" title="级联校验"></a>级联校验</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String no;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;名字不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min(value = 18, message = &quot;年龄小于&#123;value&#125;,不得进入&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;年级不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Grade grade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>被引用对象加上 @valid 注解才能完成级联校验</strong>。也就是说在校验 User 对象里的属性的时候，能一起校验 Grade 对象。</p><h2 id="自定义校验规则"><a href="#自定义校验规则" class="headerlink" title="自定义校验规则"></a>自定义校验规则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;名字不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min(value = 18, message = &quot;年龄小于&#123;value&#125;,不得进入&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;年级不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Grade grade;</span><br><span class="line">    <span class="meta">@UserStatus</span></span><br><span class="line">    <span class="keyword">private</span> Integer userStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Constraint(validatedBy = &#123;UserStatusValidator.class&#125;)</span></span><br><span class="line"><span class="meta">@Target(&#123;FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UserStatus &#123;</span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;用户状态不正确，值必须在1001或者1002或者1003中&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserStatusValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">UserStatus</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(Integer value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="number">1001</span>, <span class="number">1002</span>, <span class="number">1003</span>).contains(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当现有的约束注解不满足实际项目需要时，可以仿照现有的 <code>NotEmpty </code> 注解和 <code>NotEmptyValidatorForArray</code> 校验器进行改造以下，就可以实现自己的校验规则。</p><h2 id="Validated-自动校验"><a href="#Validated-自动校验" class="headerlink" title="@Validated 自动校验"></a>@Validated 自动校验</h2><p>在 springboot 中可以使用在控制器中给每个需要进行校验的方法的参数前加上 <code>@Validated</code> 注解，在参数校验不通过的时候会自动抛出 <code>BindException</code> 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(<span class="meta">@Validated(&#123;User.Update.class&#125;)</span> User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;更新成功！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(value = BindException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">entityException</span><span class="params">(BindException e)</span> </span>&#123;</span><br><span class="line">        String msg = e.getBindingResult().getFieldError().getDefaultMessage();</span><br><span class="line">        <span class="keyword">return</span>  RespBean.error(HttpStatus.BAD_REQUEST.value(), msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面包屑导航</title>
      <link href="/2021/04/06/yuque/%E9%9D%A2%E5%8C%85%E5%B1%91%E5%AF%BC%E8%88%AA/"/>
      <url>/2021/04/06/yuque/%E9%9D%A2%E5%8C%85%E5%B1%91%E5%AF%BC%E8%88%AA/</url>
      
        <content type="html"><![CDATA[<h2 id="el-breadcrumb-item"><a href="#el-breadcrumb-item" class="headerlink" title="el-breadcrumb-item"></a>el-breadcrumb-item</h2><ul><li>el-breadcrumb：面包屑导航容器，<code>separator</code> 控制面包屑导航文本中分割线</li><li>el-breadcrumb-item：面包屑子项目，可以使用 <code>to</code> 属性切换路由，slot 中可以包含 <code>a</code> 标签来跳转到外链</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-breadcrumb separator=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">el-breadcrumb-item</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; path: &#x27;/&#x27; &#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>活动管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span>活动列表<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">el-breadcrumb-item</span>&gt;</span>活动详情<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span></span><br><span class="line">&lt;/el-breadcrumb&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>to</code> 属性和 <code>a</code> 标签切换路由区别是：<code>to</code> 属性切换路由是动态替换 <code>App.vue</code> 中的路由内容，而 <code>a</code> 标签切换路由会刷新页面。</p><h2 id="路由与面包屑导航映射"><a href="#路由与面包屑导航映射" class="headerlink" title="路由与面包屑导航映射"></a>路由与面包屑导航映射</h2><h3 id="生成面包屑导航"><a href="#生成面包屑导航" class="headerlink" title="生成面包屑导航"></a>生成面包屑导航</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getBreadcrumb</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> matched = <span class="built_in">this</span>.$route.matched.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.meta &amp;&amp; item.meta.title)</span><br><span class="line">  <span class="keyword">const</span> first = matched[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.isDashboard(first)) &#123;</span><br><span class="line">    matched = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/dashboard&#x27;</span>, <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;Dashboard&#x27;</span> &#125;&#125;].concat(matched)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.levelList = matched.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.meta &amp;&amp; item.meta.title &amp;&amp; item.meta.breadcrumb !== <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面包屑导航实现的逻辑如下：</p><ul><li>获取 <code>this.$route.matched</code>，并过滤其中不包含 <code>item.meta.title</code> 的项，生成新的面包屑导航数组 <code>matched</code></li><li>判断 <code>matched</code> 第一项是否为 dashboard，如果不是，则添加 dashboard 为面包屑导航的第一项</li><li>再次过滤 <code>matched</code> 中 <code>item.meta.title</code> 为空的项和 <code>item.meta.breadcrumb</code> 为 false 的项。</li></ul><p><code>isDashboard</code> 实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isDashboard</span>(<span class="params">route</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = route &amp;&amp; route.name</span><br><span class="line">  <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> name.trim().toLocaleLowerCase() === <span class="string">&#x27;Dashboard&#x27;</span>.toLocaleLowerCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="渲染面包屑导航"><a href="#渲染面包屑导航" class="headerlink" title="渲染面包屑导航"></a>渲染面包屑导航</h3><p>面包屑导航模板源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-breadcrumb <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;app-breadcrumb&quot;</span> separator=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;breadcrumb&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-breadcrumb-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in levelList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.path&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;item.redirect===&#x27;noRedirect&#x27;||index==levelList.length-1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;no-redirect&quot;</span>&gt;</span>&#123;&#123; item.meta.title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-else</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;handleLink(item)&quot;</span>&gt;</span>&#123;&#123; item.meta.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span></span><br><span class="line">&lt;/el-breadcrumb&gt;</span><br></pre></td></tr></table></figure><p><code>el-breadcrumb-item</code> 内做了一个判断，如果是最后一个元素或者路由的 <code>redirect</code> 属性指定为 <code>noRedirect</code> 则不会生成链接，否则将使用 <code>a</code> 标签生成链接，但是这里使用了 <code>@click.prevent</code> 阻止了默认 <code>a</code> 标签事件触发，而使用自定义的 <code>handleLink</code> 方法处理路由跳转，<code>handleLink</code> 方法源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">handleLink</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; redirect, path &#125; = item</span><br><span class="line">  <span class="keyword">if</span> (redirect) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$router.push(redirect)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.$router.push(<span class="built_in">this</span>.pathCompile(path))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>pathCompile</code> 用于解决动态路由的匹配问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>重定向</title>
      <link href="/2021/04/06/yuque/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
      <url>/2021/04/06/yuque/%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="登录重定向"><a href="#登录重定向" class="headerlink" title="登录重定向"></a>登录重定向</h2><p>login.vue 中对 $route 进行监听：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="attr">$route</span>: &#123;</span><br><span class="line">    <span class="attr">handler</span>: <span class="function"><span class="keyword">function</span>(<span class="params">route</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> query = route.query</span><br><span class="line">      <span class="keyword">if</span> (query) &#123;</span><br><span class="line">        <span class="built_in">this</span>.redirect = query.redirect</span><br><span class="line">        <span class="built_in">this</span>.otherQuery = <span class="built_in">this</span>.getOtherQuery(query)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>this.getOtherQuery(query)</code>的用途是获取除 redirect 之外的其他查询条件，登录成功后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store</span><br><span class="line">  .dispatch(<span class="string">&quot;user/login&quot;</span>, <span class="built_in">this</span>.loginForm)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="built_in">this</span>.redirect || <span class="string">&quot;/&quot;</span>, <span class="attr">query</span>: <span class="built_in">this</span>.otherQuery &#125;);</span><br><span class="line">    <span class="built_in">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>其中，完成重定向的代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="built_in">this</span>.redirect || <span class="string">&quot;/&quot;</span>, <span class="attr">query</span>: <span class="built_in">this</span>.otherQuery &#125;);</span><br></pre></td></tr></table></figure><h2 id="重定向组件"><a href="#重定向组件" class="headerlink" title="重定向组件"></a>重定向组件</h2><p>vue-element-admin 提供了专门的重定向组件，源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; params, query &#125; = <span class="built_in">this</span>.$route</span><br><span class="line">    <span class="keyword">const</span> &#123; path &#125; = params</span><br><span class="line">    <span class="built_in">this</span>.$router.replace(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> + path, query &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h() <span class="comment">// avoid warning message</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>重定向组件配置了动态路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/redirect&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Layout,</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/redirect/:path*&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/redirect/index&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个细节：<code>path: &#39;/redirect/:path*&#39;</code>，表示匹配零个或多个路由。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>侧边栏</title>
      <link href="/2021/04/04/yuque/%E4%BE%A7%E8%BE%B9%E6%A0%8F/"/>
      <url>/2021/04/04/yuque/%E4%BE%A7%E8%BE%B9%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="源码位置"><a href="#源码位置" class="headerlink" title="源码位置"></a>源码位置</h2><ul><li>sidebar 引用自 layout 组件，layout 组件位于 <code>src/layout/index.vue</code></li><li>sidebar 组件源码位于 <code>src/layout/components/Sidebar/index.vue</code></li></ul><h2 id="el-menu-用法解析"><a href="#el-menu-用法解析" class="headerlink" title="el-menu 用法解析"></a>el-menu 用法解析</h2><p>侧边栏的核心就是将根据权限过滤后的 router 和 el-menu 组件进行映射，所以熟悉 el-menu 是理解 sidebar 的起点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">class</span>=<span class="string">&quot;tac&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-menu</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">default-active</span>=<span class="string">&quot;1-1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">background-color</span>=<span class="string">&quot;#545c64&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">text-color</span>=<span class="string">&quot;#fff&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">active-text-color</span>=<span class="string">&quot;#ffd04b&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">mode</span>=<span class="string">&quot;vertical&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">unique-opened</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:collapse</span>=<span class="string">&quot;isCollapse&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:collapse-transition</span>=<span class="string">&quot;false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">class</span>=<span class="string">&quot;el-menu-vertical-demo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        @<span class="attr">open</span>=<span class="string">&quot;handleOpen&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        @<span class="attr">close</span>=<span class="string">&quot;handleClose&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        @<span class="attr">select</span>=<span class="string">&quot;handleSelect&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      &gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-location&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航一<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">el-menu-item-group</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>分组一<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">el-menu-item-group</span> <span class="attr">title</span>=<span class="string">&quot;分组2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1-4&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>选项4<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-4-1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>导航二<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-1&quot;</span>&gt;</span>选项2-1<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">disabled</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-document&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>导航三<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-setting&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>导航四<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;isCollapse = !isCollapse&quot;</span>&gt;</span>折叠<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">isCollapse</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">handleSelect</span>(<span class="params">key, keyPath</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;handleSelect&#x27;</span>, key, keyPath)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">handleOpen</span>(<span class="params">key, keyPath</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;handleOpen&#x27;</span>, key, keyPath)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">handleClose</span>(<span class="params">key, keyPath</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;handleClose&#x27;</span>, key, keyPath)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="el-menu"><a href="#el-menu" class="headerlink" title="el-menu"></a>el-menu</h3><p>el-menu 表示菜单容器组件：</p><ul><li><code>default-active</code>：激活的菜单，注意如果存在子菜单，需要填入子菜单 ID</li><li><code>unique-opened</code>：是否保持只打开一个菜单</li><li><code>mode</code>：菜单展现形式，分为 vertical 和 horizontal 两种</li><li><code>collapse</code>：是否水平折叠收起菜单（仅在 mode 为 vertical 时可用）</li><li><code>collapse-transition</code>：是否显示折叠动画</li><li><code>@select</code>：点击菜单事件，keyPath 代表菜单的访问路径，如：1-4-1 菜单的点击日志为：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handleSelect <span class="number">1</span>-<span class="number">4</span>-<span class="number">1</span> (<span class="number">3</span>) [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1-4&quot;</span>, <span class="string">&quot;1-4-1&quot;</span>]</span><br></pre></td></tr></table></figure><p>获取 keyPath 我们可以获取 1-4-1 菜单的所有父级菜单 ID</p><ul><li><code>@open</code>：父菜单打开时触发事件</li><li><code>@close</code>：父菜单关闭时触发事件</li></ul><h3 id="el-submenu"><a href="#el-submenu" class="headerlink" title="el-submenu"></a>el-submenu</h3><p>子菜单容器，el-submenu 和 el-menu 不同，el-menu 表示整个菜单，而 el-submenu 表示一个具体菜单，只是该菜单还包含了子菜单。<br>el-submenu 可以通过定制 slot 的 title 来自定义菜单样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-location&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航一<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br></pre></td></tr></table></figure><p>el-submenu 容器内 default 的 slot 用来存放子菜单，包含三种子菜单组件：</p><ul><li><code>el-menu-item-group</code>：菜单分组，为一组菜单添加一个标题，<code>el-menu-item-group</code> 容器内容需要存放 <code>el-menu-item</code> 组件，支持通过 title 的 slot 来定制标题样式</li><li><code>el-submenu</code>：<code>el-submenu</code> 支持循环嵌套 <code>el-submenu</code>，这使得超过两级子组件得以实现</li><li><code>el-menu-item</code>：子菜单组件</li></ul><h2 id="sidebar-源码分析"><a href="#sidebar-源码分析" class="headerlink" title="sidebar 源码分析"></a>sidebar 源码分析</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;has-logo&#x27;:showLogo&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">logo</span> <span class="attr">v-if</span>=<span class="string">&quot;showLogo&quot;</span> <span class="attr">:collapse</span>=<span class="string">&quot;isCollapse&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-scrollbar</span> <span class="attr">wrap-class</span>=<span class="string">&quot;scrollbar-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-menu</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:default-active</span>=<span class="string">&quot;activeMenu&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:collapse</span>=<span class="string">&quot;isCollapse&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:background-color</span>=<span class="string">&quot;variables.menuBg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:text-color</span>=<span class="string">&quot;variables.menuText&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:unique-opened</span>=<span class="string">&quot;false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:active-text-color</span>=<span class="string">&quot;variables.menuActiveText&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:collapse-transition</span>=<span class="string">&quot;false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">mode</span>=<span class="string">&quot;vertical&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      &gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">sidebar-item</span> <span class="attr">v-for</span>=<span class="string">&quot;route in permission_routes&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;route.path&quot;</span> <span class="attr">:item</span>=<span class="string">&quot;route&quot;</span> <span class="attr">:base-path</span>=<span class="string">&quot;route.path&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Logo <span class="keyword">from</span> <span class="string">&#x27;./Logo&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> SidebarItem <span class="keyword">from</span> <span class="string">&#x27;./SidebarItem&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> variables <span class="keyword">from</span> <span class="string">&#x27;@/styles/variables.scss&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123; SidebarItem, Logo &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ...mapGetters([</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="string">&#x27;permission_routes&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="string">&#x27;sidebar&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    ]),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">activeMenu</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> route = <span class="built_in">this</span>.$route</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> &#123; meta, path &#125; = route</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// if set path, the sidebar will highlight the path you set</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (meta.activeMenu) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> meta.activeMenu</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> path</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">showLogo</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.settings.sidebarLogo</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">variables</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> variables</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">isCollapse</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> !<span class="built_in">this</span>.sidebar.opened</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>activeMenu：通过 meta.activeMenu 属性，指定路由对应的高亮菜单，meta.activeMenu 需要提供一个合法的路由，否则将不会生效</li><li>isCollapse：NavBar 中点击按钮，会修改 Cookie 中的 sidebarStatus，从 vuex 取值时会将 sidebarStatus 转为 boolean，并判断默认是否需要收缩左侧菜单栏</li><li>showLogo：判断 settings.js 中的配置项是否需要展示 Logo</li><li>variables：从 <code>@/styles/variables.scss</code>中获取 scss 对象，从而获取样式</li></ul><h2 id="sidebar-item-源码分析"><a href="#sidebar-item-源码分析" class="headerlink" title="sidebar-item 源码分析"></a>sidebar-item 源码分析</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;!item.hidden&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;hasOneShowingChild(item.children,item) &amp;&amp; (!onlyOneChild.children||onlyOneChild.noShowingChildren)&amp;&amp;!item.alwaysShow&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">app-link</span> <span class="attr">v-if</span>=<span class="string">&quot;onlyOneChild.meta&quot;</span> <span class="attr">:to</span>=<span class="string">&quot;resolvePath(onlyOneChild.path)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">:index</span>=<span class="string">&quot;resolvePath(onlyOneChild.path)&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;submenu-title-noDropdown&#x27;:!isNest&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">item</span> <span class="attr">:icon</span>=<span class="string">&quot;onlyOneChild.meta.icon||(item.meta&amp;&amp;item.meta.icon)&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;onlyOneChild.meta.title&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">app-link</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">v-else</span> <span class="attr">ref</span>=<span class="string">&quot;subMenu&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;resolvePath(item.path)&quot;</span> <span class="attr">popper-append-to-body</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">v-if</span>=<span class="string">&quot;item.meta&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;item.meta &amp;&amp; item.meta.icon&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;item.meta.title&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">sidebar-item</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">v-for</span>=<span class="string">&quot;child in item.children&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:key</span>=<span class="string">&quot;child.path&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:is-nest</span>=<span class="string">&quot;true&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:item</span>=<span class="string">&quot;child&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:base-path</span>=<span class="string">&quot;resolvePath(child.path)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">class</span>=<span class="string">&quot;nest-menu&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; isExternal &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/validate&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&#x27;./Item&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> AppLink <span class="keyword">from</span> <span class="string">&#x27;./Link&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> FixiOSBug <span class="keyword">from</span> <span class="string">&#x27;./FixiOSBug&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;SidebarItem&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123; Item, AppLink &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">mixins</span>: [FixiOSBug],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// route object</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">item</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">required</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">isNest</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">Boolean</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">default</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">basePath</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// To fix https://github.com/PanJiaChen/vue-admin-template/issues/237</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// <span class="doctag">TODO:</span> refactor with render function</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.onlyOneChild = <span class="literal">null</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">hasOneShowingChild</span>(<span class="params">children = [], parent</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> showingChildren = children.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (item.hidden) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="comment">// Temp set(will be used if only has one showing child)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.  = item</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">return</span> <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// When there is only one child router, the child router is displayed by default</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (showingChildren.length === <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// Show parent if there are no child router to display</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (showingChildren.length === <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.onlyOneChild = &#123; ... parent, <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">noShowingChildren</span>: <span class="literal">true</span> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">resolvePath</span>(<span class="params">routePath</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (isExternal(routePath)) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> routePath</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (isExternal(<span class="built_in">this</span>.basePath)) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> <span class="built_in">this</span>.basePath</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> path.resolve(<span class="built_in">this</span>.basePath, routePath)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="side-item-props-分析"><a href="#side-item-props-分析" class="headerlink" title="side-item props 分析"></a>side-item props 分析</h3><ul><li>item：路由对象</li><li>basePath：路由路径</li></ul><h3 id="sidebar-item-展示逻辑分析"><a href="#sidebar-item-展示逻辑分析" class="headerlink" title="sidebar-item 展示逻辑分析"></a>sidebar-item 展示逻辑分析</h3><ul><li>通过 item.hidden 控制菜单是否展示</li><li>通过 <code>hasOneShowingChild(item.children,item)&amp;&amp;(!onlyOneChild.children||onlyOneChild.noShowingChildren)&amp;&amp;!item.alwaysShow</code> 逻辑判断 template 菜单是否展示，template 表示单一菜单；<ul><li><code>hasOneShowingChild</code>：判断是否只有一个需要展示的子路由</li><li><code>!onlyOneChild.children||onlyOneChild.noShowingChildren</code>：判断需要展示的子菜单是否包含 children 属性，如果包含，则说明子菜单可能存在孙子菜单，此时则需要再判断 noShowingChildren 属性</li><li><code>!item.alwaysShow</code>：判断路由中是否存在 alwaysShow 属性，如果存在，则返回 false，不展示 template 菜单，也就是说只要配置了 alwaysShow 属性就会直接进入 el-submenu 组件</li></ul></li></ul><p><code>hasOneShowingChild</code> 方法源码详解<br>入参：</p><ul><li>children：router 对象的 children 属性</li><li>item：router 对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">hasOneShowingChild</span>(<span class="params">children = [], parent</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> showingChildren = children.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果 children 中的路由包含 hidden 属性，则返回 false</span></span><br><span class="line">    <span class="keyword">if</span> (item.hidden) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 将子路由赋值给 onlyOneChild，用于只包含一个路由时展示</span></span><br><span class="line">      <span class="built_in">this</span>.onlyOneChild = item</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果过滤后，只包含展示一个路由，则返回 true</span></span><br><span class="line">  <span class="keyword">if</span> (showingChildren.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果没有子路由需要展示，则将 onlyOneChild 的 path 设置空路由，并添加 noShowingChildren 属性，表示虽然有子路由，但是不需要展示子路由</span></span><br><span class="line">  <span class="keyword">if</span> (showingChildren.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.onlyOneChild = &#123; ...parent, <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">noShowingChildren</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回 false，表示不需要展示子路由，或者超过一个需要展示的子路由</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果展示 template 组件，首先会展示 app-link 组件，然后是 el-menu-item 最里面嵌套的是 item 组件：</li></ul><p>item 组件需要路由 meta 中包含的 title 和 icon 属性，否则将渲染内容为空的 vnode 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;app-link v-<span class="keyword">if</span>=<span class="string">&quot;onlyOneChild.meta&quot;</span> :to=<span class="string">&quot;resolvePath(onlyOneChild.path)&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">:index</span>=<span class="string">&quot;resolvePath(onlyOneChild.path)&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;submenu-title-noDropdown&#x27;:!isNest&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">:icon</span>=<span class="string">&quot;onlyOneChild.meta.icon||(item.meta&amp;&amp;item.meta.icon)&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;onlyOneChild.meta.title&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span></span><br><span class="line">&lt;/app-link&gt;</span><br></pre></td></tr></table></figure><ul><li>如果 template 菜单不展示，则展示 el-submenu 菜单，el-submenu 逻辑中采用了嵌套组件的做法，将 sidebar-item 嵌套在 el-submenu 中：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-submenu v-<span class="keyword">else</span> ref=<span class="string">&quot;subMenu&quot;</span> :index=<span class="string">&quot;resolvePath(item.path)&quot;</span> popper-append-to-body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">v-if</span>=<span class="string">&quot;item.meta&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;item.meta &amp;&amp; item.meta.icon&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;item.meta.title&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">sidebar-item</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">v-for</span>=<span class="string">&quot;child in item.children&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">:key</span>=<span class="string">&quot;child.path&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">:is-nest</span>=<span class="string">&quot;true&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">:item</span>=<span class="string">&quot;child&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">:base-path</span>=<span class="string">&quot;resolvePath(child.path)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">class</span>=<span class="string">&quot;nest-menu&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  /&gt;</span></span></span><br><span class="line">&lt;/el-submenu&gt;</span><br></pre></td></tr></table></figure><p>el-submenu 中的 sidebar-item 有两点区别：</p><ul><li>第一是传入 is-nest 参数</li><li>第二是传入 base-path 参数</li></ul><h2 id="app-link-源码分析"><a href="#app-link-源码分析" class="headerlink" title="app-link 源码分析"></a>app-link 源码分析</h2><p>app-link 是一个动态组件，通过解析 to 参数，如果包含 http 前缀则变成一个 a 标签，否则变成一个 router-link 组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- eslint-disable vue/<span class="built_in">require</span>-component-is --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind</span>=<span class="string">&quot;linkProps(to)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; isExternal &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/validate&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">to</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">required</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">linkProps</span>(<span class="params">url</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (isExternal(url)) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">is</span>: <span class="string">&#x27;a&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">href</span>: url,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">target</span>: <span class="string">&#x27;_blank&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">rel</span>: <span class="string">&#x27;noopener&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">is</span>: <span class="string">&#x27;router-link&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">to</span>: url</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">isExternal 函数通过一个正则表达式匹配 http 链接：</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isExternal</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^(https?:|mailto:|tel:)/</span>.test(path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="item-组件源码分析"><a href="#item-组件源码分析" class="headerlink" title="item 组件源码分析"></a>item 组件源码分析</h2><p>item 组件通过 定义 render 函数完成组件渲染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;MenuItem&#x27;</span>,</span><br><span class="line">  <span class="attr">functional</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">icon</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h, context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; icon, title &#125; = context.props</span><br><span class="line">    <span class="keyword">const</span> vnodes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (icon) &#123;</span><br><span class="line">      vnodes.push(<span class="xml"><span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">icon-class</span>=<span class="string">&#123;icon&#125;/</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (title) &#123;</span><br><span class="line">      vnodes.push(<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>&#123;(title)&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vnodes</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>sidebar：sidebar 主要包含 el-menu 容器组件，el-menu 中遍历 vuex 中的 routes，生成 sidebar-item 组件。sidebar-item 主要配置项如下：<ul><li>activeMenu：根据当前路由的 meta.activeMenu 属性控制侧边栏中高亮菜单</li><li>isCollapse：根据 Cookie 的 sidebarStatus 控制侧边栏是否折叠</li><li>variables：通过 <code>@/styles/variables.scss</code> 填充 el-menu 的基本样式</li></ul></li><li>sidebar-item：<ul><li>第一部分是当只需要展示一个 children 或者没有 children 时进行展示，展示的组件包括：<ul><li>app-link：动态组件，path 为链接时，显示 a 标签，path 为路由时，显示 router-link 组件</li><li>el-menu-item：菜单项，当 sidebar-item 为非 nest 组件时，el-menu-item 会增加 submenu-title-noDropdown 的 class</li><li>item：el-menu-item 里的内容，主要是 icon 和 title，当 title 为空时，整个菜单项将不会展示</li></ul></li><li>第二部分时当 children 超过两项时进行展示，展示的组件包括：<ul><li>el-submenu：el-submenu 迭代嵌套了 sidebar-item 组件，在 sidebar-item 组件中有两点变化：<ul><li>设置 is-nest 属性为 true</li><li>根据 child.path 生成了 base=path 属性传入 sidebar-item 组件</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>路由权限</title>
      <link href="/2021/04/04/yuque/%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90/"/>
      <url>/2021/04/04/yuque/%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h2 id="路由处理逻辑分析"><a href="#路由处理逻辑分析" class="headerlink" title="路由处理逻辑分析"></a>路由处理逻辑分析</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1617505665355-d7b03b00-4d9a-4452-947b-fbd4b125dfe1.png#align=left&display=inline&height=1270&margin=%5Bobject%20Object%5D&originHeight=1270&originWidth=1898&size=0&status=done&style=none&width=1898"></p><h3 id="路由场景分析"><a href="#路由场景分析" class="headerlink" title="路由场景分析"></a>路由场景分析</h3><ul><li>已获取 token：<ul><li>访问 <code>/login</code>：重定向到 <code>/</code></li><li>访问 <code>/login?redirect=/xxx</code>：重定向到 <code>/xxx</code></li><li>访问 <code>/login</code> 以外的路由：直接访问 <code>/xxx</code></li></ul></li><li>未获取 token：<ul><li>访问 <code>/login</code>：直接访问 <code>/login</code></li><li>访问 <code>/login</code> 以外的路由：如访问 <code>/dashboard</code>，实际访问路径为 <code>/login?redirect?%2Fdashboard</code>，登录后会直接重定向 <code>/dashboard</code></li></ul></li></ul><h3 id="路由逻辑源码"><a href="#路由逻辑源码" class="headerlink" title="路由逻辑源码"></a>路由逻辑源码</h3><p>第一步，main.js 中加载了全局路由守卫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./permission&quot;</span>; <span class="comment">// permission control</span></span><br></pre></td></tr></table></figure><p>第二步，permission 定义了全局路由守卫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="keyword">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 启动进度条</span></span><br><span class="line">  NProgress.start();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改页面标题</span></span><br><span class="line">  <span class="built_in">document</span>.title = getPageTitle(to.meta.title);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从 Cookie 获取 Token</span></span><br><span class="line">  <span class="keyword">const</span> hasToken = getToken();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断 Token 是否存在</span></span><br><span class="line">  <span class="keyword">if</span> (hasToken) &#123;</span><br><span class="line">    <span class="comment">// 如果当前路径为 login 则直接重定向至首页</span></span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">      next(&#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span> &#125;);</span><br><span class="line">      NProgress.done();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 判断用户的角色是否存在</span></span><br><span class="line">      <span class="keyword">const</span> hasRoles = store.getters.roles &amp;&amp; store.getters.roles.length &gt; <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 如果用户角色存在，则直接访问</span></span><br><span class="line">      <span class="keyword">if</span> (hasRoles) &#123;</span><br><span class="line">        next();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 异步获取用户的角色</span></span><br><span class="line">          <span class="keyword">const</span> &#123; roles &#125; = <span class="keyword">await</span> store.dispatch(<span class="string">&quot;user/getInfo&quot;</span>);</span><br><span class="line">          <span class="comment">// 根据用户角色，动态生成路由</span></span><br><span class="line">          <span class="keyword">const</span> accessRoutes = <span class="keyword">await</span> store.dispatch(</span><br><span class="line">            <span class="string">&quot;permission/generateRoutes&quot;</span>,</span><br><span class="line">            roles</span><br><span class="line">          );</span><br><span class="line">          <span class="comment">// 调用 router.addRoutes 动态添加路由</span></span><br><span class="line">          router.addRoutes(accessRoutes);</span><br><span class="line">          <span class="comment">// 使用 replace 访问路由，不会在 history 中留下记录</span></span><br><span class="line">          next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="comment">// 移除 Token 数据</span></span><br><span class="line">          <span class="keyword">await</span> store.dispatch(<span class="string">&quot;user/resetToken&quot;</span>);</span><br><span class="line">          <span class="comment">// 显示错误提示</span></span><br><span class="line">          Message.error(error || <span class="string">&quot;Has Error&quot;</span>);</span><br><span class="line">          <span class="comment">// 重定向至登录页面</span></span><br><span class="line">          next(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>);</span><br><span class="line">          NProgress.done();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果访问的 URL 在白名单中，则直接访问</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.indexOf(to.path) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果访问的 URL 不在白名单中，则直接重定向到登录页面，并将访问的 URL 添加到 redirect 参数中</span></span><br><span class="line">      next(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>);</span><br><span class="line">      NProgress.done();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 停止进度条</span></span><br><span class="line">  NProgress.done();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="动态路由分析"><a href="#动态路由分析" class="headerlink" title="动态路由分析"></a>动态路由分析</h2><h3 id="动态路由流程图"><a href="#动态路由流程图" class="headerlink" title="动态路由流程图"></a>动态路由流程图</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/1554080/1617507738295-77912493-4b47-4c9c-942b-40365fb45650.jpeg#align=left&display=inline&height=1700&margin=%5Bobject%20Object%5D&originHeight=1700&originWidth=1260&size=0&status=done&style=none&width=1260"></p><h3 id="动态路由源码分析"><a href="#动态路由源码分析" class="headerlink" title="动态路由源码分析"></a>动态路由源码分析</h3><p>生成动态路由的源码位于 <code>src/store/modules/permission.js</code> 中的 <code>generateRoutes</code> 方法，源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; asyncRoutes, constantRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">generateRoutes</span>(<span class="params">&#123; commit &#125;, roles</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 返回 Promise 对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> accessedRoutes</span><br><span class="line">    <span class="keyword">if</span> (roles.includes(<span class="string">&#x27;admin&#x27;</span>)) &#123;</span><br><span class="line">      <span class="comment">// 如果角色中包含 admin，则直接跳过判断，直接将 asyncRoutes 全部返回</span></span><br><span class="line">      accessedRoutes = asyncRoutes || []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果角色中没有包含 admin，则调用 filterAsyncRoutes 过滤路由</span></span><br><span class="line">      accessedRoutes = filterAsyncRoutes(asyncRoutes, roles)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将路由保存到 vuex 中</span></span><br><span class="line">    commit(<span class="string">&#x27;SET_ROUTES&#x27;</span>, accessedRoutes)</span><br><span class="line">    resolve(accessedRoutes)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SET_ROUTES</code> 方法源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SET_ROUTES: <span class="function">(<span class="params">state, routes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 将 routes 保存到 state 中的 addRoutes</span></span><br><span class="line">  state.addRoutes = routes;</span><br><span class="line">  <span class="comment">// 将 routes 集成到 src/router/index.js 的 constantRoutes 中</span></span><br><span class="line">  state.routes = constantRoutes.concat(routes);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>路由过滤的方法 <code>filterAsyncRoutes</code> 源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params <span class="variable">routes</span></span> - 异步加载的路由</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params <span class="variable">roles</span></span> - 用户的角色，数组形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">filterAsyncRoutes</span>(<span class="params">routes, roles</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历全部路由</span></span><br><span class="line">  routes.forEach(<span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 对路由进行浅拷贝，注意 children 不会拷贝，因为不需要对 children 进行判断，所以可以使用浅拷贝</span></span><br><span class="line">    <span class="keyword">const</span> tmp = &#123; ...route &#125;;</span><br><span class="line">    <span class="comment">// 检查用户角色是否具备访问路由的权限</span></span><br><span class="line">    <span class="keyword">if</span> (hasPermission(roles, tmp)) &#123;</span><br><span class="line">      <span class="comment">// 当路由具有访问权限时，判断路由是否具备 children 属性</span></span><br><span class="line">      <span class="keyword">if</span> (tmp.children) &#123;</span><br><span class="line">        <span class="comment">// 当路由包含 children 时，对 children 迭代调用 filterAsyncRoutes 方法</span></span><br><span class="line">        tmp.children = filterAsyncRoutes(tmp.children, roles);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 当路由具有访问权限时，将 tmp 保存到 res 中</span></span><br><span class="line">      res.push(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查权限方法 <code>hasPermission</code> 源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPermission</span>(<span class="params">roles, route</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 检查路由是否包含 meta 和 meta.roles 属性</span></span><br><span class="line">  <span class="keyword">if</span> (route.meta &amp;&amp; route.meta.roles) &#123;</span><br><span class="line">    <span class="comment">// 判断 route.meta.roles 中是否包含用户角色 roles 中的任何一个权限，如果包含则返回 true，否则为 false</span></span><br><span class="line">    <span class="keyword">return</span> roles.some(<span class="function">(<span class="params">role</span>) =&gt;</span> route.meta.roles.includes(role));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果路由没有 meta 或 meta.roles 属性，则视为该路由不需要进行权限控制，所有用户对该路由都具有访问权限</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关库分析"><a href="#相关库分析" class="headerlink" title="相关库分析"></a>相关库分析</h2><h3 id="NProgress"><a href="#NProgress" class="headerlink" title="NProgress"></a>NProgress</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NProgress.start();</span><br><span class="line">NProgress.done();</span><br></pre></td></tr></table></figure><p>showSpinner 可以控制右侧的环形进度条是否显示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NProgress.configure(&#123; <span class="attr">showSpinner</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="关于路由处理"><a href="#关于路由处理" class="headerlink" title="关于路由处理"></a>关于路由处理</h3><ul><li>vue-element-admin 对所有的访问的路由进行拦截</li><li>访问路由时会从 Cookie 中获取 token，判断 token 是否存在：<ul><li>如果 token 存在，将根据用户角色生成动态路由，然后访问路由，生成对应的页面组件。这里有一个特例，即用户访问 <code>/login</code> 时会重定向至 <code>/</code> 路由；</li><li>如果 token 不存在，则会判断路由是否在白名单中，如果在白名单中将直接访问，否则说明该路由需要登录才能访问，此时会将路由生成一个 redirect 参数 传入 login 组件，实际访问的路由为：<code>/login?redirect=/xxx</code></li></ul></li></ul><h3 id="关于动态路由和权限校验"><a href="#关于动态路由和权限校验" class="headerlink" title="关于动态路由和权限校验"></a>关于动态路由和权限校验</h3><ul><li>vue-element-admin 将路由分为：constantRoutes 和 asyncRoutes</li><li>用户登录系统时，会动态生成路由，其中 constantRoutes 必然包含，asyncRoutes 会进行过滤；</li><li>asyncRoutes 过滤的逻辑是看路由下是否包含 meta 和 meta.roles 属性，如果没有该属性，所以这是一个通用路由，不需要进行权限校验；如果包含 roles 属性则会判断用户的角色是否命中路由中的任意一个权限，如果命中，则将路由保存下来，如果未命中，则直接将该路由舍弃；</li><li>asyncRoutes 处理完毕后，会和 constantRoutes 合并未一个新的路由对象，并保存到 vuex 的 permission/routes 中;</li><li>用户登录系统后，侧边栏会从 vuex 中获取 <code>state.permission.routes</code>，根据该路由动态渲染用户菜单。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用户登录</title>
      <link href="/2021/04/04/yuque/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/"/>
      <url>/2021/04/04/yuque/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="登录流程分析"><a href="#登录流程分析" class="headerlink" title="登录流程分析"></a>登录流程分析</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1617499102436-6e982315-8349-4d8b-98eb-9372d364a375.png#align=left&display=inline&height=1024&margin=%5Bobject%20Object%5D&originHeight=1024&originWidth=2072&size=0&status=done&style=none&width=2072"></p><h2 id="界面简化"><a href="#界面简化" class="headerlink" title="界面简化"></a>界面简化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;loginForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;loginForm&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;loginRules&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-form&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span> <span class="attr">label-position</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Login Form<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;svg-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">icon-class</span>=<span class="string">&quot;user&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">ref</span>=<span class="string">&quot;username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">v-model</span>=<span class="string">&quot;loginForm.username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">name</span>=<span class="string">&quot;username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">tabindex</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-tooltip</span> <span class="attr">v-model</span>=<span class="string">&quot;capsTooltip&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Caps lock is On&quot;</span> <span class="attr">placement</span>=<span class="string">&quot;right&quot;</span> <span class="attr">manual</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;svg-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">icon-class</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">:key</span>=<span class="string">&quot;passwordType&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">ref</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">v-model</span>=<span class="string">&quot;loginForm.password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">:type</span>=<span class="string">&quot;passwordType&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">tabindex</span>=<span class="string">&quot;2&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            @<span class="attr">keyup.native</span>=<span class="string">&quot;checkCapslock&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            @<span class="attr">blur</span>=<span class="string">&quot;capsTooltip = false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            @<span class="attr">keyup.enter.native</span>=<span class="string">&quot;handleLogin&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;show-pwd&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showPwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">:icon-class</span>=<span class="string">&quot;passwordType === &#x27;password&#x27; ? &#x27;eye&#x27; : &#x27;eye-open&#x27;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;margin-bottom:30px;&quot;</span> @<span class="attr">click.native.prevent</span>=<span class="string">&quot;handleLogin&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="逻辑简化"><a href="#逻辑简化" class="headerlink" title="逻辑简化"></a>逻辑简化</h2><ul><li>删除 SocialSign 组件引用</li><li>删除 src/views/login/components 目录</li><li>删除 afterQRScan</li><li>删除 created 和 destroyed</li></ul><h2 id="组件分析"><a href="#组件分析" class="headerlink" title="组件分析"></a>组件分析</h2><h3 id="布局分析"><a href="#布局分析" class="headerlink" title="布局分析"></a>布局分析</h3><ul><li><p>el-form 容器，包含 usename 和 password 两个 el-form-item，el-form 主要属性：</p><ul><li>model 为 loginForm</li><li>rules 为 loginRules</li></ul></li><li><p>password 使用了 el-tooltip 提示，当用户打开大小写的时候，会进行提示，主要属性：</p><ul><li>manual：手动控制模式，设置为 true 后，mouseenter 和 mouseleave 事件将不会生效</li><li>placement：提示出现的位置</li></ul></li><li><p>password 对应的 el-input 主要属性：</p><ul><li><code>@keyup.native=&quot;checkCapslock&quot;</code>键盘按键时绑定 checkCapslock 事件</li><li><code>@keyup.enter.native=&quot;handleLogin&quot;</code>监听键盘 enter 按下后的事件<blockquote><p>这里绑定 <code>@keyup</code> 事件时需要添加 <code>.native</code> 修饰符，这是因为我们的事件绑定在 el-input 组件上，所以如果不添加 <code>.native</code> 修饰符，事件将无法绑定到原生的 input 标签上</p></blockquote></li></ul></li><li><p>包含一个 el-button，点击时调用 <code>handleLogin</code> 方法，并触发 loading 效果</p></li></ul><h3 id="checkCapslock-方法"><a href="#checkCapslock-方法" class="headerlink" title="checkCapslock 方法"></a>checkCapslock 方法</h3><p><code>checkCapslock</code> 方法的主要用户是监听用户键盘输入，显示提示文字的判断逻辑如下：<br>当按下去的 key 不是组合键并且在 A 和 Z 之间的话就提示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">checkCapslock</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; key &#125; = e</span><br><span class="line">  <span class="built_in">this</span>.capsTooltip = key &amp;&amp; key.length === <span class="number">1</span> &amp;&amp; (key &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; key &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="handleLogin-方法"><a href="#handleLogin-方法" class="headerlink" title="handleLogin 方法"></a>handleLogin 方法</h3><p><code>handleLogin</code> 方法处理流程如下：</p><ul><li>调用 el-form 的 <code>validate</code> 方法对 rules 进行验证；</li><li>如果验证通过之后，则会调用 vuex 的 <code>user/login</code> action 进行登录验证；</li><li>登录验证通过之后，会重定向到 redirect 路由，如果 redirect 路由不存在，则直接重定向到 <code>/</code> 路由。<blockquote><p>这里需要注意的是：由于 vuex 中的 user 模块指定了 namespaced 为 true，所以 dispatch 时需要加上 namespace，否则将无法调用 vuex 中的 action</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">handleLogin</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$refs.loginForm.validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">true</span></span><br><span class="line">      <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;user/login&#x27;</span>, <span class="built_in">this</span>.loginForm)</span><br><span class="line">        .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="built_in">this</span>.redirect || <span class="string">&#x27;/&#x27;</span>, <span class="attr">query</span>: <span class="built_in">this</span>.otherQuery &#125;)</span><br><span class="line">        <span class="built_in">this</span>.loading = <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">        .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loading = <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;error submit!!&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="user-login-方法"><a href="#user-login-方法" class="headerlink" title="user/login 方法"></a>user/login 方法</h3><p><code>user/login</code> 方法调用了 login API，传入 username 和 password 参数，请求成功后会从 reponse 中获取 token，然后将 token 保存到 Cookie 中，之后返回。如果请求失败，将调用 reject 方法，交由我们自定义的 request 模块来处理异常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user login</span></span><br><span class="line"><span class="function"><span class="title">login</span>(<span class="params">&#123; commit &#125;, userInfo</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, password &#125; = userInfo</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    login(&#123; <span class="attr">username</span>: username.trim(), <span class="attr">password</span>: password &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = response</span><br><span class="line">      commit(<span class="string">&#x27;SET_TOKEN&#x27;</span>, data.token)</span><br><span class="line">      setToken(data.token)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>login API 的方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/vue-element-admin/user/login&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    data,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了 request 方法，它是一个基于 axios 封装的库，目前我们的 <code>/user/login</code> 接口是通过 mock 实现的，用户数据位于 <code>/mock/user.js</code></p><h3 id="request-库用法分析"><a href="#request-库用法分析" class="headerlink" title="request 库用法分析"></a>request 库用法分析</h3><p>request 库使用了 axios 的手动实例化方法 create 来封装请求，要理解其中的用法，需要首先学习 <a href="http://www.axios-js.com/zh-cn/docs/">axios </a>库的用法</p><ul><li>创建实例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.env.VUE_APP_BASE_API, <span class="comment">// url = base url + request url</span></span><br><span class="line">  <span class="comment">// withCredentials: true, // send cookies when cross-domain requests</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="comment">// request timeout</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>配置请求拦截器</li></ul><p>如果 vuex 中有 token，则在每次请求时将 token 放到请求头中，便于后端识别该用户是否登录以及是否有权限访问该接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request interceptor</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something before request is sent</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (store.getters.token) &#123;</span><br><span class="line">      <span class="comment">// let each request carry token</span></span><br><span class="line">      <span class="comment">// [&#x27;X-Token&#x27;] is a custom headers key</span></span><br><span class="line">      <span class="comment">// please modify it according to the actual situation</span></span><br><span class="line">      config.headers[<span class="string">&quot;X-Token&quot;</span>] = getToken();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something with request error</span></span><br><span class="line">    <span class="built_in">console</span>.log(error); <span class="comment">// for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>配置响应拦截器</li></ul><p>这里的响应状态码后续得根据自己项目中后端返回的状态码来进行修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// response interceptor</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * If you want to get http information such as headers or status</span></span><br><span class="line"><span class="comment">   * Please return  response =&gt; response</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Determine the request status by custom code</span></span><br><span class="line"><span class="comment">   * Here is just an example</span></span><br><span class="line"><span class="comment">   * You can also judge the status by HTTP Status Code</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if the custom code is not 20000, it is judged as an error.</span></span><br><span class="line">    <span class="keyword">if</span> (res.code !== <span class="number">20000</span>) &#123;</span><br><span class="line">      Message(&#123;</span><br><span class="line">        <span class="attr">message</span>: res.message || <span class="string">&quot;Error&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">        <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span>,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;</span></span><br><span class="line">      <span class="keyword">if</span> (res.code === <span class="number">50008</span> || res.code === <span class="number">50012</span> || res.code === <span class="number">50014</span>) &#123;</span><br><span class="line">        <span class="comment">// to re-login</span></span><br><span class="line">        MessageBox.confirm(</span><br><span class="line">          <span class="string">&quot;You have been logged out, you can cancel to stay on this page, or log in again&quot;</span>,</span><br><span class="line">          <span class="string">&quot;Confirm logout&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">confirmButtonText</span>: <span class="string">&quot;Re-Login&quot;</span>,</span><br><span class="line">            <span class="attr">cancelButtonText</span>: <span class="string">&quot;Cancel&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        ).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          store.dispatch(<span class="string">&quot;user/resetToken&quot;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            location.reload();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(res.message || <span class="string">&quot;Error&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;err&quot;</span> + error); <span class="comment">// for debug</span></span><br><span class="line">    Message(&#123;</span><br><span class="line">      <span class="attr">message</span>: error.message,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="登录细节分析"><a href="#登录细节分析" class="headerlink" title="登录细节分析"></a>登录细节分析</h3><h4 id="细节一：页面启动后自动聚焦"><a href="#细节一：页面启动后自动聚焦" class="headerlink" title="细节一：页面启动后自动聚焦"></a>细节一：页面启动后自动聚焦</h4><p>检查用户名或密码是否位空，如果发现为空，则自动聚焦：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.loginForm.username === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$refs.username.focus()</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.loginForm.password === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$refs.password.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="细节二：显示密码后自动聚焦"><a href="#细节二：显示密码后自动聚焦" class="headerlink" title="细节二：显示密码后自动聚焦"></a>细节二：显示密码后自动聚焦</h4><p>切换密码显示状态后，自动聚焦到 password 输入框：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">showPwd</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.passwordType === <span class="string">&#x27;password&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.passwordType = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.passwordType = <span class="string">&#x27;password&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$refs.password.focus()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="细节三：通过-reduce-过滤对象属性"><a href="#细节三：通过-reduce-过滤对象属性" class="headerlink" title="细节三：通过 reduce 过滤对象属性"></a>细节三：通过 reduce 过滤对象属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> query = &#123;</span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&quot;/book/list&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;sam&quot;</span>,</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;1234&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 直接删除 query.redirect，会直接改动 query</span></span><br><span class="line"><span class="comment">// delete query.redirect</span></span><br><span class="line"><span class="comment">// 通过浅拷贝实现属性过滤</span></span><br><span class="line"><span class="comment">// const _query = Object.assign(&#123;&#125;, query)</span></span><br><span class="line"><span class="comment">// delete _query.redirect</span></span><br><span class="line"><span class="keyword">const</span> _query = <span class="built_in">Object</span>.keys(query).reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (cur !== <span class="string">&quot;redirect&quot;</span>) &#123;</span><br><span class="line">    acc[cur] = query[cur];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> acc;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(query, _query);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端框架搭建</title>
      <link href="/2021/04/03/yuque/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/04/03/yuque/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><blockquote><p><a href="https://gitee.com/panjiachen/vue-element-admin">查看</a> vue-element-admin 源码</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/panjiachen/vue<span class="literal">-element</span><span class="literal">-admin</span>.git simple<span class="literal">-admin</span><span class="literal">-web</span></span><br><span class="line"><span class="built_in">cd</span> simple<span class="literal">-admin</span><span class="literal">-web</span></span><br><span class="line">npm i</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="项目精简"><a href="#项目精简" class="headerlink" title="项目精简"></a>项目精简</h2><ul><li>删除 views 中文件夹，保留以下文件夹</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1617441545940-81c08753-645d-4293-bf3e-46eede31aaa8.png#align=left&display=inline&height=874&margin=%5Bobject%20Object%5D&name=image.png&originHeight=874&originWidth=458&size=55878&status=done&style=none&width=458" alt="image.png"></p><ul><li>对 src/router/index 进行相应修改，以及删除 src/router/modules 文件夹</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/redirect&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: Layout,</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/redirect/:path(.*)&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/redirect/index&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/login/index&quot;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/auth-redirect&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/login/auth-redirect&quot;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/404&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/error-page/404&quot;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/401&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/error-page/401&quot;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: Layout,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/dashboard&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;dashboard&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/dashboard/index&quot;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;Dashboard&quot;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;Dashboard&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;dashboard&quot;</span>, <span class="attr">affix</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>删除动态路由只剩下最后一个 404 路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRoutes = [</span><br><span class="line">  <span class="comment">// 404 page must be placed at the end !!!</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>, <span class="attr">redirect</span>: <span class="string">&quot;/404&quot;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>删除 src/vendor 文件夹</li></ul><h2 id="项目全局配置"><a href="#项目全局配置" class="headerlink" title="项目全局配置"></a>项目全局配置</h2><p>在 src/settings 文件中进行全局配置：</p><ul><li>title：站点标题</li><li>showSettings：是否显示右侧悬浮配置按钮</li><li>tagsView：是否显示页面标签功能条</li><li>fixedHeader：是否将头部固定</li><li>sidebarLogo：菜单栏是否显示 Logo</li><li>errorLog：默认显示错误日志环境</li></ul><h2 id="源码调试"><a href="#源码调试" class="headerlink" title="源码调试"></a>源码调试</h2><p>启动项目之后，配置一个 JavaScript Debug，URL 填写项目启动之后的地址，之后就可以在 webstorm 中想调试的地方打上断点，运行的时候就会在断点的位置停住，操作方式和 idea 一样，这里不再赘述。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1617496631276-9f99dbc7-bce0-4586-be9d-2efd820975b7.png#align=left&display=inline&height=728&margin=%5Bobject%20Object%5D&name=image.png&originHeight=728&originWidth=1083&size=79395&status=done&style=none&width=1083" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1617496971711-eef6742e-ef76-4e5d-8ea5-b76497233808.png#align=left&display=inline&height=923&margin=%5Bobject%20Object%5D&name=image.png&originHeight=923&originWidth=1388&size=160508&status=done&style=none&width=1388" alt="image.png"></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ul><li>api：接口请求</li><li>assets：静态资源</li><li>components：通用组件</li><li>directive：自定义指令</li><li>filters：自定义过滤器</li><li>icons：图标组件</li><li>layout：布局组件</li><li>router：路由配置</li><li>store：状态管理</li><li>styles：自定义样式</li><li>utils：通用工具方法<ul><li>auth.js：token 存取</li><li>permission.js：权限检查</li><li>request.js：axios 请求封装</li><li>index.js：工具方法</li></ul></li><li>views：页面</li><li>permission.js：登录认证和路由跳转</li><li>settings.js：全局配置</li><li>main.js：全局入口文件</li><li>App.vue：全局入口组件</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web端文件直传阿里OSS</title>
      <link href="/2021/03/12/yuque/web%E7%AB%AF%E6%96%87%E4%BB%B6%E7%9B%B4%E4%BC%A0%E9%98%BF%E9%87%8COSS/"/>
      <url>/2021/03/12/yuque/web%E7%AB%AF%E6%96%87%E4%BB%B6%E7%9B%B4%E4%BC%A0%E9%98%BF%E9%87%8COSS/</url>
      
        <content type="html"><![CDATA[<h2 id="1、STS-临时授权访问-OSS"><a href="#1、STS-临时授权访问-OSS" class="headerlink" title="1、STS 临时授权访问 OSS"></a>1、<a href="https://help.aliyun.com/document_detail/100624.htm?spm=a2c4g.11186623.2.5.64596d13Wa7CXp#concept-xzh-nzk-2gb">STS 临时授权访问 OSS</a></h2><blockquote><p>OSS 可以通过阿里云 STS（Security Token Service）进行临时授权访问。通过 STS，可以为第三方应用或子用户（即用户身份由自己管理的用户）颁发一个自定义时效和权限的访问凭证。</p></blockquote><h3 id="1、使用场景"><a href="#1、使用场景" class="headerlink" title="1、使用场景"></a>1、使用场景</h3><p>对于您本地身份系统所管理的用户，例如您的 App 的用户、您的企业本地账号、第三方 App 的用户，将这部分用户称为联盟用户。此外，联盟用户还可以是您创建的能访问您的阿里云资源应用程序的用户。这些联盟用户可能需要直接访问 OSS 资源。</p><p>对于这部分联盟用户，通过阿里云 STS 服务为阿里云账号（或 RAM 用户）提供临时访问权限管理。您不需要透露云账号（或 RAM 用户）的长期密钥（如登录密码、AccessKey），只需要生成一个临时访问凭证给联盟用户使用即可。这个凭证的访问权限及有效期限都可以由您自定义。您不需要关心权限撤销问题，临时访问凭证过期后会自动失效。</p><p>通过 STS 生成的临时访问凭证包括安全令牌 （SecurityToken）、临时访问密钥 STS AK（AccessKeyId 和 AccessKeySecret）。使用 AccessKey 方法与您在使用阿里云账户或 RAM 用户 AccessKey 发送请求时的方法相同。需要注意的是在每个向 OSS 发送的请求中必须携带安全令牌。</p><h3 id="2、实现原理"><a href="#2、实现原理" class="headerlink" title="2、实现原理"></a>2、实现原理</h3><p>以一个移动 App 举例。假设你是一个移动 App 开发者，打算使用阿里云 OSS 服务来保存 App 的终端用户数据，并且保证每个 App 用户之间的数据隔离，放置一个 App 用户获取到其他 App 用户的数据。你可以使用 STS 授权用户直接访问 OSS。<br>使用 STS 授权用户直接访问 OSS 的流程如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1615528114268-df911d88-9768-4f71-be22-43adeb2493d1.png#align=left&display=inline&height=314&margin=%5Bobject%20Object%5D&originHeight=314&originWidth=948&size=0&status=done&style=none&width=948"></p><ol><li><p>App 用户登录。App 用户和云账号无关，它是 App 的终端用户，App 服务器支持 App 用户登录。对于每个有效的 App 用户来说，需要 App 服务器能定义出每个 App 用户的最小访问权限。</p></li><li><p>App 服务器请求 STS 服务获取一个安全令牌（SecurityToken）。在调用 STS 之前，App 服务器需要确定 App 用户的最小访问权限（用 RAM Policy 来自定义授权策略）以及凭证的过期时间。然后通过扮演角色（AssumeRole）来获取一个代表角色身份的安全令牌（SecurityToken）。</p></li><li><p>STS 返回给 App 服务器一个临时访问凭证，包括一个安全令牌（SecurityToken）、临时访问密钥（AccessKeyId 和 AccessKeySecret）以及过期时间。</p></li><li><p>App 服务器将临时访问凭证返回给 App 客户端，App 客户端可以缓存这个凭证。当凭证失效时，App 客户端需要向 App 服务器申请新的临时访问凭证。例如，临时访问凭证有效期为 1 小时，那么 App 客户端可以每 30 分钟向 App 服务器请求更新临时访问凭证。</p></li><li><p>App 客户端使用本地缓存的临时访问凭证去请求 OSS API。OSS 收到访问请求后，会通过 STS 服务来验证访问凭证，正确响应用户请求。</p></li></ol><h3 id="3、操作步骤"><a href="#3、操作步骤" class="headerlink" title="3、操作步骤"></a>3、操作步骤</h3><h4 id="1、创建子账号"><a href="#1、创建子账号" class="headerlink" title="1、创建子账号"></a>1、创建子账号</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1615528941418-f5bd986f-04d8-454c-ad57-ed1e41d31770.png#align=left&display=inline&height=508&margin=%5Bobject%20Object%5D&name=image.png&originHeight=508&originWidth=994&size=47878&status=done&style=none&width=994" alt="image.png"><br>复制保存一下创建用户的 accessKeyId 和 accessKeySecret，后面代码中会用到，然后点击添加权限，为其添加 <code>AliyunSTSAssumeRoleAccess</code> 权限。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1615529074861-4d6aaf54-423d-4855-ab32-ecb240bd95d3.png#align=left&display=inline&height=143&margin=%5Bobject%20Object%5D&name=image.png&originHeight=143&originWidth=1688&size=17980&status=done&style=none&width=1688" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1615529194000-42543ebe-bfba-4eeb-93d7-f2d1bfaf58de.png#align=left&display=inline&height=883&margin=%5Bobject%20Object%5D&name=image.png&originHeight=883&originWidth=875&size=65839&status=done&style=none&width=875" alt="image.png"></p><h4 id="2、创建权限策略"><a href="#2、创建权限策略" class="headerlink" title="2、创建权限策略"></a>2、创建权限策略</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Action&quot;</span>: [<span class="string">&quot;oss:PutObject&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;Resource&quot;</span>: [<span class="string">&quot;acs:oss:*:*:bucketName&quot;</span>, <span class="string">&quot;acs:oss:*:*:bucketName/*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1615529446470-66ad9354-a67f-49eb-a5b2-68049d4f34ad.png#align=left&display=inline&height=882&margin=%5Bobject%20Object%5D&name=image.png&originHeight=882&originWidth=1086&size=78984&status=done&style=none&width=1086" alt="image.png"></p><h4 id="3、创建角色并记录角色-ARN"><a href="#3、创建角色并记录角色-ARN" class="headerlink" title="3、创建角色并记录角色 ARN"></a>3、创建角色并记录角色 ARN</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1615529666359-37f357ec-1aa9-4012-b953-3589ea0ad3eb.png#align=left&display=inline&height=888&margin=%5Bobject%20Object%5D&name=image.png&originHeight=888&originWidth=619&size=42147&status=done&style=none&width=619" alt="image.png"><br>为创建的角色添加第二步创建的自定义权限策略：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1615529765971-25ba235c-3d2c-45c7-ba7e-deed72932be8.png#align=left&display=inline&height=412&margin=%5Bobject%20Object%5D&name=image.png&originHeight=412&originWidth=619&size=23517&status=done&style=none&width=619" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1615529852487-896854e4-3776-4c83-8dcf-fbce75220496.png#align=left&display=inline&height=872&margin=%5Bobject%20Object%5D&name=image.png&originHeight=872&originWidth=833&size=60581&status=done&style=none&width=833" alt="image.png"><br>复制保存创建角色的 ARN，后面代码中用到：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1615529966168-71462baa-2286-4158-9315-778b7f982ed8.png#align=left&display=inline&height=499&margin=%5Bobject%20Object%5D&name=image.png&originHeight=499&originWidth=1691&size=50176&status=done&style=none&width=1691" alt="image.png"></p><h4 id="4、调用-STS-服务接口AssumeRole获取临时访问凭证"><a href="#4、调用-STS-服务接口AssumeRole获取临时访问凭证" class="headerlink" title="4、调用 STS 服务接口AssumeRole获取临时访问凭证"></a>4、调用 STS 服务接口<a href="https://help.aliyun.com/document_detail/28763.htm#reference-clc-3sv-xdb">AssumeRole</a>获取临时访问凭证</h4><h5 id="1、pom-xml-文件添加依赖"><a href="#1、pom-xml-文件添加依赖" class="headerlink" title="1、pom.xml 文件添加依赖"></a>1、pom.xml 文件添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-sts<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2、后端代码实现"><a href="#2、后端代码实现" class="headerlink" title="2、后端代码实现"></a>2、后端代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;ali.oss&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliOssConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String roleArn;</span><br><span class="line">    <span class="keyword">private</span> String regionId;</span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ali:</span><br><span class="line">  oss:</span><br><span class="line">    endpoint: oss-cn-shenzhen.aliyuncs.com</span><br><span class="line">    access-key-id: 用户的accessKeyId</span><br><span class="line">    access-key-secret: 用户的accessKeySecret</span><br><span class="line">    role-arn: 角色的ARN</span><br><span class="line">    region-id: cn-shenzhen</span><br><span class="line">    bucket: best-favorites</span><br></pre></td></tr></table></figure><p>调用<a href="https://help.aliyun.com/document_detail/28763.htm#reference-clc-3sv-xdb">AssumeRole</a>接口之后返回给前端的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliOssTokenVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String region;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String stsToken;</span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取临时访问凭证的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AliOssTokenVo <span class="title">getOssToken</span><span class="params">()</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">    IClientProfile profile = DefaultProfile.getProfile(aliOssConfig.getRegionId(), aliOssConfig.getAccessKeyId(), aliOssConfig.getAccessKeySecret());</span><br><span class="line">    DefaultAcsClient client = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">    <span class="keyword">final</span> AssumeRoleRequest request = <span class="keyword">new</span> AssumeRoleRequest();</span><br><span class="line">    request.setRoleArn(aliOssConfig.getRoleArn());</span><br><span class="line">    request.setRoleSessionName(<span class="string">&quot;best-favorites&quot;</span>);</span><br><span class="line">    request.setDurationSeconds(<span class="number">1000L</span>);</span><br><span class="line">    AssumeRoleResponse response = client.getAcsResponse(request);</span><br><span class="line">    AssumeRoleResponse.Credentials credentials = response.getCredentials();</span><br><span class="line">    String accessKeyId = credentials.getAccessKeyId();</span><br><span class="line">    String accessKeySecret = credentials.getAccessKeySecret();</span><br><span class="line">    String securityToken = credentials.getSecurityToken();</span><br><span class="line">    <span class="keyword">return</span> AliOssTokenVo.builder()</span><br><span class="line">        .accessKeyId(accessKeyId)</span><br><span class="line">        .accessKeySecret(accessKeySecret)</span><br><span class="line">        .stsToken(securityToken)</span><br><span class="line">        .region(<span class="string">&quot;oss-&quot;</span> + aliOssConfig.getRegionId())</span><br><span class="line">        .bucket(aliOssConfig.getBucket())</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、前端代码实现"><a href="#3、前端代码实现" class="headerlink" title="3、前端代码实现"></a>3、前端代码实现</h5><p>api，调用后端接口获取临时访问凭证 ossToken</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> service from <span class="string">&#x27;@/utils/request&#x27;</span>;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">const</span> getOssToken = () =&gt; service.get(<span class="string">&#x27;/ali-oss/token&#x27;</span>);</span><br></pre></td></tr></table></figure><p>store/modules/oss 模块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getOssToken &#125; from <span class="string">&#x27;@/api/business&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> oss = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    accessKeyId: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    accessKeySecret: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    stsToken: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    region: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    bucket: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_OSS_TOKEN: (state, &#123; accessKeyId, accessKeySecret, stsToken, region, bucket &#125;) =&gt; &#123;</span><br><span class="line">      state.accessKeyId = accessKeyId;</span><br><span class="line">      state.accessKeySecret = accessKeySecret;</span><br><span class="line">      state.stsToken = stsToken;</span><br><span class="line">      state.region = region;</span><br><span class="line">      state.bucket = bucket;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    GetOssToken(&#123; commit &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        getOssToken()</span><br><span class="line">          .then(res =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> ossToken = res.result;</span><br><span class="line">            commit(<span class="string">&#x27;SET_OSS_TOKEN&#x27;</span>, ossToken);</span><br><span class="line">            resolve(ossToken);</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="keyword">catch</span>(error =&gt; &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> oss;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上传组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-upload</span></span></span><br><span class="line"><span class="tag">    <span class="attr">list-type</span>=<span class="string">&quot;picture-card&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:before-upload</span>=<span class="string">&quot;beforeUpload&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:custom-request</span>=<span class="string">&quot;customRequest&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">preview</span>=<span class="string">&quot;handlePreview&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">change</span>=<span class="string">&quot;handleChange&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;fileList.length &lt; 1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;plus&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ant-upload-text&quot;</span>&gt;</span>Upload<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a-upload</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-modal</span> <span class="attr">:visible</span>=<span class="string">&quot;previewVisible&quot;</span> <span class="attr">:footer</span>=<span class="string">&quot;null&quot;</span> @<span class="attr">cancel</span>=<span class="string">&quot;handleCancel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;example&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;previewImage&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a-modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeUpload</span>(<span class="params">file</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isJpgOrPng = file.type === <span class="string">&#x27;image/jpeg&#x27;</span> || file.type === <span class="string">&#x27;image/png&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!isJpgOrPng) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$message.error(<span class="string">&#x27;只能上传图片！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> isLt10M = file.size / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">if</span> (!isLt10M) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传图片必须小于10M！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isJpgOrPng &amp;&amp; isLt10M;</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">handleUpload</span>(<span class="params">&#123; file &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> ossToken = <span class="keyword">await</span> <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;GetOssToken&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> client = <span class="keyword">new</span> OSS(&#123;</span><br><span class="line">        <span class="attr">accessKeyId</span>: ossToken.accessKeyId,</span><br><span class="line">        <span class="attr">accessKeySecret</span>: ossToken.accessKeySecret,</span><br><span class="line">        <span class="attr">stsToken</span>: ossToken.stsToken,</span><br><span class="line">        <span class="attr">region</span>: ossToken.region,</span><br><span class="line">        <span class="attr">bucket</span>: ossToken.bucket,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">let</span> result = <span class="keyword">await</span> client.put(file.name, file);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;result:&#x27;</span>, result);</span><br><span class="line">      file.url = result.url;</span><br><span class="line">      <span class="built_in">this</span>.fileList = [...this.fileList, file];</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;uploadSuccess&#x27;</span>, file.url);</span><br><span class="line">      <span class="built_in">this</span>.$message.success(<span class="string">&#x27;文件上传成功！&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line">      <span class="built_in">this</span>.$message.error(<span class="string">&#x27;文件上传失败！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>由于是使用 web 端直传，点击上传之后可能会出现如下错误，说明阿里云 oss 需要配置一下<strong>跨域访问</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1615685384894-4161d90a-7338-457e-af82-2c0f05939d51.png#align=left&display=inline&height=275&margin=%5Bobject%20Object%5D&name=image.png&originHeight=275&originWidth=1919&size=59030&status=done&style=none&width=1919" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1615686047492-ed7941aa-9362-4000-8b57-1387f16bcf1b.png#align=left&display=inline&height=512&margin=%5Bobject%20Object%5D&name=image.png&originHeight=512&originWidth=783&size=30647&status=done&style=none&width=783" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1615686735324-c3c55c1b-c169-455e-a51b-21d60c778b89.png#align=left&display=inline&height=882&margin=%5Bobject%20Object%5D&name=image.png&originHeight=882&originWidth=641&size=42260&status=done&style=none&width=641" alt="image.png"><br>点击确定之后，重新上传，可以看到这时就已经上传成功！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>若依前后端分离项目部署</title>
      <link href="/2021/02/24/yuque/%E8%8B%A5%E4%BE%9D%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/02/24/yuque/%E8%8B%A5%E4%BE%9D%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>该篇文章是若依前后端分离项目部署，可以先从前面的<br>文章开始。</p><h2 id="1、安装-redis"><a href="#1、安装-redis" class="headerlink" title="1、安装 redis"></a>1、安装 redis</h2><h3 id="1、搜索-redis-镜像"><a href="#1、搜索-redis-镜像" class="headerlink" title="1、搜索 redis 镜像"></a>1、搜索 redis 镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614137573231-098679d9-53b6-4e28-91ec-7d4d92924966.png#height=438&id=tPzZ2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=438&originWidth=763&originalType=binary%E2%88%B6=1&size=63317&status=done&style=none&width=763" alt="image.png"></p><h3 id="2、拉取最新版本的-redis-镜像"><a href="#2、拉取最新版本的-redis-镜像" class="headerlink" title="2、拉取最新版本的 redis 镜像"></a>2、拉取最新版本的 redis 镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614137656884-49db3ba5-032d-4055-95a7-ef435ade7738.png#height=183&id=GjMcJ&margin=%5Bobject%20Object%5D&name=image.png&originHeight=183&originWidth=758&originalType=binary%E2%88%B6=1&size=21583&status=done&style=none&width=758" alt="image.png"></p><h3 id="3、查看镜像"><a href="#3、查看镜像" class="headerlink" title="3、查看镜像"></a>3、查看镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614137705097-caaa382d-3102-49af-856e-9cf0da2c1269.png#height=82&id=RrsnH&margin=%5Bobject%20Object%5D&name=image.png&originHeight=82&originWidth=756&originalType=binary%E2%88%B6=1&size=10309&status=done&style=none&width=756" alt="image.png"></p><h3 id="4、启动镜像"><a href="#4、启动镜像" class="headerlink" title="4、启动镜像"></a>4、启动镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-itd</span> -<span class="literal">-name</span> redis <span class="literal">-p</span> <span class="number">6379</span>:<span class="number">6379</span> redis</span><br></pre></td></tr></table></figure><p>使用<code>docker ps</code>查看正在运行的容器<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614137840838-1c0d395e-d96c-4f47-beac-17e5d3c4b1b4.png#height=124&id=Cus8U&margin=%5Bobject%20Object%5D&name=image.png&originHeight=124&originWidth=754&originalType=binary%E2%88%B6=1&size=14885&status=done&style=none&width=754" alt="image.png"></p><h3 id="5、进入-redis-容器"><a href="#5、进入-redis-容器" class="headerlink" title="5、进入 redis 容器"></a>5、进入 redis 容器</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> redis /bin/bash</span><br><span class="line">redis<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614138953158-a4943a14-19b9-42c3-96c1-2989d725b7a4.png#height=239&id=ZKuTI&margin=%5Bobject%20Object%5D&name=image.png&originHeight=239&originWidth=754&originalType=binary%E2%88%B6=1&size=18257&status=done&style=none&width=754" alt="image.png"></p><h3 id="6、使用AnotherRedisDestopManager连接-redis"><a href="#6、使用AnotherRedisDestopManager连接-redis" class="headerlink" title="6、使用AnotherRedisDestopManager连接 redis"></a>6、使用<a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases">AnotherRedisDestopManager</a>连接 redis</h3><p>如果连接报错，请确保服务器的安全组中开启 6379 端口。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614139471216-0033b6d1-37ca-4ad8-b3ec-0abf96d84cc2.png#height=478&id=bUnyG&margin=%5Bobject%20Object%5D&name=image.png&originHeight=478&originWidth=1688&originalType=binary%E2%88%B6=1&size=72414&status=done&style=none&width=1688" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614147406901-b35beb3c-4cf8-4e7a-9163-28ca9418d675.png#height=689&id=iQi4V&margin=%5Bobject%20Object%5D&name=image.png&originHeight=689&originWidth=1084&originalType=binary%E2%88%B6=1&size=58773&status=done&style=none&width=1084" alt="image.png"></p><h2 id="2、安装-nodejs"><a href="#2、安装-nodejs" class="headerlink" title="2、安装 nodejs"></a>2、安装 nodejs</h2><h3 id="1、进入官网下载最新的nodejs"><a href="#1、进入官网下载最新的nodejs" class="headerlink" title="1、进入官网下载最新的nodejs"></a>1、进入官网下载最新的<a href="https://npm.taobao.org/mirrors/node/v14.15.5/">nodejs</a></h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614148897161-80ee5808-d91f-4362-9f63-dd2f08c15cf3.png#height=621&id=wuh10&margin=%5Bobject%20Object%5D&name=image.png&originHeight=621&originWidth=1106&originalType=binary%E2%88%B6=1&size=89869&status=done&style=none&width=1106" alt="image.png"></p><h3 id="2、下载完之后通过-xftp-上传压缩包到服务器"><a href="#2、下载完之后通过-xftp-上传压缩包到服务器" class="headerlink" title="2、下载完之后通过 xftp 上传压缩包到服务器"></a>2、下载完之后通过 xftp 上传压缩包到服务器</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614148982860-16399716-e3db-4327-90ae-8d62638458ba.png#height=803&id=d6JJa&margin=%5Bobject%20Object%5D&name=image.png&originHeight=803&originWidth=1234&originalType=binary%E2%88%B6=1&size=77873&status=done&style=none&width=1234" alt="image.png"></p><h3 id="3、解压并移动文件夹到-data-service目录"><a href="#3、解压并移动文件夹到-data-service目录" class="headerlink" title="3、解压并移动文件夹到/data/service目录"></a>3、解压并移动文件夹到<code>/data/service</code>目录</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> node<span class="literal">-v14</span>.<span class="number">15.5</span><span class="literal">-linux</span><span class="literal">-x64</span>.tar.gz</span><br><span class="line"><span class="built_in">mv</span> node<span class="literal">-v14</span>.<span class="number">15.5</span><span class="literal">-linux</span><span class="literal">-x64</span> /<span class="keyword">data</span>/service</span><br><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/service</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614149101431-94633200-5b74-4cdf-a4cb-01a917a20f7e.png#height=105&id=k1g5c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=105&originWidth=754&originalType=binary%E2%88%B6=1&size=13503&status=done&style=none&width=754" alt="image.png"></p><h3 id="4、配置环境变量"><a href="#4、配置环境变量" class="headerlink" title="4、配置环境变量"></a>4、配置环境变量</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export NODEJS_HOME=/<span class="keyword">data</span>/service/node<span class="literal">-v14</span>.<span class="number">15.5</span><span class="literal">-linux</span><span class="literal">-x64</span></span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$NODEJS_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>使环境变量生效</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>检查是否配置成功</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node <span class="literal">-v</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614149415922-ce030cab-291f-4ba4-a141-09d13b567ed0.png#height=50&id=qxaLY&margin=%5Bobject%20Object%5D&name=image.png&originHeight=50&originWidth=749&originalType=binary%E2%88%B6=1&size=6043&status=done&style=none&width=749" alt="image.png"></p><h3 id="5、设置-npm-镜像源"><a href="#5、设置-npm-镜像源" class="headerlink" title="5、设置 npm 镜像源"></a>5、设置 npm 镜像源</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置淘宝镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment">#升级npm</span></span><br><span class="line">npm <span class="literal">-g</span> install npm</span><br><span class="line"><span class="comment">#查看npm配置</span></span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614150167530-12720ee7-16c8-478f-ab0c-4abd416f0887.png#height=228&id=iuLUD&margin=%5Bobject%20Object%5D&name=image.png&originHeight=228&originWidth=751&originalType=binary%E2%88%B6=1&size=21345&status=done&style=none&width=751" alt="image.png"></p><h3 id="6、安装-yarn-以及设置镜像源"><a href="#6、安装-yarn-以及设置镜像源" class="headerlink" title="6、安装 yarn 以及设置镜像源"></a>6、安装 yarn 以及设置镜像源</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装yarn</span></span><br><span class="line">npm install <span class="literal">-g</span> yarn</span><br><span class="line"><span class="comment">#查看版本号</span></span><br><span class="line">yarn <span class="literal">-v</span></span><br><span class="line"><span class="comment">#设置淘宝镜像源</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org <span class="literal">-g</span></span><br><span class="line">yarn config <span class="built_in">set</span> sass_binary_site http://cdn.npm.taobao.org/dist/node<span class="literal">-sass</span> <span class="literal">-g</span></span><br><span class="line"><span class="comment">#查看yarn配置</span></span><br><span class="line">yarn config list</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614150425628-0b579faf-ec68-4b36-9e63-dc97bcd74649.png#height=395&id=Cy58j&margin=%5Bobject%20Object%5D&name=image.png&originHeight=395&originWidth=754&originalType=binary%E2%88%B6=1&size=33285&status=done&style=none&width=754" alt="image.png"></p><h2 id="3、安装-nginx"><a href="#3、安装-nginx" class="headerlink" title="3、安装 nginx"></a>3、安装 nginx</h2><h3 id="1、进入官网下载最新的稳定版ngnix"><a href="#1、进入官网下载最新的稳定版ngnix" class="headerlink" title="1、进入官网下载最新的稳定版ngnix"></a>1、进入官网下载最新的稳定版<a href="https://nginx.org/download/">ngnix</a></h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614150720763-c0a71b07-3fa1-4892-9283-5bbd94681940.png#height=526&id=P6ByI&margin=%5Bobject%20Object%5D&name=image.png&originHeight=526&originWidth=792&originalType=binary%E2%88%B6=1&size=43946&status=done&style=none&width=792" alt="image.png"></p><h3 id="2、下载完之后通过-xftp-上传压缩包到服务器-1"><a href="#2、下载完之后通过-xftp-上传压缩包到服务器-1" class="headerlink" title="2、下载完之后通过 xftp 上传压缩包到服务器"></a>2、下载完之后通过 xftp 上传压缩包到服务器</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614151133550-297452b3-f1e7-41c7-a9ee-73a6716d5153.png#height=803&id=bBaSc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=803&originWidth=1234&originalType=binary%E2%88%B6=1&size=76656&status=done&style=none&width=1234" alt="image.png"></p><h3 id="3、解压编译安装-nginx"><a href="#3、解压编译安装-nginx" class="headerlink" title="3、解压编译安装 nginx"></a>3、解压编译安装 nginx</h3><p>首先安装依赖</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install gcc pcre<span class="literal">-devel</span> zlib<span class="literal">-devel</span> openssl openssl<span class="literal">-devel</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/tmp</span><br><span class="line">tar zxvf nginx<span class="literal">-1</span>.<span class="number">18.0</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx<span class="literal">-1</span>.<span class="number">18.0</span></span><br><span class="line">./configure -<span class="literal">-prefix</span>=/<span class="keyword">data</span>/service/ngnix</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="4、启动-ngnix"><a href="#4、启动-ngnix" class="headerlink" title="4、启动 ngnix"></a>4、启动 ngnix</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动ngnix</span></span><br><span class="line">/<span class="keyword">data</span>/service/ngnix/sbin/nginx</span><br><span class="line"><span class="comment">#停止ngnix</span></span><br><span class="line">/<span class="keyword">data</span>/service/ngnix/sbin/nginx <span class="literal">-s</span> quit</span><br><span class="line"><span class="comment">#重启ngnix</span></span><br><span class="line">/<span class="keyword">data</span>/service/ngnix/sbin/nginx <span class="literal">-s</span> reload</span><br></pre></td></tr></table></figure><p>如果访问不成功，请确保服务器的安全组中开启 80 端口。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614152405027-b8dab800-0c5e-4671-b2e0-a73beac9bd97.png#height=476&id=z4D2F&margin=%5Bobject%20Object%5D&name=image.png&originHeight=476&originWidth=1683&originalType=binary%E2%88%B6=1&size=73064&status=done&style=none&width=1683" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614151833756-cbcb066a-9e1e-459d-a7b5-f7faffe0d40f.png#height=377&id=GxdMH&margin=%5Bobject%20Object%5D&name=image.png&originHeight=377&originWidth=1485&originalType=binary%E2%88%B6=1&size=34604&status=done&style=none&width=1485" alt="image.png"></p><h2 id="4、运行项目准备"><a href="#4、运行项目准备" class="headerlink" title="4、运行项目准备"></a>4、运行项目准备</h2><h3 id="1、拉取代码"><a href="#1、拉取代码" class="headerlink" title="1、拉取代码"></a>1、拉取代码</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/gitee</span><br><span class="line">git clone git@gitee.com:y_project/RuoYi<span class="literal">-Vue</span>.git</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614155187200-bae8448c-4a9a-4cbb-a095-be0915bcbad9.png#height=212&id=Deng3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=212&originWidth=751&originalType=binary%E2%88%B6=1&size=28278&status=done&style=none&width=751" alt="image.png"></p><h3 id="2、创建数据库以及数据库表"><a href="#2、创建数据库以及数据库表" class="headerlink" title="2、创建数据库以及数据库表"></a>2、创建数据库以及数据库表</h3><p>使用 navicat 连接，创建数据库 <code>ry-vue</code> 以及执行 <code>quartz.sql</code> 和 <code>ry_20210210.sql</code> 脚本。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614156690421-bea024f0-3435-4403-9078-09f468d9f0cd.png#height=392&id=gQ9uV&margin=%5Bobject%20Object%5D&name=image.png&originHeight=392&originWidth=442&originalType=binary%E2%88%B6=1&size=9115&status=done&style=none&width=442" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614156742293-7a537d4c-6a4e-4fc7-ab62-5d8ebb6cff27.png#height=352&id=w6iua&margin=%5Bobject%20Object%5D&name=image.png&originHeight=352&originWidth=402&originalType=binary%E2%88%B6=1&size=11673&status=done&style=none&width=402" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614156771858-1243ad47-4fd3-45ba-8d91-f45cb4fb83c7.png#height=352&id=UABbq&margin=%5Bobject%20Object%5D&name=image.png&originHeight=352&originWidth=402&originalType=binary%E2%88%B6=1&size=11620&status=done&style=none&width=402" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614156796758-ad1a3b7a-24ac-4587-b28a-1c7871d0aa6b.png#height=534&id=VQtG9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=534&originWidth=502&originalType=binary%E2%88%B6=1&size=18386&status=done&style=none&width=502" alt="image.png"></p><h3 id="3、修改项目配置"><a href="#3、修改项目配置" class="headerlink" title="3、修改项目配置"></a>3、修改项目配置</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/gitee/RuoYi<span class="literal">-Vue</span>/ruoyi<span class="literal">-admin</span>/src/main/resources/</span><br><span class="line"><span class="comment">#修改application.yml的项目启动端口号与文件上传路径</span></span><br><span class="line">vim application.yml</span><br><span class="line"><span class="comment">#修改application-druid.yml的数据源</span></span><br><span class="line">vim application<span class="literal">-druid</span>.yml</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">profile: /<span class="keyword">data</span>/tmp</span><br><span class="line">port: <span class="number">18081</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614157184216-f680ee7a-85ab-42cf-8260-8b96846399d6.png#height=574&id=nn4Ue&margin=%5Bobject%20Object%5D&name=image.png&originHeight=574&originWidth=763&originalType=binary%E2%88%B6=1&size=43810&status=done&style=none&width=763" alt="image.png"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主库数据源</span></span><br><span class="line">master:</span><br><span class="line">url: jdbc:mysql://localhost:<span class="number">3306</span>/ry<span class="literal">-vue</span>?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%<span class="number">2</span>B8</span><br><span class="line">username: root</span><br><span class="line">password: <span class="number">123456</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614157301395-2c5139e9-8644-4224-b2d9-b05190c977c3.png#height=574&id=OKX5P&margin=%5Bobject%20Object%5D&name=image.png&originHeight=574&originWidth=763&originalType=binary%E2%88%B6=1&size=54897&status=done&style=none&width=763" alt="image.png"></p><h3 id="4、将项目打成-jar-包"><a href="#4、将项目打成-jar-包" class="headerlink" title="4、将项目打成 jar 包"></a>4、将项目打成 jar 包</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/gitee/RuoYi<span class="literal">-Vue</span>/</span><br><span class="line">mvn clean install <span class="literal">-pl</span> com.ruoyi:ruoyi<span class="literal">-admin</span> <span class="literal">-am</span></span><br></pre></td></tr></table></figure><h3 id="5、启动后端项目"><a href="#5、启动后端项目" class="headerlink" title="5、启动后端项目"></a>5、启动后端项目</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="literal">-p</span> /<span class="keyword">data</span>/app/ruoyi<span class="literal">-vue</span></span><br><span class="line"><span class="built_in">cp</span> /<span class="keyword">data</span>/gitee/RuoYi<span class="literal">-Vue</span>/ruoyi<span class="literal">-admin</span>/target/ruoyi<span class="literal">-admin</span>.jar /<span class="keyword">data</span>/app/ruoyi<span class="literal">-vue</span>/ruoyi<span class="literal">-admin</span>.jar</span><br><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/app/ruoyi<span class="literal">-vue</span>/</span><br><span class="line"><span class="comment">#后台启动项目</span></span><br><span class="line">nohup java <span class="literal">-jar</span> ruoyi<span class="literal">-admin</span>.jar &amp;</span><br><span class="line"><span class="comment">#查看项目运行日志</span></span><br><span class="line">tail <span class="operator">-f</span> nohup.out</span><br></pre></td></tr></table></figure><p>如果查看日志的时候，出现 18081 端口被使用，则表示还有其他应用占用了该端口，关闭应用之后再重新启动即可。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出后台进程</span></span><br><span class="line"><span class="built_in">ps</span> <span class="literal">-ef</span> | grep java</span><br><span class="line"><span class="comment">#杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> <span class="literal">-9</span> pid</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614157946832-5390741c-96c2-48ec-809a-3b9c3e19738a.png#height=204&id=DFc0j&margin=%5Bobject%20Object%5D&name=image.png&originHeight=204&originWidth=761&originalType=binary%E2%88%B6=1&size=16123&status=done&style=none&width=761" alt="image.png"></p><h3 id="6、启动前端项目"><a href="#6、启动前端项目" class="headerlink" title="6、启动前端项目"></a>6、启动前端项目</h3><h4 id="1、下载依赖并打包"><a href="#1、下载依赖并打包" class="headerlink" title="1、下载依赖并打包"></a>1、下载依赖并打包</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/gitee/RuoYi<span class="literal">-Vue</span>/ruoyi<span class="literal">-ui</span></span><br><span class="line"><span class="comment">#下载依赖</span></span><br><span class="line">yarn install</span><br><span class="line"><span class="comment"># 打包正式环境</span></span><br><span class="line">yarn run build:prod</span><br><span class="line"></span><br><span class="line">mkdir /<span class="keyword">data</span>/app/ruoyi<span class="literal">-ui</span></span><br><span class="line"><span class="built_in">mv</span> dist/* /<span class="keyword">data</span>/app/ruoyi<span class="literal">-ui</span>/</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614159739079-35fb6f03-eeb5-4ea3-9b26-dc02067cbfb7.png#height=90&id=xWNWV&margin=%5Bobject%20Object%5D&name=image.png&originHeight=90&originWidth=754&originalType=binary%E2%88%B6=1&size=7416&status=done&style=none&width=754" alt="image.png"></p><h4 id="2、配置-ngnix-配置文件"><a href="#2、配置-ngnix-配置文件" class="headerlink" title="2、配置 ngnix 配置文件"></a>2、配置 ngnix 配置文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /<span class="keyword">data</span>/service/ngnix/conf/nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  root   /<span class="keyword">data</span>/app/ruoyi<span class="literal">-ui</span>;</span><br><span class="line">  try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /prod<span class="literal">-api</span>/ &#123;</span><br><span class="line">  proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">  proxy_set_header X<span class="literal">-Real</span><span class="literal">-IP</span> <span class="variable">$remote_addr</span>;</span><br><span class="line">  proxy_set_header REMOTE<span class="literal">-HOST</span> <span class="variable">$remote_addr</span>;</span><br><span class="line">  proxy_set_header X<span class="literal">-Forwarded</span><span class="literal">-For</span> <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  proxy_pass http://localhost:<span class="number">18081</span>/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、访问项目"><a href="#3、访问项目" class="headerlink" title="3、访问项目"></a>3、访问<a href="http://120.78.177.161/login?redirect=/index">项目</a></h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614160381716-7d9edf2e-5f98-4d24-8ed6-4c953eb5c8d8.png#height=700&id=tTJ78&margin=%5Bobject%20Object%5D&name=image.png&originHeight=700&originWidth=929&originalType=binary%E2%88%B6=1&size=1215844&status=done&style=none&width=929" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>若依前后端不分离项目部署</title>
      <link href="/2021/02/23/yuque/%E8%8B%A5%E4%BE%9D%E5%89%8D%E5%90%8E%E7%AB%AF%E4%B8%8D%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/02/23/yuque/%E8%8B%A5%E4%BE%9D%E5%89%8D%E5%90%8E%E7%AB%AF%E4%B8%8D%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="1、下载安装xshell与xftp"><a href="#1、下载安装xshell与xftp" class="headerlink" title="1、下载安装xshell与xftp"></a>1、下载安装<a href="https://www.netsarang.com/zh/xshell/">xshell</a>与<a href="https://www.netsarang.com/zh/xftp/">xftp</a></h2><p>用于连接阿里云服务器以及上传文件到服务器。</p><h2 id="2、新建目录"><a href="#2、新建目录" class="headerlink" title="2、新建目录"></a>2、新建目录</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tmp存放临时安装包</span></span><br><span class="line">mkdir <span class="literal">-p</span> /<span class="keyword">data</span>/tmp</span><br><span class="line"><span class="comment">#service存放软件环境</span></span><br><span class="line">mkdir <span class="literal">-p</span> /<span class="keyword">data</span>/service</span><br><span class="line"><span class="comment">#gitee存放代码版本控制库</span></span><br><span class="line">mkdir <span class="literal">-p</span> /<span class="keyword">data</span>/gitee</span><br></pre></td></tr></table></figure><h2 id="3、安装-jdk"><a href="#3、安装-jdk" class="headerlink" title="3、安装 jdk"></a>3、安装 jdk</h2><h3 id="1、jdk1-8-百度云下载"><a href="#1、jdk1-8-百度云下载" class="headerlink" title="1、jdk1.8 百度云下载"></a>1、<a href="https://blog.csdn.net/qq_42767455/article/details/105724208">jdk1.8 百度云</a>下载</h3><h3 id="2、下载完成之后通过-xftp-上传压缩包到服务器"><a href="#2、下载完成之后通过-xftp-上传压缩包到服务器" class="headerlink" title="2、下载完成之后通过 xftp 上传压缩包到服务器"></a>2、下载完成之后通过 xftp 上传压缩包到服务器</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614067650540-77815dd6-e68b-40db-b6e0-bf4a3609b279.png#align=left&display=inline&height=803&margin=%5Bobject%20Object%5D&name=image.png&originHeight=803&originWidth=1234&size=89381&status=done&style=none&width=1234" alt="image.png"></p><h3 id="3、解压并移动文件夹到-data-service-目录"><a href="#3、解压并移动文件夹到-data-service-目录" class="headerlink" title="3、解压并移动文件夹到/data/service 目录"></a>3、解压并移动文件夹到/data/service 目录</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> jdk<span class="literal">-8u261</span><span class="literal">-linux</span><span class="literal">-x64</span>.tar.gz</span><br><span class="line"><span class="built_in">mv</span> jdk1.<span class="number">8.0</span>_261 /<span class="keyword">data</span>/service</span><br><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/service</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><h3 id="4、配置环境变量"><a href="#4、配置环境变量" class="headerlink" title="4、配置环境变量"></a>4、配置环境变量</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export JAVA_HOME=/<span class="keyword">data</span>/service/jdk1.<span class="number">8.0</span>_261</span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>使环境变量生效</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>检查是否配置成功</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java <span class="literal">-version</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614067908236-f7203853-dbef-4c92-ab58-bc7264d3e120.png#align=left&display=inline&height=90&margin=%5Bobject%20Object%5D&name=image.png&originHeight=90&originWidth=629&size=10840&status=done&style=none&width=629" alt="image.png"></p><h2 id="4、安装-maven"><a href="#4、安装-maven" class="headerlink" title="4、安装 maven"></a>4、安装 maven</h2><h3 id="1、进入官网下载最新的maven"><a href="#1、进入官网下载最新的maven" class="headerlink" title="1、进入官网下载最新的maven"></a>1、进入官网下载最新的<a href="http://maven.apache.org/download.cgi">maven</a></h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614062477173-350d33c8-44e4-4217-9c0b-b2917d796090.png#align=left&display=inline&height=797&margin=%5Bobject%20Object%5D&name=image.png&originHeight=797&originWidth=1634&size=117963&status=done&style=none&width=1634" alt="image.png"></p><h3 id="2、下载完之后通过-xftp-上传压缩包到服务器"><a href="#2、下载完之后通过-xftp-上传压缩包到服务器" class="headerlink" title="2、下载完之后通过 xftp 上传压缩包到服务器"></a>2、下载完之后通过 xftp 上传压缩包到服务器</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614063825793-e2a10395-e6ef-4e6d-bd78-5f4c0d4c89ec.png#align=left&display=inline&height=803&margin=%5Bobject%20Object%5D&name=image.png&originHeight=803&originWidth=1234&size=69780&status=done&style=none&width=1234" alt="image.png"></p><h3 id="3、解压并移动文件夹到-data-service目录"><a href="#3、解压并移动文件夹到-data-service目录" class="headerlink" title="3、解压并移动文件夹到/data/service目录"></a>3、解压并移动文件夹到<code>/data/service</code>目录</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> apache<span class="literal">-maven</span><span class="literal">-3</span>.<span class="number">6.3</span><span class="literal">-bin</span>.tar.gz</span><br><span class="line"><span class="built_in">mv</span> apache<span class="literal">-maven</span><span class="literal">-3</span>.<span class="number">6.3</span> /<span class="keyword">data</span>/service</span><br><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/service</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614064035911-3ce39569-e2ba-454f-8985-1cf257c97fab.png#align=left&display=inline&height=91&margin=%5Bobject%20Object%5D&name=image.png&originHeight=91&originWidth=448&size=8658&status=done&style=none&width=448" alt="image.png"></p><h3 id="4、配置环境变量-1"><a href="#4、配置环境变量-1" class="headerlink" title="4、配置环境变量"></a>4、配置环境变量</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export MAVEN_HOME=/<span class="keyword">data</span>/service/apache<span class="literal">-maven</span><span class="literal">-3</span>.<span class="number">6.3</span></span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$MAVEN_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>使环境变量生效</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>检查是否配置成功</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="literal">-v</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614064322182-35089e5d-5993-4c04-b090-08bec4946edb.png#align=left&display=inline&height=109&margin=%5Bobject%20Object%5D&name=image.png&originHeight=109&originWidth=667&size=16723&status=done&style=none&width=667" alt="image.png"></p><h3 id="5、配置本地仓库地址与阿里云镜像"><a href="#5、配置本地仓库地址与阿里云镜像" class="headerlink" title="5、配置本地仓库地址与阿里云镜像"></a>5、配置本地仓库地址与<a href="https://maven.aliyun.com/mvn/guide">阿里云镜像</a></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /<span class="keyword">data</span>/service/apache<span class="literal">-maven</span><span class="literal">-3</span>.<span class="number">6.3</span>/conf/setting.xml</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置本地仓库</span></span><br><span class="line">&lt;localRepository&gt;/<span class="keyword">data</span>/service/apache<span class="literal">-maven</span><span class="literal">-3</span>.<span class="number">6.3</span>/repository&lt;/localRepository&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置阿里云镜像</span></span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">  &lt;id&gt;aliyunmaven&lt;/id&gt;</span><br><span class="line">  &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">  &lt;name&gt;阿里云公共仓库&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><h2 id="5、安装-git"><a href="#5、安装-git" class="headerlink" title="5、安装 git"></a>5、安装 git</h2><h3 id="1、进入官网下载git"><a href="#1、进入官网下载git" class="headerlink" title="1、进入官网下载git"></a>1、进入官网下载<a href="https://mirrors.edge.kernel.org/pub/software/scm/git/">git</a></h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614069641334-d0300a9e-4b00-4477-94e9-d7eeddf5f148.png#align=left&display=inline&height=105&margin=%5Bobject%20Object%5D&name=image.png&originHeight=105&originWidth=693&size=13938&status=done&style=none&width=693" alt="image.png"></p><h3 id="2、下载完之后通过-xftp-上传压缩包到服务器-1"><a href="#2、下载完之后通过-xftp-上传压缩包到服务器-1" class="headerlink" title="2、下载完之后通过 xftp 上传压缩包到服务器"></a>2、下载完之后通过 xftp 上传压缩包到服务器</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614070397105-4cc9b319-a9dd-4230-a44b-8c2c681725d4.png#align=left&display=inline&height=803&margin=%5Bobject%20Object%5D&name=image.png&originHeight=803&originWidth=1234&size=72314&status=done&style=none&width=1234" alt="image.png"></p><h3 id="3、解压编译安装-git"><a href="#3、解压编译安装-git" class="headerlink" title="3、解压编译安装 git"></a>3、解压编译安装 git</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="literal">-y</span> groupinstall <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line">yum install <span class="built_in">wget</span> unzip gettext<span class="literal">-devel</span> openssl<span class="literal">-devel</span> perl<span class="literal">-CPAN</span> perl<span class="literal">-devel</span> zlib<span class="literal">-devel</span> libcurl<span class="literal">-devel</span> expat<span class="literal">-devel</span> <span class="literal">-y</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/tmp</span><br><span class="line">tar zxvf git<span class="literal">-2</span>.<span class="number">18.0</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> git<span class="literal">-2</span>.<span class="number">18.0</span></span><br><span class="line">./configure -<span class="literal">-prefix</span>=/<span class="keyword">data</span>/service/git</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="4、配置环境变量-2"><a href="#4、配置环境变量-2" class="headerlink" title="4、配置环境变量"></a>4、配置环境变量</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export GIT_HOME=/<span class="keyword">data</span>/service/git</span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$GIT_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>使环境变量生效</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>检查是否配置成功</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git -<span class="literal">-version</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614072422207-e54e7259-f1cd-467e-aacb-329222a1b461.png#align=left&display=inline&height=34&margin=%5Bobject%20Object%5D&name=image.png&originHeight=34&originWidth=583&size=3726&status=done&style=none&width=583" alt="image.png"></p><h3 id="5、生成-添加-SSH-公钥"><a href="#5、生成-添加-SSH-公钥" class="headerlink" title="5、生成/添加 SSH 公钥"></a>5、<a href="https://gitee.com/help/articles/4181#article-header0">生成/添加 SSH 公钥</a></h3><h4 id="1、生成公钥"><a href="#1、生成公钥" class="headerlink" title="1、生成公钥"></a>1、生成公钥</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;15019474951@163.com&quot;</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h4 id="2、添加公钥到gitte"><a href="#2、添加公钥到gitte" class="headerlink" title="2、添加公钥到gitte"></a>2、添加公钥到<a href="https://gitee.com/profile/sshkeys">gitte</a></h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614073424379-52a2df18-5397-4022-a4fb-805636b4a2e5.png#align=left&display=inline&height=730&margin=%5Bobject%20Object%5D&name=image.png&originHeight=730&originWidth=1368&size=80821&status=done&style=none&width=1368" alt="image.png"></p><h4 id="3、验证"><a href="#3、验证" class="headerlink" title="3、验证"></a>3、验证</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh <span class="literal">-T</span> git@gitee.com</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614073695169-74506a86-81fa-4e92-80fc-1e13a19bbb87.png#align=left&display=inline&height=29&margin=%5Bobject%20Object%5D&name=image.png&originHeight=29&originWidth=667&size=5636&status=done&style=none&width=667" alt="image.png"></p><h3 id="6、拉取ruoyi代码"><a href="#6、拉取ruoyi代码" class="headerlink" title="6、拉取ruoyi代码"></a>6、拉取<a href="https://gitee.com/y_project/RuoYi?_from=gitee_search">ruoyi</a>代码</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/gitee</span><br><span class="line">git clone git@gitee.com:y_project/RuoYi.git</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614073561883-8b5a7440-a97a-453a-bfb3-9d8c00173e41.png#align=left&display=inline&height=148&margin=%5Bobject%20Object%5D&name=image.png&originHeight=148&originWidth=650&size=19146&status=done&style=none&width=650" alt="image.png"></p><h2 id="6、安装docker"><a href="#6、安装docker" class="headerlink" title="6、安装docker"></a>6、安装<a href="https://docs.docker.com/engine/install/centos/">docker</a></h2><h3 id="1、卸载旧版本"><a href="#1、卸载旧版本" class="headerlink" title="1、卸载旧版本"></a>1、卸载旧版本</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker<span class="literal">-client</span> \</span><br><span class="line">                  docker<span class="literal">-client</span><span class="literal">-latest</span> \</span><br><span class="line">                  docker<span class="literal">-common</span> \</span><br><span class="line">                  docker<span class="literal">-latest</span> \</span><br><span class="line">                  docker<span class="literal">-latest</span><span class="literal">-logrotate</span> \</span><br><span class="line">                  docker<span class="literal">-logrotate</span> \</span><br><span class="line">                  docker<span class="literal">-engine</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614079386168-f2e89f2a-2470-41a9-987d-be928758e41a.png#align=left&display=inline&height=430&margin=%5Bobject%20Object%5D&name=image.png&originHeight=430&originWidth=761&size=42511&status=done&style=none&width=761" alt="image.png"></p><h3 id="2、安装依赖"><a href="#2、安装依赖" class="headerlink" title="2、安装依赖"></a>2、安装依赖</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install <span class="literal">-y</span> yum<span class="literal">-utils</span> device<span class="literal">-mapper</span><span class="literal">-persistent</span><span class="literal">-data</span> lvm2</span><br></pre></td></tr></table></figure><h3 id="3、添加源"><a href="#3、添加源" class="headerlink" title="3、添加源"></a>3、添加源</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum<span class="literal">-config</span><span class="literal">-manager</span> \</span><br><span class="line">    -<span class="literal">-add</span><span class="literal">-repo</span> \</span><br><span class="line">    http://mirrors.aliyun.com/docker<span class="literal">-ce</span>/linux/centos/docker<span class="literal">-ce</span>.repo</span><br></pre></td></tr></table></figure><h3 id="4、安装最新的-containerd-和-docker"><a href="#4、安装最新的-containerd-和-docker" class="headerlink" title="4、安装最新的 containerd 和 docker"></a>4、安装最新的 containerd 和 docker</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker<span class="literal">-ce</span> docker<span class="literal">-ce</span><span class="literal">-cli</span> containerd.io <span class="literal">-y</span></span><br></pre></td></tr></table></figure><p>如果安装途中报错，可以进行手动安装新版本的 containerd.io</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install <span class="literal">-y</span> https://mirrors.aliyun.com/docker<span class="literal">-ce</span>/linux/centos/<span class="number">7</span>/x86_64/edge/Packages/containerd.io<span class="literal">-1</span>.<span class="number">2.6</span><span class="literal">-3</span>.<span class="number">3</span>.el7.x86_64.rpm</span><br><span class="line">yum install docker<span class="literal">-ce</span> docker<span class="literal">-ce</span><span class="literal">-cli</span> <span class="literal">-y</span></span><br></pre></td></tr></table></figure><h3 id="5、启动-docker-并配置开机自启"><a href="#5、启动-docker-并配置开机自启" class="headerlink" title="5、启动 docker 并配置开机自启"></a>5、启动 docker 并配置开机自启</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">sudo systemctl <span class="built_in">start</span> docker</span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="6、检测-docker-版本"><a href="#6、检测-docker-版本" class="headerlink" title="6、检测 docker 版本"></a>6、检测 docker 版本</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="literal">-v</span></span><br></pre></td></tr></table></figure><h3 id="7、配置阿里云镜像加速器"><a href="#7、配置阿里云镜像加速器" class="headerlink" title="7、配置阿里云镜像加速器"></a>7、配置阿里云<a href="https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors">镜像加速器</a></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir <span class="literal">-p</span> /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://plb9xzjh.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon<span class="literal">-reload</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="7、安装-mysql"><a href="#7、安装-mysql" class="headerlink" title="7、安装 mysql"></a>7、安装 mysql</h2><h3 id="1、搜索-mysql-镜像"><a href="#1、搜索-mysql-镜像" class="headerlink" title="1、搜索 mysql 镜像"></a>1、搜索 mysql 镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614084313743-d34506d7-d3a1-4e9e-911e-69235fe40a0a.png#align=left&display=inline&height=423&margin=%5Bobject%20Object%5D&name=image.png&originHeight=423&originWidth=758&size=69577&status=done&style=none&width=758" alt="image.png"></p><h3 id="2、拉取-mysql5-7-镜像"><a href="#2、拉取-mysql5-7-镜像" class="headerlink" title="2、拉取 mysql5.7 镜像"></a>2、拉取 mysql5.7 镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614084218408-3315d8a7-0bbf-4118-b8b9-37ed5569ed01.png#align=left&display=inline&height=240&margin=%5Bobject%20Object%5D&name=image.png&originHeight=240&originWidth=690&size=26425&status=done&style=none&width=690" alt="image.png"></p><h3 id="3、查看镜像"><a href="#3、查看镜像" class="headerlink" title="3、查看镜像"></a>3、查看镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614084260645-cf40bbb3-1d46-4c65-a471-b5a2d34596b1.png#align=left&display=inline&height=48&margin=%5Bobject%20Object%5D&name=image.png&originHeight=48&originWidth=685&size=6194&status=done&style=none&width=685" alt="image.png"></p><h3 id="4、创建配置文件"><a href="#4、创建配置文件" class="headerlink" title="4、创建配置文件"></a>4、创建配置文件</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="literal">-p</span> /<span class="keyword">data</span>/docker/mysql/conf</span><br><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/docker/mysql/conf</span><br><span class="line">vim my.cnf</span><br></pre></td></tr></table></figure><p>my.cnf 文件内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">mysqld</span>]</span><br><span class="line">character<span class="literal">-set</span><span class="literal">-server</span>=utf8</span><br><span class="line"></span><br><span class="line">[<span class="type">mysql</span>]</span><br><span class="line">default<span class="literal">-character</span><span class="literal">-set</span>=utf8</span><br></pre></td></tr></table></figure><h3 id="5、启动镜像"><a href="#5、启动镜像" class="headerlink" title="5、启动镜像"></a>5、启动镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> -<span class="literal">-name</span> mysql <span class="literal">-v</span> /<span class="keyword">data</span>/docker/mysql/conf:/etc/mysql/conf.d <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="number">123456</span> <span class="literal">-d</span> mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure><p>使用<code>docker ps</code>查看正在运行的容器<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614093650068-e1dc4458-16ba-4c28-b339-b17608a5b865.png#align=left&display=inline&height=76&margin=%5Bobject%20Object%5D&name=image.png&originHeight=76&originWidth=783&size=9748&status=done&style=none&width=783" alt="image.png"></p><h3 id="6、进入-mysql-容器"><a href="#6、进入-mysql-容器" class="headerlink" title="6、进入 mysql 容器"></a>6、进入 mysql 容器</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> mysql bash</span><br><span class="line">mysql <span class="literal">-uroot</span> <span class="literal">-p123456</span></span><br><span class="line">show databases;</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614093905033-540209c8-d229-408d-9f24-ab56985e9269.png#align=left&display=inline&height=400&margin=%5Bobject%20Object%5D&name=image.png&originHeight=400&originWidth=785&size=31586&status=done&style=none&width=785" alt="image.png"></p><h3 id="7、使用-navicat-连接-mysql"><a href="#7、使用-navicat-连接-mysql" class="headerlink" title="7、使用 navicat 连接 mysql"></a>7、使用 navicat 连接 mysql</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614132389137-f60f9357-6894-4244-b8c9-2aa4dfa45f6b.png#align=left&display=inline&height=667&margin=%5Bobject%20Object%5D&name=image.png&originHeight=667&originWidth=562&size=21173&status=done&style=none&width=562" alt="image.png"><br>如果连接报错，请确保服务器的安全组中开启 3306 端口。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614132544129-4785b829-df28-4780-9870-98f63ebce088.png#align=left&display=inline&height=452&margin=%5Bobject%20Object%5D&name=image.png&originHeight=452&originWidth=1710&size=68281&status=done&style=none&width=1710" alt="image.png"><br>进入 mysql 容器，设置 root 账户密码为 123456 并且允许任何 ip 访问 mysql 服务器。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> mysql bash</span><br><span class="line">mysql <span class="literal">-uroot</span> <span class="literal">-p123456</span></span><br><span class="line">use ruoyi;</span><br><span class="line">grant all privileges on *.* to root<span class="string">@&quot;%&quot; identified by &quot;123456&quot;;</span></span><br><span class="line"><span class="string">flush privileges;</span></span><br><span class="line"><span class="string">exit</span></span><br><span class="line"><span class="string">exit</span></span><br><span class="line"><span class="string"># 重启mysql服务</span></span><br><span class="line"><span class="string">sudo docker restart mysql</span></span><br></pre></td></tr></table></figure><h3 id="8、运行项目准备"><a href="#8、运行项目准备" class="headerlink" title="8、运行项目准备"></a>8、运行项目准备</h3><h4 id="1、创建数据库以及数据库表"><a href="#1、创建数据库以及数据库表" class="headerlink" title="1、创建数据库以及数据库表"></a>1、创建数据库以及数据库表</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制需要执行的sql文件到docker的映射目录中</span></span><br><span class="line"><span class="built_in">cp</span> /<span class="keyword">data</span>/gitee/RuoYi/sql/quartz.sql /<span class="keyword">data</span>/docker/mysql/conf/</span><br><span class="line"><span class="built_in">cp</span> /<span class="keyword">data</span>/gitee/RuoYi/sql/ry_20210210.sql /<span class="keyword">data</span>/docker/mysql/conf/</span><br><span class="line"><span class="comment">#进入docker容器中，执行sql文件</span></span><br><span class="line">docker exec <span class="literal">-it</span> mysql env LANG=C.UTF<span class="literal">-8</span> bash</span><br><span class="line"><span class="comment">#连接mysql</span></span><br><span class="line">mysql <span class="literal">-uroot</span> <span class="literal">-p123456</span></span><br><span class="line"><span class="comment">#创建数据库ruoyi</span></span><br><span class="line">create database <span class="keyword">if</span> not exists ruoyi character <span class="built_in">set</span>=<span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line"><span class="comment">#进入数据库，执行sql文件</span></span><br><span class="line">use ruoyi;</span><br><span class="line">source /etc/mysql/conf.d/quartz.sql;</span><br><span class="line">source /etc/mysql/conf.d/ry_20210210.sql;</span><br><span class="line"><span class="comment">#显示创建的表</span></span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614094449922-2fced49d-6413-45f7-baf2-4ea1135f662c.png#align=left&display=inline&height=604&margin=%5Bobject%20Object%5D&name=image.png&originHeight=604&originWidth=911&size=41048&status=done&style=none&width=911" alt="image.png"></p><h4 id="2、修改项目配置"><a href="#2、修改项目配置" class="headerlink" title="2、修改项目配置"></a>2、修改项目配置</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/gitee/RuoYi/ruoyi<span class="literal">-admin</span>/src/main/resources/</span><br><span class="line"><span class="comment">#修改application.yml的项目启动端口号与文件上传路径</span></span><br><span class="line">vim application.yml</span><br><span class="line"><span class="comment">#修改application-druid.yml的数据源</span></span><br><span class="line">vim application<span class="literal">-druid</span>.yml</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">profile: /<span class="keyword">data</span>/tmp</span><br><span class="line">port: <span class="number">18081</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614094967366-a41e145e-a381-4c7d-90cf-575c39414ccd.png#align=left&display=inline&height=445&margin=%5Bobject%20Object%5D&name=image.png&originHeight=445&originWidth=955&size=37349&status=done&style=none&width=955" alt="image.png"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主库数据源</span></span><br><span class="line">master:</span><br><span class="line">url: jdbc:mysql://localhost:<span class="number">3306</span>/ruoyi?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%<span class="number">2</span>B8</span><br><span class="line">username: root</span><br><span class="line">password: <span class="number">123456</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614094858741-dbae6155-cb3f-40ff-9a18-af3da18e4783.png#align=left&display=inline&height=184&margin=%5Bobject%20Object%5D&name=image.png&originHeight=184&originWidth=1249&size=20656&status=done&style=none&width=1249" alt="image.png"></p><h4 id="3、将项目打成-jar-包"><a href="#3、将项目打成-jar-包" class="headerlink" title="3、将项目打成 jar 包"></a>3、将项目打成 jar 包</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/gitee/RuoYi/</span><br><span class="line">mvn install</span><br></pre></td></tr></table></figure><h4 id="4、启动项目"><a href="#4、启动项目" class="headerlink" title="4、启动项目"></a>4、启动项目</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="literal">-p</span> /<span class="keyword">data</span>/app/ruoyi<span class="literal">-admin</span></span><br><span class="line"><span class="built_in">cp</span> /<span class="keyword">data</span>/gitee/RuoYi/ruoyi<span class="literal">-admin</span>/target/ruoyi<span class="literal">-admin</span>.jar /<span class="keyword">data</span>/app/ruoyi<span class="literal">-admin</span>/ruoyi<span class="literal">-admin</span>.jar</span><br><span class="line"><span class="built_in">cd</span> /<span class="keyword">data</span>/app/ruoyi<span class="literal">-admin</span>/</span><br><span class="line"><span class="comment">#后台启动项目</span></span><br><span class="line">nohup java <span class="literal">-jar</span> ruoyi<span class="literal">-admin</span>.jar &amp;</span><br><span class="line"><span class="comment">#查看项目运行日志</span></span><br><span class="line">tail <span class="operator">-f</span> nohup.out</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614095622702-fb95675c-aef4-4891-bf3c-d140f8e30509.png#align=left&display=inline&height=312&margin=%5Bobject%20Object%5D&name=image.png&originHeight=312&originWidth=785&size=25903&status=done&style=none&width=785" alt="image.png"></p><h4 id="5、访问项目"><a href="#5、访问项目" class="headerlink" title="5、访问项目"></a>5、访问项目</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">120.78</span>.<span class="number">177.161</span>:<span class="number">18081</span>/</span><br></pre></td></tr></table></figure><p>如果访问不成功，请在服务器的安全组中开启 18081 端口。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614096142429-43d4371e-c31a-4ab0-b17b-938ba8b58b22.png#align=left&display=inline&height=328&margin=%5Bobject%20Object%5D&name=image.png&originHeight=328&originWidth=1688&size=43409&status=done&style=none&width=1688" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1554080/1614096181507-8d86c451-cc99-4883-9cde-4aa3c3e531eb.png#align=left&display=inline&height=557&margin=%5Bobject%20Object%5D&name=image.png&originHeight=557&originWidth=1138&size=388831&status=done&style=none&width=1138" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>try-with-resources自动关闭资源</title>
      <link href="/2021/01/27/yuque/try-with-resources%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E8%B5%84%E6%BA%90/"/>
      <url>/2021/01/27/yuque/try-with-resources%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">readData</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Reader inputString = <span class="keyword">new</span> StringReader(message);</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(inputString);</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader br1 = br) &#123;</span><br><span class="line">        <span class="keyword">return</span> br1.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jdk1.7 引入，它要求在<code>try-width-resources</code>声明中定义的变量实现了<code>AutoCloseable</code>接口，这样系统可以自动调用它们的 close 方法，从而替代了 finally 中关闭资源的功能。<br>不论 try 块中是否发生异常，都会首先自动执行 close 方法，然后才判断是否进入 catch 块。try 块中发生异常，先自动调用 close 方法，如果 close 也放生异常，catch 块只会捕捉 try 块抛出的异常，close 方法的异常会在 catch 中被压制，但是可以在 catch 块中用<code>e.getSuppressed()</code>方法来获取到压制 close 方法中的异常。<br><code>try-with-resources</code>中定义多个变量时，关闭资源的顺序是从后往前的。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
