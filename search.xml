<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>创建springboot多模块项目</title>
      <link href="/article/861d1a1b.html"/>
      <url>/article/861d1a1b.html</url>
      
        <content type="html"><![CDATA[<p>参考若依后台管理项目，感觉一个好的项目程序的健壮性十分重要，其中很多程序设计思路和技巧规范值得我们好好学习。其中碰到的第一个那便是创建 Springboot 多模块项目，实际操作中遇到很多问题，特此记录一下。</p><p>多模块项目优点：<a href="https://www.yuque.com/xihuanxiaorang/ng3te7/awrxnc%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E9%80%9A%E5%B8%B8%E7%94%B1%E4%B8%80%E4%B8%AA%E7%88%B6%E6%A8%A1%E5%9D%97%E5%92%8C%E8%8B%A5%E5%B9%B2%E4%B8%AA%E5%AD%90%E6%A8%A1%E5%9D%97%E6%9E%84%E6%88%90%EF%BC%8C%E6%AF%8F%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%AF%B9%E5%BA%94%E7%9D%80%E4%B8%80%E4%B8%AA">https://www.yuque.com/xihuanxiaorang/ng3te7/awrxnc多模块项目通常由一个父模块和若干个子模块构成，每个模块对应着一个</a> pom 文件。父模块与子模块之间通过继承与聚合相互关联。多模块适用于一些比较大的项目，通过合理的模块拆分，实现代码的复用，便于维护和管理。</p><h3 id="1、RuoYi-项目文件结构"><a href="#1、RuoYi-项目文件结构" class="headerlink" title="1、RuoYi 项目文件结构"></a>1、RuoYi 项目文件结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">com.ruoyi</span><br><span class="line">├── common            // 工具类</span><br><span class="line">│       └── annotation                    // 自定义注解</span><br><span class="line">│       └── config                        // 全局配置</span><br><span class="line">│       └── constant                      // 通用常量</span><br><span class="line">│       └── core                          // 核心控制</span><br><span class="line">│       └── enums                         // 通用枚举</span><br><span class="line">│       └── exception                     // 通用异常</span><br><span class="line">│       └── filter                        // 过滤器处理</span><br><span class="line">│       └── utils                         // 通用类处理</span><br><span class="line">├── framework         // 框架核心</span><br><span class="line">│       └── aspectj                       // 注解实现</span><br><span class="line">│       └── config                        // 系统配置</span><br><span class="line">│       └── datasource                    // 数据权限</span><br><span class="line">│       └── interceptor                   // 拦截器</span><br><span class="line">│       └── manager                       // 异步处理</span><br><span class="line">│       └── security                      // 权限控制</span><br><span class="line">│       └── web                           // 前端控制</span><br><span class="line">├── ruoyi-generator   // 代码生成（可移除）</span><br><span class="line">├── ruoyi-quartz      // 定时任务（可移除）</span><br><span class="line">├── ruoyi-system      // 系统代码</span><br><span class="line">├── ruoyi-admin       // 后台服务</span><br><span class="line">├── ruoyi-xxxxxx      // 其他模块</span><br></pre></td></tr></table></figure><h3 id="2、RuoYi-各模块间的依赖关系"><a href="#2、RuoYi-各模块间的依赖关系" class="headerlink" title="2、RuoYi 各模块间的依赖关系"></a>2、RuoYi 各模块间的依赖关系</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202110051701742.png" alt="image-20211005170125692"></p><h3 id="3、创建-Springboot-多模块项目"><a href="#3、创建-Springboot-多模块项目" class="headerlink" title="3、创建 Springboot 多模块项目"></a>3、创建 Springboot 多模块项目</h3><p>在创建多模块项目的时候，得先捋一捋每个模块的作用，搞清楚每个模块干什么用的动起手来才更加清晰，有目的性。</p><p>如上图所示，分为4个子模块和一个父模块。</p><p>其中，common 模块用于存放一些工具类，system 模块主要存放 entity，service 和 mapper 文件，framwork 模块主要用于管理框架的配置，admin 模块作为整个后台管理系统的入口，主要存放一些 controller 文件。</p><h4 id="1、创建-my-ruoyi-父模块"><a href="#1、创建-my-ruoyi-父模块" class="headerlink" title="1、创建 my-ruoyi 父模块"></a>1、创建 <code>my-ruoyi</code> 父模块</h4><p>新建项目，选择新建 maven 项目，填写所需的项目坐标。</p><p>pom.xml 文件配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">  &lt;my-ruoyi.version&gt;1.0.0-SNAPSHOT&lt;/my-ruoyi.version&gt;</span><br><span class="line">  &lt;maven-jar-plugin.version&gt;3.1&lt;/maven-jar-plugin.version&gt;</span><br><span class="line">  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.5.5&lt;/version&gt;</span><br><span class="line">      &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">      &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 通用工具--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;top.xiaorang&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;ruoyi-common&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;my-ruoyi.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 系统模块--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;top.xiaorang&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;ruoyi-system&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;my-ruoyi.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 核心模块--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;top.xiaorang&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;ruoyi-framework&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;my-ruoyi.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;modules&gt;</span><br><span class="line">  &lt;module&gt;ruoyi-common&lt;/module&gt;</span><br><span class="line">  &lt;module&gt;ruoyi-system&lt;/module&gt;</span><br><span class="line">  &lt;module&gt;ruoyi-framework&lt;/module&gt;</span><br><span class="line">  &lt;module&gt;ruoyi-admin&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">  &lt;plugins&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;maven-jar-plugin.version&#125;&lt;/version&gt;</span><br><span class="line">      &lt;configuration&gt;</span><br><span class="line">        &lt;source&gt;$&#123;java.version&#125;&lt;/source&gt;</span><br><span class="line">        &lt;target&gt;$&#123;java.version&#125;&lt;/target&gt;</span><br><span class="line">        &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt;</span><br><span class="line">      &lt;/configuration&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">  &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;repositories&gt;</span><br><span class="line">  &lt;repository&gt;</span><br><span class="line">    &lt;id&gt;public&lt;/id&gt;</span><br><span class="line">    &lt;name&gt;aliyun nexus&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">    &lt;releases&gt;</span><br><span class="line">      &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">    &lt;/releases&gt;</span><br><span class="line">  &lt;/repository&gt;</span><br><span class="line">&lt;/repositories&gt;</span><br><span class="line"></span><br><span class="line">&lt;pluginRepositories&gt;</span><br><span class="line">  &lt;pluginRepository&gt;</span><br><span class="line">    &lt;id&gt;public&lt;/id&gt;</span><br><span class="line">    &lt;name&gt;aliyun nexus&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">    &lt;releases&gt;</span><br><span class="line">      &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">    &lt;/releases&gt;</span><br><span class="line">    &lt;snapshots&gt;</span><br><span class="line">      &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">    &lt;/snapshots&gt;</span><br><span class="line">  &lt;/pluginRepository&gt;</span><br><span class="line">&lt;/pluginRepositories&gt;</span><br></pre></td></tr></table></figure><p>删除 src 目录：因为父模块不用来写代码，所以删除不必要的目录。</p><h4 id="2、创建-ruoyi-common-模块"><a href="#2、创建-ruoyi-common-模块" class="headerlink" title="2、创建 ruoyi-common 模块"></a>2、创建 <code>ruoyi-common</code> 模块</h4><p>点击 <code>my-ruoyi</code> 父模块，创建 <code>ruoyi-common</code> 公共模块。</p><p>pom.xml 文件配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;!-- 自定义验证注解 --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.validation&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;validation-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- JSON工具类 --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- lombok --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="3、创建-ruoyi-system-模块"><a href="#3、创建-ruoyi-system-模块" class="headerlink" title="3、创建 ruoyi-system 模块"></a>3、创建 <code>ruoyi-system</code> 模块</h4><p>同上面创建 <code>ruoyi-common</code> 模块一样创建 <code>ruoyi-system</code> 系统模块。</p><p>pom.xml 文件配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;!-- SpringDataJpa --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;top.xiaorang&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ruoyi-common&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>该模块主要用来编写实体类，业务层和数据访问层。</p><h4 id="4、创建-ruoyi-framework-模块"><a href="#4、创建-ruoyi-framework-模块" class="headerlink" title="4、创建 ruoyi-framework 模块"></a>4、创建 <code>ruoyi-framework</code> 模块</h4><p>同上面创建 <code>ruoyi-common</code> 模块一样创建 <code>ruoyi-framework</code> 核心模块。</p><p>pom.xml 文件配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;top.xiaorang&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ruoyi-system&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="5、创建-ruoyi-admin-模块"><a href="#5、创建-ruoyi-admin-模块" class="headerlink" title="5、创建 ruoyi-admin 模块"></a>5、创建 <code>ruoyi-admin</code> 模块</h4><p>同上面创建 <code>ruoyi-common</code> 模块一样创建 <code>ruoyi-admin</code> 后台管理模块，即 web 模块。</p><p>pom.xml 文件配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;!-- SpringBoot Web容器 --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Mysql驱动包 --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;top.xiaorang&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ruoyi-framework&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>该模块主要用来编写 Controller 层代码。</p><p>最后，使用 postman 工具来测试一下是否能够正确的访问数据库获取数据：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202110051650156.png" alt="img"></p><hr><p>代码已经上传到 GitHub，地址为 <a href="https://github.com/xihuanxiaorang/my-ruoyi">https://github.com/xihuanxiaorang/my-ruoyi</a></p><h3 id="知识点扩展重要"><a href="#知识点扩展重要" class="headerlink" title="知识点扩展重要"></a>知识点扩展重要</h3><h4 id="1、scope-import"><a href="#1、scope-import" class="headerlink" title="1、scope=import"></a>1、<code>scope=import</code></h4><p>在使用 springboot 时，项目可能需要使用自己的父模块，而不能继承 <code>spring-boot-starter-parent</code> 时，任然可以通过使用 <code>scope=import</code> 来保持依赖管理，<a href="https://docs.spring.io/spring-boot/docs/2.1.12.RELEASE/reference/html/using-boot-build-systems.html#using-boot-maven-without-a-parent">springboot 官方文档推荐配置</a>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;!-- 从Spring Boot导入依赖管理 --&gt;</span><br><span class="line">&lt;groupId&gt; org.springframework.boot &lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt; spring-boot-dependencies &lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt; 2.1 .12.RELEASE &lt;/version&gt;</span><br><span class="line">&lt;type&gt; pom &lt;/type&gt;</span><br><span class="line">&lt;scope&gt; import &lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>根据 <a href="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#dependency-scope">maven 官方文档对依赖范围</a>的描述：</p><ul><li><strong>import</strong><br>This scope is only supported on a dependency of type pom in the <dependencyManagement> section. It indicates the dependency is to be replaced with the effective list of dependencies in the specified POM’s <dependencyManagement> section. Since they are replaced, dependencies with a scope of import do not actually participate in limiting the transitivity of a dependency.</li></ul><p><code>import</code> 只能用在 <code>dependencyManagement</code> 块中，它是将 <code>spring-boot-dependencies</code> 中 <code>dependencyManagement</code> 的 <code>dependencies</code> 全部引入到当前工程的 <code>dependencyManagement</code> 中，所以不存在依赖传递。</p><h4 id="2、type-pom"><a href="#2、type-pom" class="headerlink" title="2、type=pom"></a>2、<code>type=pom</code></h4><p>根据 <a href="https://maven.apache.org/pom.html#dependencies">maven 官方文档对 type </a>的描述：</p><ul><li><strong>type</strong>:<br>Corresponds to the chosen dependency type. This defaults to jar. While it usually represents the extension on the filename of the dependency, that is not always the case: a type can be mapped to a different extension and a classifier. The type often corresponds to the packaging used, though this is also not always the case. Some examples are jar, ejb-client and test-jar: see <a href="https://maven.apache.org/ref/current/maven-core/artifact-handlers.html">default artifact handlers</a> for a list. New types can be defined by plugins that set extensions to true, so this is not a complete list.</li></ul><p>type，和被选择依赖的类型相对应，默认为 jar。通常它和依赖模块的扩展名一致，不过也不一定，因为一个模块的类型，可以被映射为不同的扩展名或分类上。通常 type 和依赖模块的 packaging 对应，尽管并不总是这样。比如 type 的值 <code>ejb-client</code>， <code>test-jar</code>，具体可以看看默认的构件处理器。这里说的是，大多数的模块，其实是有个默认的 packaging 与被依赖时候的 type 对应关系的，这个对应关系应该是有个构件处理器来决定的。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202110051650014.png" alt="img"></p><p>总结重要：</p><p><code>type=pom</code> 说白了就是为了完全继承对方的管理依赖和属性定义。绿线解释有些时候 <code>dependency</code> 里面的 <code>type</code> 不用加，有些时候不加却报错（即通常为了获取继承来的 <code>pom.xml</code> 里面的 <code>properties</code> 里面的各种包的版本号之类的信息，没有的话就不能确定版本，当然报错）</p><h4 id="3、maven-compiler-plugin-插件"><a href="#3、maven-compiler-plugin-插件" class="headerlink" title="3、maven-compiler-plugin 插件"></a>3、<code>maven-compiler-plugin</code> 插件</h4><p>maven 是个项目管理工具，如果不告诉它代码要使用什么样的 jdk 版本编译，它就会使用 <code>maven-complier-plugin</code> 编译插件默认的 jdk 版本来编译代码，这样就很容易出现版本不匹配的问题，以至于可能导致编译不通过的问题。例如代码中要是使用了 jdk1.8 的新特性（函数式编程），但是 maven 在编译的时候使用的是 jdk7，那带有 jdk1.8 新特性的代码是不可能编译通过的。为了避免此类问题的出现，在构件 mvane 项目的时候，应该先配置 <code>maven-compiler-plugin</code> 插件，指定项目源码的 jdk 版本，编译后的 jdk 版本，以及编码方式。</p><p>从 <code>3.8.0</code> 版本后，<code>maven-compiler-plugin</code> 插件默认的 jdk 版本就由 1.5 变成 1.6 。但是这任然跟不上 jdk 的更新速度，目前大多数系统都在使用 jdk1.8。</p><p><code>maven-compiler-plugin</code> 插件中 <code>compiler:compile</code> 有如下关于 jdk 版本变更的描述：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202110051651177.png" alt="img"></p><p>详细配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.1&lt;/version&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">    &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h4 id="4、-Transient注解"><a href="#4、-Transient注解" class="headerlink" title="4、@Transient注解"></a>4、@Transient注解</h4><p>实体类中如果使用了 @Table 注解后，要想添加表中不存在的字段，就可以使用 @Transient 注解。@Transient 注解表示该属性并非是一个要映射到数据库的字段，ORM框架会忽略该属性。注解可以加在属性上，也可以加上 get() 方法上。</p><h4 id="5、-EqualsAndHashCode注解"><a href="#5、-EqualsAndHashCode注解" class="headerlink" title="5、@EqualsAndHashCode注解"></a>5、@EqualsAndHashCode注解</h4><p>这个注解的作用就是自动给 model bean 实现 equals 方法和 hashcode 方法。</p><p>如果使用 @EqualsAndHashCode(callSuper=false)，就表示不调用父类的属性，如果子类的属性完全相同，那么 hashcode 的值就相同啦，用 equals 方法比较的时候就会返回 true。如果使用 @EqualsAndHashCode(callSuper=true)，那就是用自己的属性和父类继承的属性一起生成 hashcode，equals 方法比较的结果返回 false。</p><h4 id="6、-DynamicInsert-和-DynamicUodate-注解"><a href="#6、-DynamicInsert-和-DynamicUodate-注解" class="headerlink" title="6、@DynamicInsert 和 @DynamicUodate 注解"></a>6、@DynamicInsert 和 @DynamicUodate 注解</h4><p>@DynamicInsert：默认为 true，指定用于 insert 的 sql 将会再运行时动态生成，并且只包含那些非空值字段。</p><p>@DynamicUpdate：默认为 true，指定用于 update 的 sql 将会在运行时动态生成，并且只更新那些改变过的字段。</p><p>如果希望在新增的时候只包含设置了值的字段，更新时只包含发生变化的字段，那么就可以使用 @DynamicInsert 和 @DynamicUpdate 注解。</p><h4 id="7、-IdClass-注解"><a href="#7、-IdClass-注解" class="headerlink" title="7、@IdClass 注解"></a>7、@IdClass 注解</h4><p>@IdClass 注解可以实现一个实体类中有两个主键，即联合主键。首先我们需要创建一个联合主键类并且实现序列化接口，类名为 SysUserRoleKey，该类中有 userId 和 roleId 这两个字段，这个类的要求有三个：</p><ol><li><p>需要实现 Serializable 接口</p></li><li><p>需要一个默认的 public 的 无参构造方法，使用 Lamada 的 @NoArgsConstructor 注解帮我们实现，或者如果没有定义有参构造的情况下，这个注解也可以不需要，因为有默认的无参构造方法</p></li><li><p>重写 equals 和 hashCode 方法。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202110051651925.png" alt="img"></p><p>使用的时候，在 SysUserRole 实体类上使用 @IdClass(value = SysUserRoleKey.class) 注解，然后 userId 和 roleId 都分别使用 @Id 注解即可。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202110051650032.png" alt="img"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>创建 springboot 多模块项目：</p><p><a href="https://blog.csdn.net/MacWx/article/details/103787209">https://blog.csdn.net/MacWx/article/details/103787209</a></p><p>type=pom 的理解：</p><p><a href="https://codejam.blog.csdn.net/article/details/119420702?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-14.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-14.no_search_link">https://codejam.blog.csdn.net/article/details/119420702?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-14.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-14.no_search_link</a></p>]]></content>
      
      
      <categories>
          
          <category> 若依 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 若依 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Validation</title>
      <link href="/article/59f158be.html"/>
      <url>/article/59f158be.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://beanvalidation.org/2.0/">beanvalidation</a>是一种规范，<a href="http://hibernate.org/validator/documentation/">hibernate-validator</a>是它的最佳实现。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p><code>beanvalidation</code> 所有注解在 <code>javax.validation.constraints</code> 包下：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222317971.png" alt="img"></p><p><code>hibernate-validator</code> 所有注解在 <code>org.hibernate.validator.constraints</code> 包下：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222316886.png" alt="img"></p><h2 id="常用注解解释"><a href="#常用注解解释" class="headerlink" title="常用注解解释"></a>常用注解解释</h2><table><thead><tr><th><strong>约束注解</strong></th><th><strong>详细信息</strong></th></tr></thead><tbody><tr><td><code>@Null</code></td><td>被注释的元素必须为 <code>null</code></td></tr><tr><td><code>@NotNull</code></td><td>被注释的元素必须不为 <code>null</code></td></tr><tr><td><code>@AssertTrue</code></td><td>被注释的元素必须为 <code>true</code></td></tr><tr><td><code>@AssertFalse</code></td><td>被注释的元素必须为 <code>false</code></td></tr><tr><td><code>@Min(value)</code></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><code>@Max(value)</code></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><code>@DecimalMin(value)</code></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><code>@DecimalMax(value)</code></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><code>@Size(max, min)</code></td><td>被注释的元素的大小必须在指定的范围内</td></tr><tr><td><code>@Digits (integer, fraction)</code></td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td><code>@Past</code></td><td>被注释的元素必须是一个过去的日期</td></tr><tr><td><code>@Future</code></td><td>被注释的元素必须是一个将来的日期</td></tr><tr><td><code>@Pattern(value)</code></td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td><code>@Email</code></td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td><code>@Length</code></td><td>被注释的字符串的大小必须在指定的范围内</td></tr><tr><td><code>@NotEmpty</code></td><td>被注释的字符串的必须非空</td></tr><tr><td><code>@Range</code></td><td>被注释的元素必须在合适的范围内</td></tr></tbody></table><h2 id="约束与校验器类的绑定原理"><a href="#约束与校验器类的绑定原理" class="headerlink" title="约束与校验器类的绑定原理"></a>约束与校验器类的绑定原理</h2><p>在 <code>org.hibernate.validator.internal.metadata.core.ConstraintHelper</code> 类下：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222316993.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222316082.png" alt="img"></p><ul><li>从上述两幅图中可以看出，NotEmpty注解可以校验字符串，集合，Map，数组类型的属性，而为了满足一个注解可以校验多种类型的数据，所有需要为这个注解适配多个对应的校验器。</li><li>注解名称是xxx，那么校验器的名称就是xxxValidator。</li></ul><h2 id="自定义消息模板"><a href="#自定义消息模板" class="headerlink" title="自定义消息模板"></a>自定义消息模板</h2><p>消息模板中可以使用 el 表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;名字不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min(value = 18, message = &quot;年龄小于&#123;value&#125;,不得进入&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h2><p>注解上不区分组的话，会使用默认的组：<code>javax.validation.groups.Default</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;名字不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min(value = 18, message = &quot;年龄小于&#123;value&#125;,不得进入&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特别注意的地方<strong><strong>：</strong></strong>如果使用了某个组进行校验的话，那么默认的组就不会进行校验****。</strong>就比如校验 Update 组，那么就算 name 名字为空也不会再校验。如果想在对某个组进行校验，默认的组同时被校验的话，可以让 <strong>分组接口继承 Default 接口即可****。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;名字不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min(value = 18, message = &quot;年龄小于&#123;value&#125;,不得进入&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="级联校验"><a href="#级联校验" class="headerlink" title="级联校验"></a>级联校验</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;名字不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min(value = 18, message = &quot;年龄小于&#123;value&#125;,不得进入&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;年级不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Grade grade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>被引用对象加上 @valid 注解才能完成级联校验</strong>。也就是说在校验 User 对象里的属性的时候，能一起校验 Grade 对象。</p><h2 id="自定义校验规则"><a href="#自定义校验规则" class="headerlink" title="自定义校验规则"></a>自定义校验规则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;Update.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;名字不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min(value = 18, message = &quot;年龄小于&#123;value&#125;,不得进入&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;年级不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Grade grade;</span><br><span class="line">    <span class="meta">@UserStatus</span></span><br><span class="line">    <span class="keyword">private</span> Integer userStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Insert</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;UserStatusValidator.class&#125;)</span></span><br><span class="line"><span class="meta">@Target(&#123;FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UserStatus &#123;</span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;用户状态不正确，值必须在1001或者1002或者1003中&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserStatusValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">UserStatus</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(Integer value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="number">1001</span>, <span class="number">1002</span>, <span class="number">1003</span>).contains(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当现有的约束注解不满足实际项目需要时，可以仿照现有的 <code>NotEmpty </code> 注解和 <code>NotEmptyValidatorForArray</code> 校验器进行改造以下，就可以实现自己的校验规则。</p><h2 id="Validated自动校验"><a href="#Validated自动校验" class="headerlink" title="@Validated自动校验"></a>@Validated自动校验</h2><p>在 springboot 中可以使用在控制器中给每个需要进行校验的方法的参数前加上 <code>@Validated</code> 注解，在参数校验不通过的时候会自动抛出 <code>BindException</code> 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(<span class="meta">@Validated(&#123;User.Update.class&#125;)</span> User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;更新成功！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(value = BindException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespBean <span class="title">entityException</span><span class="params">(BindException e)</span> </span>&#123;</span><br><span class="line">        String msg = e.getBindingResult().getFieldError().getDefaultMessage();</span><br><span class="line">        <span class="keyword">return</span>  RespBean.error(HttpStatus.BAD_REQUEST.value(), msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> validation </tag>
            
            <tag> java开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web端文件直传阿里OSS</title>
      <link href="/article/7b44e484.html"/>
      <url>/article/7b44e484.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、STS临时授权访问OSS"><a href="#1、STS临时授权访问OSS" class="headerlink" title="1、STS临时授权访问OSS"></a>1、<a href="https://help.aliyun.com/document_detail/100624.htm?spm=a2c4g.11186623.2.5.64596d13Wa7CXp#concept-xzh-nzk-2gb">STS临时授权访问OSS</a></h2><p>OSS 可以通过阿里云STS（Security Token Service）进行临时授权访问。通过STS，可以为第三方应用或子用户（即用户身份由自己管理的用户）颁发一个自定义时效和权限的访问凭证。</p><h3 id="1、使用场景"><a href="#1、使用场景" class="headerlink" title="1、使用场景"></a>1、使用场景</h3><p>对于您本地身份系统所管理的用户，例如您的App的用户、您的企业本地账号、第三方App的用户，将这部分用户称为联盟用户。此外，联盟用户还可以是您创建的能访问您的阿里云资源应用程序的用户。这些联盟用户可能需要直接访问OSS资源。</p><p>对于这部分联盟用户，通过阿里云STS服务为阿里云账号（或RAM用户）提供临时访问权限管理。您不需要透露云账号（或RAM用户）的长期密钥（如登录密码、AccessKey），只需要生成一个临时访问凭证给联盟用户使用即可。这个凭证的访问权限及有效期限都可以由您自定义。您不需要关心权限撤销问题，临时访问凭证过期后会自动失效。</p><p>通过STS生成的临时访问凭证包括安全令牌 （SecurityToken）、临时访问密钥STS AK（AccessKeyId和AccessKeySecret）。使用AccessKey方法与您在使用阿里云账户或RAM用户AccessKey发送请求时的方法相同。需要注意的是在每个向OSS发送的请求中必须携带安全令牌。</p><h3 id="2、实现原理"><a href="#2、实现原理" class="headerlink" title="2、实现原理"></a>2、实现原理</h3><p>以一个移动App举例。假设你是一个移动App开发者，打算使用阿里云OSS服务来保存App的终端用户数据，并且保证每个App用户之间的数据隔离，放置一个App用户获取到其他App用户的数据。你可以使用STS授权用户直接访问OSS。</p><p>使用STS授权用户直接访问OSS的流程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222304042.png" alt="img"></p><ol><li>App用户登录。App用户和云账号无关，它是App的终端用户，App服务器支持App用户登录。对于每个有效的App用户来说，需要App服务器能定义出每个App用户的最小访问权限。</li></ol><ol><li>App服务器请求STS服务获取一个安全令牌（SecurityToken）。在调用STS之前，App服务器需要确定App用户的最小访问权限（用RAM Policy来自定义授权策略）以及凭证的过期时间。然后通过扮演角色（AssumeRole）来获取一个代表角色身份的安全令牌（SecurityToken）。</li></ol><ol><li>STS返回给App服务器一个临时访问凭证，包括一个安全令牌（SecurityToken）、临时访问密钥（AccessKeyId和AccessKeySecret）以及过期时间。</li></ol><ol><li>App服务器将临时访问凭证返回给App客户端，App客户端可以缓存这个凭证。当凭证失效时，App客户端需要向App服务器申请新的临时访问凭证。例如，临时访问凭证有效期为1小时，那么App客户端可以每30分钟向App服务器请求更新临时访问凭证。</li></ol><ol><li>App客户端使用本地缓存的临时访问凭证去请求OSS API。OSS收到访问请求后，会通过STS服务来验证访问凭证，正确响应用户请求。</li></ol><h3 id="3、操作步骤"><a href="#3、操作步骤" class="headerlink" title="3、操作步骤"></a>3、操作步骤</h3><h4 id="1、创建子账号"><a href="#1、创建子账号" class="headerlink" title="1、创建子账号"></a>1、创建子账号</h4><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222304018.png" alt="img"></p><p>复制保存一下创建用户的accessKeyId和accessKeySecret，后面代码中会用到，然后点击添加权限，为其添加 <code>AliyunSTSAssumeRoleAccess</code> 权限。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222304052.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222304570.png" alt="img"></p><h4 id="2、创建权限策略"><a href="#2、创建权限策略" class="headerlink" title="2、创建权限策略"></a>2、创建权限策略</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">     &#123;</span><br><span class="line">           &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">           &quot;Action&quot;: [</span><br><span class="line">             &quot;oss:PutObject&quot;</span><br><span class="line">           ],</span><br><span class="line">           &quot;Resource&quot;: [</span><br><span class="line">             &quot;acs:oss:*:*:bucketName&quot;,</span><br><span class="line">             &quot;acs:oss:*:*:bucketName/*&quot;</span><br><span class="line">           ]</span><br><span class="line">     &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222304087.png" alt="img"></p><h4 id="3、创建角色并记录角色ARN"><a href="#3、创建角色并记录角色ARN" class="headerlink" title="3、创建角色并记录角色ARN"></a>3、创建角色并记录角色ARN</h4><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222304151.png" alt="img"></p><p>为创建的角色添加第二步创建的自定义权限策略：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222304175.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222304342.png" alt="img"></p><p>复制保存创建角色的ARN，后面代码中用到：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222304222.png" alt="img"></p><h4 id="4、调用STS服务接口AssumeRole获取临时访问凭证"><a href="#4、调用STS服务接口AssumeRole获取临时访问凭证" class="headerlink" title="4、调用STS服务接口AssumeRole获取临时访问凭证"></a>4、调用STS服务接口<a href="https://help.aliyun.com/document_detail/28763.htm#reference-clc-3sv-xdb">AssumeRole</a>获取临时访问凭证</h4><h5 id="1、pom-xml文件添加依赖"><a href="#1、pom-xml文件添加依赖" class="headerlink" title="1、pom.xml文件添加依赖"></a>1、pom.xml文件添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-sts<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2、后端代码实现"><a href="#2、后端代码实现" class="headerlink" title="2、后端代码实现"></a>2、后端代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;ali.oss&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliOssConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String roleArn;</span><br><span class="line">    <span class="keyword">private</span> String regionId;</span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line">&#125;</span><br><span class="line">ali:</span><br><span class="line">  oss:</span><br><span class="line">    endpoint: oss-cn-shenzhen.aliyuncs.com</span><br><span class="line">    access-key-id: 用户的accessKeyId</span><br><span class="line">    access-key-secret: 用户的accessKeySecret</span><br><span class="line">    role-arn: 角色的ARN</span><br><span class="line">    region-id: cn-shenzhen</span><br><span class="line">    bucket: best-favorites</span><br></pre></td></tr></table></figure><p>调用<a href="https://help.aliyun.com/document_detail/28763.htm#reference-clc-3sv-xdb">AssumeRole</a>接口之后返回给前端的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliOssTokenVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String region;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String stsToken;</span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取临时访问凭证的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AliOssTokenVo <span class="title">getOssToken</span><span class="params">()</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">    IClientProfile profile = DefaultProfile.getProfile(aliOssConfig.getRegionId(), aliOssConfig.getAccessKeyId(), aliOssConfig.getAccessKeySecret());</span><br><span class="line">    DefaultAcsClient client = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">    <span class="keyword">final</span> AssumeRoleRequest request = <span class="keyword">new</span> AssumeRoleRequest();</span><br><span class="line">    request.setRoleArn(aliOssConfig.getRoleArn());</span><br><span class="line">    request.setRoleSessionName(<span class="string">&quot;best-favorites&quot;</span>);</span><br><span class="line">    request.setDurationSeconds(<span class="number">1000L</span>);</span><br><span class="line">    AssumeRoleResponse response = client.getAcsResponse(request);</span><br><span class="line">    AssumeRoleResponse.Credentials credentials = response.getCredentials();</span><br><span class="line">    String accessKeyId = credentials.getAccessKeyId();</span><br><span class="line">    String accessKeySecret = credentials.getAccessKeySecret();</span><br><span class="line">    String securityToken = credentials.getSecurityToken();</span><br><span class="line">    <span class="keyword">return</span> AliOssTokenVo.builder()</span><br><span class="line">        .accessKeyId(accessKeyId)</span><br><span class="line">        .accessKeySecret(accessKeySecret)</span><br><span class="line">        .stsToken(securityToken)</span><br><span class="line">        .region(<span class="string">&quot;oss-&quot;</span> + aliOssConfig.getRegionId())</span><br><span class="line">        .bucket(aliOssConfig.getBucket())</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、前端代码实现"><a href="#3、前端代码实现" class="headerlink" title="3、前端代码实现"></a>3、前端代码实现</h5><p>api，调用后端接口获取临时访问凭证ossToken</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getOssToken = <span class="function">() =&gt;</span> service.get(<span class="string">&#x27;/ali-oss/token&#x27;</span>);</span><br></pre></td></tr></table></figure><p>store/modules/oss模块</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getOssToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/business&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> oss = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">accessKeyId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">accessKeySecret</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">stsToken</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">region</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">bucket</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="attr">SET_OSS_TOKEN</span>: <span class="function">(<span class="params">state, &#123; accessKeyId, accessKeySecret, stsToken, region, bucket &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      state.accessKeyId = accessKeyId;</span><br><span class="line">      state.accessKeySecret = accessKeySecret;</span><br><span class="line">      state.stsToken = stsToken;</span><br><span class="line">      state.region = region;</span><br><span class="line">      state.bucket = bucket;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">GetOssToken</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        getOssToken()</span><br><span class="line">          .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> ossToken = res.result;</span><br><span class="line">            commit(<span class="string">&#x27;SET_OSS_TOKEN&#x27;</span>, ossToken);</span><br><span class="line">            resolve(ossToken);</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> oss;</span><br></pre></td></tr></table></figure><p>上传组件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">a-upload</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">list-type</span>=<span class="string">&quot;picture-card&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">:before-upload</span>=<span class="string">&quot;beforeUpload&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">:custom-request</span>=<span class="string">&quot;customRequest&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            @<span class="attr">preview</span>=<span class="string">&quot;handlePreview&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            @<span class="attr">change</span>=<span class="string">&quot;handleChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;fileList.length &lt; 1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;plus&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ant-upload-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Upload</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">a-upload</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">a-modal</span> <span class="attr">:visible</span>=<span class="string">&quot;previewVisible&quot;</span> <span class="attr">:footer</span>=<span class="string">&quot;null&quot;</span> @<span class="attr">cancel</span>=<span class="string">&quot;handleCancel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;example&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;previewImage&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">a-modal</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="function"><span class="title">beforeUpload</span>(<span class="params">file</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isJpgOrPng = file.type === <span class="string">&#x27;image/jpeg&#x27;</span> || file.type === <span class="string">&#x27;image/png&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!isJpgOrPng) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$message.error(<span class="string">&#x27;只能上传图片！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> isLt10M = file.size / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">if</span> (!isLt10M) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传图片必须小于10M！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isJpgOrPng &amp;&amp; isLt10M;</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">handleUpload</span>(<span class="params">&#123; file &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> ossToken = <span class="keyword">await</span> <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;GetOssToken&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> client = <span class="keyword">new</span> OSS(&#123;</span><br><span class="line">        <span class="attr">accessKeyId</span>: ossToken.accessKeyId,</span><br><span class="line">        <span class="attr">accessKeySecret</span>: ossToken.accessKeySecret,</span><br><span class="line">        <span class="attr">stsToken</span>: ossToken.stsToken,</span><br><span class="line">        <span class="attr">region</span>: ossToken.region,</span><br><span class="line">        <span class="attr">bucket</span>: ossToken.bucket,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">let</span> result = <span class="keyword">await</span> client.put(file.name, file);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;result:&#x27;</span>, result);</span><br><span class="line">      file.url = result.url;</span><br><span class="line">      <span class="built_in">this</span>.fileList = [...this.fileList, file];</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;uploadSuccess&#x27;</span>, file.url);</span><br><span class="line">      <span class="built_in">this</span>.$message.success(<span class="string">&#x27;文件上传成功！&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line">      <span class="built_in">this</span>.$message.error(<span class="string">&#x27;文件上传失败！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>由于是使用web端直传，点击上传之后可能会出现如下错误，说明阿里云oss需要配置一下<strong>跨域访问</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222304572.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222305453.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222304989.png" alt="img"></p><p>点击确定之后，重新上传，可以看到这时就已经上传成功！</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java开发 </tag>
            
            <tag> 案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/article/7af799fd.html"/>
      <url>/article/7af799fd.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、反射机制"><a href="#1、反射机制" class="headerlink" title="1、反射机制"></a>1、反射机制</h2><h3 id="1、Java-Reflection"><a href="#1、Java-Reflection" class="headerlink" title="1、Java Reflection"></a>1、Java Reflection</h3><ol><li>反射被视为<strong>动态语言</strong>的关键，反射机制允许程序在执行期间借助于<strong>Reflection API</strong>取得任何类的内部信息(比如：成员变量，构造器，成员方法)，并能直接操作任意对象的内部属性及方法。</li><li>加载完类之后，在堆内存中就产生了一个<strong>Class</strong>类型的对象(<strong>一个类只有一个Class对象)<strong>，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：</strong>反射</strong>。</li></ol><h3 id="2、反射机制原理图"><a href="#2、反射机制原理图" class="headerlink" title="2、反射机制原理图"></a>2、反射机制原理图</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222319914.png" alt="img"></p><h3 id="3、Java反射机制提供的功能："><a href="#3、Java反射机制提供的功能：" class="headerlink" title="3、Java反射机制提供的功能："></a>3、Java反射机制提供的功能：</h3><ol><li><p>在运行时判断任意一个对象所属的类</p></li><li><p>在运行时构造任意一个类的对象</p></li><li><p>在运行时判断任意一个类所具有的成员变量和方法</p></li><li><p>在运行时获取泛型信息</p></li><li><p>在运行时调用任意一个对象的成员变量和方法</p></li><li><p>在运行时处理注解</p></li><li><p>生成动态代理</p></li></ol><h3 id="4、反射相关的主要类"><a href="#4、反射相关的主要类" class="headerlink" title="4、反射相关的主要类"></a>4、反射相关的主要类</h3><ol><li><p><strong>java.lang.Class</strong>：代表一个类，<strong>Class</strong>对象表示某个类加载后在堆内存中的对象</p></li><li><p><strong>java.lang.reflect.Method</strong>：代表类的方法，<strong>Method</strong>对象表示某个类的方法</p></li><li><p><strong>java.lang.reflect.Field</strong>：代表类的成员变量，<strong>Field</strong>对象表示某个类的成员变量</p></li><li><p><strong>java.lang.reflect.Constructor****：</strong>代表类的构造方法，<strong>Constructor</strong>对象表示构造器</p></li></ol><h3 id="5、反射优点和缺点"><a href="#5、反射优点和缺点" class="headerlink" title="5、反射优点和缺点"></a>5、反射优点和缺点</h3><ul><li>优点：可以动态的创建和使用对象（就是框架底层核心），使用灵活，没有反射机制，框架技术就失去底层支撑</li><li>缺点：使用反射基本是解释执行，对执行速度有影响</li></ul><h3 id="6、反射调用优化-关闭访问检查"><a href="#6、反射调用优化-关闭访问检查" class="headerlink" title="6、反射调用优化-关闭访问检查"></a>6、反射调用优化-关闭访问检查</h3><ol><li><p><strong>Method、Field、Constructor</strong>对象都有<code>setAccessible()</code>方法</p></li><li><p><code>setAccessible()</code>作用是启动和禁用访问安全检查开关</p></li><li><p>参数为<strong>true</strong>表示：反射的对象在使用时取消访问检查，提高反射的效率；参数为<strong>false</strong>表示：反射的对象执行访问检查</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222319669.png" alt="img"></p><h2 id="2、理解Class类并获取Class实例"><a href="#2、理解Class类并获取Class实例" class="headerlink" title="2、理解Class类并获取Class实例"></a>2、理解Class类并获取Class实例</h2><h3 id="1、Class类"><a href="#1、Class类" class="headerlink" title="1、Class类"></a>1、Class类</h3><p>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，<strong>JRE</strong>都为其保留一个不变的<strong>Class</strong>类型的对象。一个<strong>Class</strong>对象包含了某个特定结构(<strong>class/inteface/enum.annotation/primitive type/void/[]</strong>)<strong>的</strong>有关信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">GenericDeclaration</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">Type</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">AnnotatedElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ANNOTATION= <span class="number">0x00002000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ENUM      = <span class="number">0x00004000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SYNTHETIC = <span class="number">0x00001000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        registerNatives();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Private constructor. Only the Java Virtual Machine creates Class objects.   //私有构造器，只有JVM才能调用创建Class对象</span></span><br><span class="line"><span class="comment">     * This constructor is not used and prevents the default constructor being</span></span><br><span class="line"><span class="comment">     * generated.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Class</span><span class="params">(ClassLoader loader)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Initialize final field for classLoader.  The initialization value of non-null</span></span><br><span class="line">        <span class="comment">// prevents future JIT optimizations from assuming this final field is null.</span></span><br><span class="line">        classLoader = loader;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Class</strong>本身也是一个类，因此也继承<strong>Object</strong>类</p></li><li><p><strong>Class</strong>类只存在私有构造函数，因此<strong>Class</strong>对象只能由JVM创建和加载</p></li><li><p>对于某个类的<strong>Class</strong>对象，在内存只有一份，因为类只加载一次</p></li><li><p>每个类的实例都会记得自己是由哪个<strong>Class</strong>实例所生成</p></li><li><p>通过<strong>Class</strong>可以完整地得到一个类中地所有被加载的结构</p></li><li><p><strong>Class</strong>对象存放在堆内存中</p></li><li><p>类的字节码二进制数据存放在方法区中，有的地方成为类的元数据(包括：方法，变量名，方法名，访问权限等)</p></li><li><p><strong>Class</strong>类是<strong>Reflection</strong>的根源，针对任何你想动态加载、运行的类，唯有先获得相应的<strong>Class</strong>对象</p></li></ul><h3 id="2、常用方法"><a href="#2、常用方法" class="headerlink" title="2、常用方法"></a>2、常用方法</h3><table><thead><tr><th><strong>方法名</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>static Class forName(String name)</td><td>返回执指定类名的Class对象</td></tr><tr><td>Object newInstance()</td><td>调用缺省构造函数，返回该Class对象的一个实例</td></tr><tr><td>getName()</td><td>返回此Class对象所表示的实体(类|接口|数组类|基本类型|void)名称</td></tr><tr><td>Class[] getInterfaces()</td><td>获取当前Class对象的接口</td></tr><tr><td>ClassLoder getClassLoder()</td><td>返回该类的类加载器</td></tr><tr><td>Class getSuperClass()</td><td>返回表示此Class所表示的实体的超类的Class</td></tr><tr><td>Constructor[] getConstructors()</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回Field对象的一个数组</td></tr><tr><td>Method getMethod(String name, Class… paramTypes)</td><td>返回一个Method对象，此对象的形参类型为paramType</td></tr></tbody></table><h3 id="3、哪些类型有Class对象"><a href="#3、哪些类型有Class对象" class="headerlink" title="3、哪些类型有Class对象"></a>3、哪些类型有Class对象</h3><ol><li><p>外部类、成员内部类、静态内部类、局部内部类、匿名内部类</p></li><li><p>接口</p></li><li><p>数组</p></li><li><p>枚举</p></li><li><p>注解</p></li><li><p>基本数据类型</p></li><li><p>void</p></li></ol><h3 id="4、获取Class类的实例"><a href="#4、获取Class类的实例" class="headerlink" title="4、获取Class类的实例"></a>4、获取Class类的实例</h3><ol><li> <strong>前提</strong>：若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高</li></ol><p><strong>实例</strong>：<code>Class clazz = String.class</code></p><ol><li> <strong>前提</strong>：已知某个类的实例，调用该实例的getClass()方法获取<strong>Class</strong>对象</li></ol><p><strong>实例</strong>：<code>Class clazz = &quot;abc&quot;.getClass()</code></p><ol><li> <strong>前提****：</strong>已知一个类的全类名，且该类在类路径下，可通过<strong>Class</strong>类的静态方法**forName()**获取，可能抛出ClassNotFoundException</li></ol><p><strong>实例</strong>：<code>Class clazz = Class.forName(&quot;java.lang.String&quot;)</code></p><h2 id="3、类加载"><a href="#3、类加载" class="headerlink" title="3、类加载"></a>3、类加载</h2><h3 id="1、基本说明"><a href="#1、基本说明" class="headerlink" title="1、基本说明"></a>1、基本说明</h3><p>反射机制时Java实现动态语言的关键，也就是通过反射实现类的动态加载。</p><ol><li>静态加载：<strong>编译</strong>时加载相关类，如果没有则报错，依赖性太强</li><li>动态加载：运行时加载需要的类，如果运行时不用该类，即使不存在该类，也不报错，降低了依赖性</li></ol><h3 id="2、类加载过程图"><a href="#2、类加载过程图" class="headerlink" title="2、类加载过程图"></a>2、类加载过程图</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222319762.png" alt="img"></p><h3 id="3、类加载三个阶段完成任务"><a href="#3、类加载三个阶段完成任务" class="headerlink" title="3、类加载三个阶段完成任务"></a>3、类加载三个阶段完成任务</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222319942.png" alt="img"></p><h4 id="1、加载阶段"><a href="#1、加载阶段" class="headerlink" title="1、加载阶段"></a>1、加载阶段</h4><p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区中类数据的访问入口（及引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222319758.png" alt="img"></p><h4 id="2、连接阶段"><a href="#2、连接阶段" class="headerlink" title="2、连接阶段"></a>2、连接阶段</h4><ol><li>验证：</li></ol><ul><li><ul><li>目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全</li></ul></li><li><p>包括：文件格式验证(是否以魔数 <code>oxcafebabe</code> 开头)、元数据验证、字节码验证和符号以用验证</p></li><li><ul><li>可以考虑使用 <code>-Xverify:none</code> 参数来关闭大部分的类验证措施，缩短虚拟机类加载的时间</li></ul></li></ul><ol><li>准备：JVM 会在该阶段为静态变量(<strong>static</strong>)分配内存并<strong>设置默认初始值</strong>，这些变量所使用的内存都将在方法区中进行分配</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类加载的连接阶段——准备</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoad02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性（成员变量，字段）</span></span><br><span class="line">    <span class="comment">//分析类加载的连接阶段——准备，属性是如何处理：</span></span><br><span class="line">    <span class="comment">//1. n1是成员变量，不是静态变量，因此在准备阶段，不会分配内存</span></span><br><span class="line">    <span class="comment">//2. n2是静态变量，分配内存，n2是默认初始化0，而不是20</span></span><br><span class="line">    <span class="comment">//3. n3是static final常量，和静态变量不一样，因为一旦赋值就不变，n3 = 30</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> n1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n2 = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> n3 = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>解析：虚拟机常量池内的符号引用(常量名)替换为直接引用(地址)的过程</li></ol><h4 id="3、初始化："><a href="#3、初始化：" class="headerlink" title="3、初始化："></a>3、初始化：</h4><ul><li><ul><li>到初始化阶段，才真正开始执行类中定义的 Java 程序代码，此阶段是执行**类构造器<clinit>()**方法的过程。</li></ul></li><li><p><strong>类构造器<clinit>()方法是由编译器自动收集类中所有静态变量的赋值动作和静态代码块中的语句合并产生的。</strong>(类构造器是构造类信息的，不是构造该类对象的构造器)</p></li><li><ul><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化</li></ul></li><li><p>虚拟机会保证一个类的**<clinit>()<strong>方法在多线程环境中被正确加锁和同步，如果多个线程同时区初始化一个类，那么只会有一个线程去执行这个类的</strong><clinit>()<strong>方法，其他线程都需要阻塞等待，直到活动线程执行</strong><clinit>()**方法完毕</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类加载初始化阶段</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoad03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载B类，并生成对应的Class类对象</span></span><br><span class="line">        <span class="comment">//2.连接 num = 0;</span></span><br><span class="line">        <span class="comment">//3.初始化阶段：依次自动收集类中的所有静态变量的赋值动作和静态代码块中的语句，并合并</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            clinit()&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;B 静态代码块被执行&quot;);</span></span><br><span class="line"><span class="comment">                //num = 300;</span></span><br><span class="line"><span class="comment">                num = 100;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            合并：num = 100;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//new B(); //类加载</span></span><br><span class="line">        <span class="comment">//System.out.println(B.num); //100，如果直接使用类的静态属性，也会导致类的加载</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载类的时候，是有同步机制控制</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            protected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException &#123;</span></span><br><span class="line"><span class="comment">                //正因为有这个机制，才能保证某个类在内存中，只有一个 Class 对象</span></span><br><span class="line"><span class="comment">                synchronized (getClassLoadingLock(name)) &#123;</span></span><br><span class="line"><span class="comment">                    //...</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 静态代码块被执行&quot;</span>);</span><br><span class="line">        num = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B 构造器被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、什么时候发生类初始化"><a href="#4、什么时候发生类初始化" class="headerlink" title="4、什么时候发生类初始化"></a>4、什么时候发生类初始化</h3><h4 id="1、类的主动引用-一定会发生类的初始化"><a href="#1、类的主动引用-一定会发生类的初始化" class="headerlink" title="1、类的主动引用(一定会发生类的初始化)"></a>1、类的主动引用(一定会发生类的初始化)</h4><ul><li><p>当虚拟机启动，先初始化<strong>main</strong>方法所在的类</p></li><li><p><strong>new</strong>一个类的对象</p></li><li><p>调用类的静态成员(除了final常量)和静态方法</p></li><li><p>使用<strong>java.lang.reflect</strong>包的方法对类进行反射调用</p></li><li><p>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</p></li></ul><h4 id="2、类的被动引用-不会发生类的初始化"><a href="#2、类的被动引用-不会发生类的初始化" class="headerlink" title="2、类的被动引用(不会发生类的初始化)"></a>2、类的被动引用(不会发生类的初始化)</h4><ul><li><p>当访问一个静态域时，只有真正声明这个域的类才会被初始化</p></li><li><p>当通过子类引用父类的静态变量，不会导致子类初始化</p></li><li><p>通过数组定义类引用，不会触发此类的初始化</p></li><li><p>引用常量不会触发此类的初始化(常量在连接阶段就存入调用类的常量池中了)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222319773.png" alt="img"></p><h2 id="4、ClassLoader的理解"><a href="#4、ClassLoader的理解" class="headerlink" title="4、ClassLoader的理解"></a>4、ClassLoader的理解</h2><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222319565.png" alt="img"></p><h4 id="1、类加载器的作用"><a href="#1、类加载器的作用" class="headerlink" title="1、类加载器的作用"></a>1、类加载器的作用</h4><ul><li>类加载器的作用：将<strong>Class</strong>文件字节码内容加载到内存中，并将这些<strong>静态数据转换成方法区的运行时的数据结构</strong>，然后在堆中生成一个代表这个类的<strong>java.lang.Class</strong>对象，作为方法区中类数据的访问入口</li><li>类缓存：标准的<strong>JavaSE</strong>类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载(缓存)一段时间，不过<strong>jvm</strong>垃圾回收机制可以回收这些<strong>Class</strong>对象</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222319866.png" alt="img"></p><h4 id="2、最常用方法"><a href="#2、最常用方法" class="headerlink" title="2、最常用方法"></a>2、最常用方法</h4><p><strong>getResoureAsStream(String str)：</strong>获取类路径下的指定文件的输入流。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = this.getClass().getClassLoader().getResourceAsStream(&quot;test.properties&quot;);</span><br></pre></td></tr></table></figure><h2 id="5、获取运行时的完整结构"><a href="#5、获取运行时的完整结构" class="headerlink" title="5、获取运行时的完整结构"></a>5、获取运行时的完整结构</h2><h3 id="1、Class类及其用法"><a href="#1、Class类及其用法" class="headerlink" title="1、Class类及其用法"></a>1、Class类及其用法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>forName()</td><td>获取Class对象的一个引用</td></tr><tr><td>getName()</td><td>取全限定的类名(包括包名)，即类的完整名字</td></tr><tr><td>getSimpleName()</td><td>获取类名(不包括包名)</td></tr><tr><td>isInterface()</td><td>判断Class对象是否是表示一个接口</td></tr><tr><td>getInterfaces()</td><td>返回Class对象数组，表示Class对象所引用的类所实现的所有接口</td></tr><tr><td>getSupercalss()</td><td>返回Class对象，表示Class对象所引用的类所继承的直接基类。应用该方法可在运行时发现一个对象完整的继承结构。</td></tr><tr><td>getAnnotations()</td><td>以Annotation[]形式返回注解信息</td></tr><tr><td>newInstance()</td><td>返回一个Oject对象，是实现“虚拟构造器”的一种途径。使用该方法创建的类，必须带有无参的构造器。</td></tr><tr><td>getFields()</td><td>获得所有public修饰的属性，包含本类以及父类的</td></tr><tr><td>getDeclaredFields()</td><td>获得本类中的所有属性</td></tr><tr><td>getMethods()</td><td>获取所有pubilc修饰的方法，包含本类以及父类的</td></tr><tr><td>getDeclaredMethods()</td><td>获取本类中的所有方法</td></tr><tr><td>getConstructots()</td><td>获取本类中所有public修饰的构造器</td></tr><tr><td>getDeclaredConstructors()</td><td>获取本类中的所有构造器</td></tr></tbody></table><h3 id="2、Field类及其用法"><a href="#2、Field类及其用法" class="headerlink" title="2、Field类及其用法"></a>2、Field类及其用法</h3><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Field</td><td>getDeclaredField(String name)</td><td>获取指定name名称的(包含private修饰的)字段，不包括继承的字段</td></tr><tr><td>Field[]</td><td>getDeclaredFields()</td><td>获取Class对象所表示的类或接口的所有(包含private修饰的)字段,不包括继承的字段</td></tr><tr><td>Field</td><td>getField(String name)</td><td>获取指定name名称、具有public修饰的字段，包含继承字段</td></tr><tr><td>Field[]</td><td>getFields()</td><td>获取修饰符为public的字段，包含继承字段</td></tr></tbody></table><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>void</td><td>set(Object obj, Object value)</td><td>将指定对象变量上此 Field 对象表示的字段设置为指定的新值。</td></tr><tr><td>Object</td><td>get(Object obj)</td><td>返回指定对象上此 Field 表示的字段的值</td></tr><tr><td>Class&lt;?&gt;</td><td>getType()</td><td>返回一个 Class 对象，它标识了此Field 对象所表示字段的声明类型。</td></tr><tr><td>String</td><td>getName()</td><td>返回此 Field 对象表示的字段的名称</td></tr><tr><td>void</td><td>setAccessible(boolean flag)</td><td>将此对象的 accessible 标志设置为指示的布尔值,即设置其可访问性</td></tr></tbody></table><h3 id="3、Method类及其用法"><a href="#3、Method类及其用法" class="headerlink" title="3、Method类及其用法"></a>3、Method类及其用法</h3><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Method</td><td>getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回一个指定参数的Method对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。</td></tr><tr><td>Method[]</td><td>getDeclaredMethods()</td><td>返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</td></tr><tr><td>Method</td><td>getMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。</td></tr><tr><td>Method[]</td><td>getMethods()</td><td>返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。</td></tr></tbody></table><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Object</td><td>invoke(Object obj, Object… args)</td><td>对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。</td></tr><tr><td>Class&lt;?&gt;</td><td>getReturnType()</td><td>返回一个 Class 对象，该对象描述了此 Method 对象所表示的方法的正式返回类型,即方法的返回类型</td></tr><tr><td>Class&lt;?&gt;[]</td><td>getParameterTypes()</td><td>按照声明顺序返回 Class 对象的数组，这些对象描述了此 Method 对象所表示的方法的形参类型。即返回方法的参数类型组成的数组</td></tr><tr><td>String</td><td>getName()</td><td>以 String 形式返回此 Method 对象表示的方法名称，即返回方法的名称</td></tr></tbody></table><h3 id="4、Constructor类及其用法"><a href="#4、Constructor类及其用法" class="headerlink" title="4、Constructor类及其用法"></a>4、Constructor类及其用法</h3><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Constructor</td><td>getConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回指定参数类型、具有public访问权限的构造函数对象</td></tr><tr><td>Constructor&lt;?&gt;[]</td><td>getConstructors()</td><td>返回所有具有public访问权限的构造函数的Constructor对象数组</td></tr><tr><td>Constructor</td><td>getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回指定参数类型、所有声明的（包括private）构造函数对象</td></tr><tr><td>Constructor&lt;?&gt;[]</td><td>getDeclaredConstructor()</td><td>返回所有声明的（包括private）构造函数对象</td></tr><tr><td>T</td><td>newInstance()</td><td>调用无参构造器创建此 Class 对象所表示的类的一个新实例。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射获取类的结构信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionUtils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">api_02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//得到Class对象</span></span><br><span class="line">        Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;com.hspedu.reflection.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//getDeclaredFields:获取本类中所有属性</span></span><br><span class="line">        <span class="comment">//规定 说明: 默认修饰符 是0 ， public  是1 ，private 是 2 ，protected 是 4 , static 是 8 ，final 是 16</span></span><br><span class="line">        Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有属性=&quot;</span> + declaredField.getName()</span><br><span class="line">                    + <span class="string">&quot; 该属性的修饰符值=&quot;</span> + declaredField.getModifiers()</span><br><span class="line">                    + <span class="string">&quot; 该属性的类型=&quot;</span> + declaredField.getType());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredMethods:获取本类中所有方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName()</span><br><span class="line">                    + <span class="string">&quot; 该方法的访问修饰符值=&quot;</span> + declaredMethod.getModifiers()</span><br><span class="line">                    + <span class="string">&quot; 该方法返回类型&quot;</span> + declaredMethod.getReturnType());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出当前这个方法的形参数组情况</span></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = declaredMethod.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;该方法的形参类型=&quot;</span> + parameterType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredConstructors:获取本类中所有构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = declaredConstructor.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;该构造器的形参类型=&quot;</span> + parameterType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一组方法API</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">api_01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//得到Class对象</span></span><br><span class="line">        Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;com.hspedu.reflection.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//getName:获取全类名</span></span><br><span class="line">        System.out.println(personCls.getName());</span><br><span class="line">        <span class="comment">//getSimpleName:获取简单类名</span></span><br><span class="line">        System.out.println(personCls.getSimpleName());</span><br><span class="line">        <span class="comment">//getFields:获取所有public修饰的属性，包含本类以及父类的</span></span><br><span class="line">        Field[] fields = personCls.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的属性=&quot;</span> + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredFields:获取本类中所有属性</span></span><br><span class="line">        Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有属性=&quot;</span> + declaredField.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getMethods:获取所有public修饰的方法，包含本类以及父类的</span></span><br><span class="line">        Method[] methods = personCls.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的方法=&quot;</span> + method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredMethods:获取本类中所有方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getConstructors: 获取所有public修饰的构造器，包含本类</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = personCls.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类的构造器=&quot;</span> + constructor.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredConstructors:获取本类中所有构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getPackage:以Package形式返回 包信息</span></span><br><span class="line">        System.out.println(personCls.getPackage());</span><br><span class="line">        <span class="comment">//getSuperClass:以Class形式返回父类信息</span></span><br><span class="line">        Class&lt;?&gt; superclass = personCls.getSuperclass();</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的class对象=&quot;</span> + superclass);</span><br><span class="line">        <span class="comment">//getInterfaces:以Class[]形式返回接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = personCls.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接口信息=&quot;</span> + anInterface);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getAnnotations:以Annotation[] 形式返回注解信息</span></span><br><span class="line">        Annotation[] annotations = personCls.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注解信息=&quot;</span> + annotation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IA</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">IA</span>, <span class="title">IB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> age; <span class="comment">// 4 + 8 = 12</span></span><br><span class="line">    String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> sal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> sal)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java开发 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解</title>
      <link href="/article/a70f4376.html"/>
      <url>/article/a70f4376.html</url>
      
        <content type="html"><![CDATA[<p>注解时JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它主要的作用有以下四方面：</p><ul><li><p>生成文档，通过代码里标识的元数据生成javadoc文档。</p></li><li><p>编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。</p></li><li><p>编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。</p></li><li><p>运动时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入案例。</p></li></ul><p>注解的常见分类：</p><ul><li><p><strong>Java内置注解注解，</strong>包括<code>@Override</code>、<code>@Deprecated</code>、<code>@SupperssWarnings</code>，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。</p></li><li><p><strong>元注解</strong>，元注解用于定义注解的注解，包括<code>@Retention</code>、<code>@Target</code>、<code>@Inherited</code>、<code>@Documented</code>，分别用于标明注解被保留的阶段、标明注解使用的范围、标明注解可以继承、标明是否生成javadoc文档。</p></li><li><p><strong>自定义注解</strong>，可以根据自己的需求定义注解，并可以用元注解对自定义注解进行注解。</p></li></ul><h2 id="1、Java内置注解"><a href="#1、Java内置注解" class="headerlink" title="1、Java内置注解"></a>1、Java内置注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 重载父类的test方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 被弃用的方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">oldMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 忽略告警</span></span><br><span class="line"><span class="comment">        * </span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">processList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK1.5 开始自带的标准注解，包括<code>@Override</code>、<code>@Deprecated</code>、<code>@SuppressWarnings</code>：</p><h3 id="1、-Override"><a href="#1、-Override" class="headerlink" title="1、@Override"></a>1、@Override</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从定义可以看出，这个注解可以被用来修饰方法，并且它只在编译时有效，在编译后的class文件中便不再存在。这个注解的作用就是告诉编译器被修饰的方法是重写父类中签名相同的方法，编译器会对此做出检查，若发现父类中不存在这个方法或是存在的方法签名不同，则会报错。</p><h3 id="2、-Deprecated"><a href="#2、-Deprecated" class="headerlink" title="2、@Deprecated"></a>2、@Deprecated</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从定义可以看出，它会被文档化，能够保留到运行时，能够修饰构造方法、属性、局部变量、方法、包、参数、类型。这个注解的作用是告诉编译器被修饰的程序元素已被”废弃”，不再建议用户使用。</p><h3 id="3、-SupressWarnings"><a href="#3、-SupressWarnings" class="headerlink" title="3、@SupressWarnings"></a>3、@SupressWarnings</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它能够修饰的程序元素包括类型、属性、方法、参数、构造器、局部变量，只能存活在源码时，取值为String[]。它的作用是告诉编译器忽略指定的警告信息，它可以取的值如下所示：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>all</td><td>抑制所有警告</td></tr><tr><td>boxing</td><td>抑制装箱、拆箱操作时候的警告</td></tr><tr><td>cast</td><td>抑制映射相关的警告</td></tr><tr><td>dep-ann</td><td>抑制启用注释的警告</td></tr><tr><td>deprecation</td><td>抑制过期方法警告</td></tr><tr><td>fallthrough</td><td>抑制确在switch中缺失breaks的警告</td></tr><tr><td>finally</td><td>抑制finally模块没有返回的警告</td></tr><tr><td>hiding</td><td>抑制与隐藏变数的区域变数相关的警告</td></tr><tr><td>incomplete-switch</td><td>忽略没有完整的switch语句</td></tr><tr><td>nls</td><td>忽略非nls格式的字符</td></tr><tr><td>null</td><td>忽略对null的操作</td></tr><tr><td>rawtype</td><td>使用generics时忽略没有指定相应的类型，抑制泛型警告</td></tr><tr><td>restriction</td><td>抑制与使用不建议或禁止参照相关的警告</td></tr><tr><td>serial</td><td>忽略在serializable类中没有声明serialVersionUID变量</td></tr><tr><td>static-access</td><td>抑制不正确的静态访问方式警告</td></tr><tr><td>synthetic-access</td><td>抑制子类没有按最优方法访问内部类的警告</td></tr><tr><td>unchecked</td><td>抑制没有进行类型检查操作的警告</td></tr><tr><td>unqualified-field-access</td><td>抑制没有权限访问的域的警告</td></tr><tr><td>unused</td><td>抑制没被使用过的代码的警告</td></tr></tbody></table><h2 id="2、元注解"><a href="#2、元注解" class="headerlink" title="2、元注解"></a>2、元注解</h2><p>上述的内置注解的定义中使用了一些元注解（用于定义注解的注解），在JDK1.5中提供了4个标准的元注解：<code>@Target</code>、<code>@Retention</code>、<code>@Documented</code>、<code>@Inherited</code>，在JDK1.8中提供了两个元注解<code>@Repeatable</code>和<code>@Native</code>。</p><h3 id="1、-Target"><a href="#1、-Target" class="headerlink" title="1、@Target"></a>1、@Target</h3><p>Target注解的作用是：描述注解的使用范围(即：被修饰的注解可以用在什么地方)</p><p>Target注解用来说明那些被它所注解的注解类可修饰的对象范围：注解可以用于修饰 packages、types(类、接口、枚举、注解类)、类成员(方法、构造方法、成员变量、枚举值)、方法参数和本地变量(如循环变量、catch参数)，在定义注解类时使用了 @Target 能够更加清晰的知道它能够被用来修饰哪些对象，它的取值范围定义在 ElementType 枚举中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ElementType</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    TYPE, <span class="comment">// 类、接口、枚举类</span></span><br><span class="line"> </span><br><span class="line">    FIELD, <span class="comment">// 成员变量（包括：枚举常量）</span></span><br><span class="line"> </span><br><span class="line">    METHOD, <span class="comment">// 成员方法</span></span><br><span class="line"> </span><br><span class="line">    PARAMETER, <span class="comment">// 方法参数</span></span><br><span class="line"> </span><br><span class="line">    CONSTRUCTOR, <span class="comment">// 构造方法</span></span><br><span class="line"> </span><br><span class="line">    LOCAL_VARIABLE, <span class="comment">// 局部变量</span></span><br><span class="line"> </span><br><span class="line">    ANNOTATION_TYPE, <span class="comment">// 注解类</span></span><br><span class="line"> </span><br><span class="line">    PACKAGE, <span class="comment">// 可用于修饰：包</span></span><br><span class="line"> </span><br><span class="line">    TYPE_PARAMETER, <span class="comment">// 类型参数，JDK 1.8 新增</span></span><br><span class="line"> </span><br><span class="line">    TYPE_USE <span class="comment">// 使用类型的任何地方，JDK 1.8 新增</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、-Retention"><a href="#2、-Retention" class="headerlink" title="2、@Retention"></a>2、@Retention</h3><p>Retention注解的作用是：描述注解保留的时间范围(即：被描述的注解在它所修饰的类中可以被保留到何时)</p><p>Retention注解用来限定那些被它所注解的注解类在注解到其他类上以后，可被保留到何时，一共有三种策略，定义在 RetentionPolicy 枚举中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RetentionPolicy</span> </span>&#123;</span><br><span class="line">    SOURCE,    <span class="comment">// 源文件保留</span></span><br><span class="line">    CLASS,       <span class="comment">// 编译期保留，默认值</span></span><br><span class="line">    RUNTIME   <span class="comment">// 运行期保留，可通过反射去获取注解信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、-Documented"><a href="#3、-Documented" class="headerlink" title="3、@Documented"></a>3、@Documented</h3><p>Documented注解的作用是：描述在使用 javadoc 工具为类生成帮助文档的时候是否要保留其注解信息</p><h3 id="4、-Inherited"><a href="#4、-Inherited" class="headerlink" title="4、@Inherited"></a>4、@Inherited</h3><p>Inherited注解的作用是：被它修饰的 Annotation 将具有继承性。如果某个类使用了被 @Inherited 修饰的 Annotation，则其子类将自动具有该注解</p><h2 id="3、注解与反射接口"><a href="#3、注解与反射接口" class="headerlink" title="3、注解与反射接口"></a>3、注解与反射接口</h2><p>定义注解之后，如果获取注解中的内容呢？反射包 <code>java.lang.reflect</code> 下的 AnnotatedElement 接口提供这些方法。这里注意：只有注解被定义为 runtime 后，该注解才能是运行时可见，当 class 文件被装载时被保存在 class 文件中的 annotation 才会被虚拟机读取</p><p>AnnotatedElement 接口是所有程序元素(Class、Method和Constructor)的父接口，所以程序通过反射获取了某个类的 AnnotatedElement 对象之后，程序就可以调用该对象的方法来访问 Annotation 信息。</p><ul><li><code>boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</code></li></ul><p>判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false。注意：此方法会忽略注解对应的注解容器</p><ul><li><code>&lt;T extends Annotation&gt; T getAnnotation(Class&lt;T&gt; annotationClass)</code></li></ul><p>返回该程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null</p><ul><li><code>Annotation[] getAnnotations()</code></li></ul><p>返回该程序元素上存在的所有注解，若没有注解，返回长度为0的数组</p><ul><li><code>&lt;T extends Annotation&gt; T[] getAnnotationsByType(Class&lt;T&gt; anotationClass)</code></li></ul><p>返回该程序元素上存在的、指定类型的注解数组。没有注解对应类型的注解时，返回长度为0的数组。该方法的调用者可以随意修改返回的数组，而不会对其他调用者返回的数组产生任何影响。<code>getAnnotationsByType</code>方法与<code>getAnnotation</code>的区别在于，<code>getAnnotationsByType</code>会检测注解对应的重复注解容器。若程序元素为类，当前类上找不到注解，且该注解为可继承的，则会去父类上检测对应的注解。</p><ul><li><code>&lt;T extends Annotation&gt; getDeclaredAnnotation(Class&lt;T&gt; annotationClass)</code></li></ul><p>返回直接存在于此元素上的所有注解。与此接口中的其他方法不同，该方法将忽略继承的注解。如果没有注解直接存在于此元素上，则返回null</p><ul><li><code>&lt;T extends Annotation&gt; T[] getDeclaredAnnotationsByType(Class&lt;T&gt; annotationClass)</code></li></ul><p>返回直接存在于此元素上的所有注解。于此接口中的其他方法不同，将方法将忽略继承的注释</p><ul><li><code>Annotation[] getDeclaredAnnotations()</code></li></ul><p>返回直接存在于此元素上的所有注解以及注解对应的重复注解容器。于此接口中的其他方法不同，该方法将忽略继承的注解。如果没有注解直接存在于此元素上，则返回长度为0的数组。该方法的调用者可以随意修改返回的数组，而不会对其他调用者返回的数组产生任何影响。</p><h2 id="4、自定义注解"><a href="#4、自定义注解" class="headerlink" title="4、自定义注解"></a>4、自定义注解</h2><ul><li>定义自己的注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyMethodAnnotation &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">title</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMethodAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@MyMethodAnnotation(title = &quot;toStringMethod&quot;, description = &quot;override toString method&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Override toString method&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@MyMethodAnnotation(title = &quot;old static method&quot;, description = &quot;deprecated old static method&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">oldMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;old method, don&#x27;t use it.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;deprecation&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@MyMethodAnnotation(title = &quot;test method&quot;, description = &quot;suppress warning static method&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">genericsTest</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        List l = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        l.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        oldMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用反射接口获取注解信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取所有methods</span></span><br><span class="line">        Method[] methods = TestMethodAnnotation.class.getClassLoader()</span><br><span class="line">                .loadClass((<span class="string">&quot;com.pdai.java.annotation.TestMethodAnnotation&quot;</span>))</span><br><span class="line">                .getMethods();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="comment">// 方法上是否有MyMethodAnnotation注解</span></span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(MyMethodAnnotation.class)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 获取并遍历方法上的所有注解</span></span><br><span class="line">                    <span class="keyword">for</span> (Annotation anno : method.getDeclaredAnnotations()) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;Annotation in Method &#x27;&quot;</span></span><br><span class="line">                                + method + <span class="string">&quot;&#x27; : &quot;</span> + anno);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获取MyMethodAnnotation对象信息</span></span><br><span class="line">                    MyMethodAnnotation methodAnno = method</span><br><span class="line">                            .getAnnotation(MyMethodAnnotation.class);</span><br><span class="line"></span><br><span class="line">                    System.out.println(methodAnno.title());</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException | ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试的输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Annotation in Method <span class="string">&#x27;public static void com.pdai.java.annotation.TestMethodAnnotation.oldMethod()&#x27;</span> : <span class="meta">@java</span>.lang.Deprecated()</span><br><span class="line">Annotation in Method <span class="string">&#x27;public static void com.pdai.java.annotation.TestMethodAnnotation.oldMethod()&#x27;</span> : <span class="meta">@com</span>.pdai.java.annotation.MyMethodAnnotation(title=old <span class="keyword">static</span> method, description=deprecated old <span class="keyword">static</span> method)</span><br><span class="line">old <span class="keyword">static</span> method</span><br><span class="line">Annotation in Method <span class="string">&#x27;public static void com.pdai.java.annotation.TestMethodAnnotation.genericsTest() throws java.io.FileNotFoundException&#x27;</span> : <span class="meta">@com</span>.pdai.java.annotation.MyMethodAnnotation(title=test method, description=suppress warning <span class="keyword">static</span> method)</span><br><span class="line">test method</span><br><span class="line">Annotation in Method <span class="string">&#x27;public java.lang.String com.pdai.java.annotation.TestMethodAnnotation.toString()&#x27;</span> : <span class="meta">@com</span>.pdai.java.annotation.MyMethodAnnotation(title=toStringMethod, description=override toString method)</span><br><span class="line">toStringMethod</span><br></pre></td></tr></table></figure><h2 id="5、自定义注解和AOP-通过切面实现解耦"><a href="#5、自定义注解和AOP-通过切面实现解耦" class="headerlink" title="5、自定义注解和AOP-通过切面实现解耦"></a>5、自定义注解和AOP-通过切面实现解耦</h2><p>最为常见的就是使用 Spring AOP 切面实现<strong>统一的操作日志管理</strong>，下面是一个开源项目中的例子(只展示主要代码)，展示下如何通过注解实现解耦的</p><ul><li>自定义Log注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.PARAMETER, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模块 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">title</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BusinessType <span class="title">businessType</span><span class="params">()</span> <span class="keyword">default</span> BusinessType.OTHER</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作人类别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OperatorType <span class="title">operatorType</span><span class="params">()</span> <span class="keyword">default</span> OperatorType.MANAGE</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否保存请求的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSaveRequestData</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现日志的切面，对自定义注解Log作切点进行拦截，即对注解了@Log的方法进行切点拦截</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置织入点 - 自定义注解的包路径</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.xxx.aspectj.lang.annotation.Log)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理完请求后执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;logPointCut()&quot;, returning = &quot;jsonResult&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(JoinPoint joinPoint, Object jsonResult)</span> </span>&#123;</span><br><span class="line">        handleLog(joinPoint, <span class="keyword">null</span>, jsonResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截异常操作</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;logPointCut()&quot;, throwing = &quot;e&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterThrowing</span><span class="params">(JoinPoint joinPoint, Exception e)</span> </span>&#123;</span><br><span class="line">        handleLog(joinPoint, e, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleLog</span><span class="params">(<span class="keyword">final</span> JoinPoint joinPoint, <span class="keyword">final</span> Exception e, Object jsonResult)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获得注解</span></span><br><span class="line">            Log controllerLog = getAnnotationLog(joinPoint);</span><br><span class="line">            <span class="keyword">if</span> (controllerLog == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取当前的用户</span></span><br><span class="line">            User currentUser = ShiroUtils.getSysUser();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// *========数据库日志=========*//</span></span><br><span class="line">            OperLog operLog = <span class="keyword">new</span> OperLog();</span><br><span class="line">            operLog.setStatus(BusinessStatus.SUCCESS.ordinal());</span><br><span class="line">            <span class="comment">// 请求的地址</span></span><br><span class="line">            String ip = ShiroUtils.getIp();</span><br><span class="line">            operLog.setOperIp(ip);</span><br><span class="line">            <span class="comment">// 返回参数</span></span><br><span class="line">            operLog.setJsonResult(JSONObject.toJSONString(jsonResult));</span><br><span class="line"></span><br><span class="line">            operLog.setOperUrl(ServletUtils.getRequest().getRequestURI());</span><br><span class="line">            <span class="keyword">if</span> (currentUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">                operLog.setOperName(currentUser.getLoginName());</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotNull(currentUser.getDept())</span><br><span class="line">                        &amp;&amp; StringUtils.isNotEmpty(currentUser.getDept().getDeptName())) &#123;</span><br><span class="line">                    operLog.setDeptName(currentUser.getDept().getDeptName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                operLog.setStatus(BusinessStatus.FAIL.ordinal());</span><br><span class="line">                operLog.setErrorMsg(StringUtils.substring(e.getMessage(), <span class="number">0</span>, <span class="number">2000</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置方法名称</span></span><br><span class="line">            String className = joinPoint.getTarget().getClass().getName();</span><br><span class="line">            String methodName = joinPoint.getSignature().getName();</span><br><span class="line">            operLog.setMethod(className + <span class="string">&quot;.&quot;</span> + methodName + <span class="string">&quot;()&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置请求方式</span></span><br><span class="line">            operLog.setRequestMethod(ServletUtils.getRequest().getMethod());</span><br><span class="line">            <span class="comment">// 处理设置注解上的参数</span></span><br><span class="line">            getControllerMethodDescription(controllerLog, operLog);</span><br><span class="line">            <span class="comment">// 保存数据库</span></span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordOper(operLog));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exp) &#123;</span><br><span class="line">            <span class="comment">// 记录本地异常日志</span></span><br><span class="line">            log.error(<span class="string">&quot;==前置通知异常==&quot;</span>);</span><br><span class="line">            log.error(<span class="string">&quot;异常信息:&#123;&#125;&quot;</span>, exp.getMessage());</span><br><span class="line">            exp.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取注解中对方法的描述信息 用于Controller层注解</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> log 日志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operLog 操作日志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getControllerMethodDescription</span><span class="params">(Log log, OperLog operLog)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 设置action动作</span></span><br><span class="line">        operLog.setBusinessType(log.businessType().ordinal());</span><br><span class="line">        <span class="comment">// 设置标题</span></span><br><span class="line">        operLog.setTitle(log.title());</span><br><span class="line">        <span class="comment">// 设置操作人类别</span></span><br><span class="line">        operLog.setOperatorType(log.operatorType().ordinal());</span><br><span class="line">        <span class="comment">// 是否需要保存request，参数和值</span></span><br><span class="line">        <span class="keyword">if</span> (log.isSaveRequestData()) &#123;</span><br><span class="line">            <span class="comment">// 获取参数的信息，传入到数据库中。</span></span><br><span class="line">            setRequestValue(operLog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求的参数，放到log中</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operLog</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRequestValue</span><span class="params">(OperLog operLog)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String[]&gt; map = ServletUtils.getRequest().getParameterMap();</span><br><span class="line">        String params = JSONObject.toJSONString(map);</span><br><span class="line">        operLog.setOperParam(StringUtils.substring(params, <span class="number">0</span>, <span class="number">2000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否存在注解，如果存在就获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Log <span class="title">getAnnotationLog</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) signature;</span><br><span class="line">        Method method = methodSignature.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> method.getAnnotation(Log.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用@Log注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/system/dept&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">&quot;system/dept&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IDeptService deptService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增保存部门</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Log(title = &quot;部门管理&quot;, businessType = BusinessType.INSERT)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;system:dept:add&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">addSave</span><span class="params">(<span class="meta">@Validated</span> Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (UserConstants.DEPT_NAME_NOT_UNIQUE.equals(deptService.checkDeptNameUnique(dept))) &#123;</span><br><span class="line">            <span class="keyword">return</span> error(<span class="string">&quot;新增部门&#x27;&quot;</span> + dept.getDeptName() + <span class="string">&quot;&#x27;失败，部门名称已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> toAjax(deptService.insertDept(dept));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Log(title = &quot;部门管理&quot;, businessType = BusinessType.UPDATE)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;system:dept:edit&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/edit&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">editSave</span><span class="params">(<span class="meta">@Validated</span> Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (UserConstants.DEPT_NAME_NOT_UNIQUE.equals(deptService.checkDeptNameUnique(dept))) &#123;</span><br><span class="line">            <span class="keyword">return</span> error(<span class="string">&quot;修改部门&#x27;&quot;</span> + dept.getDeptName() + <span class="string">&quot;&#x27;失败，部门名称已存在&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dept.getParentId().equals(dept.getDeptId())) &#123;</span><br><span class="line">            <span class="keyword">return</span> error(<span class="string">&quot;修改部门&#x27;&quot;</span> + dept.getDeptName() + <span class="string">&quot;&#x27;失败，上级部门不能是自己&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> toAjax(deptService.updateDept(dept));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Log(title = &quot;部门管理&quot;, businessType = BusinessType.DELETE)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;system:dept:remove&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/remove/&#123;deptId&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">remove</span><span class="params">(<span class="meta">@PathVariable(&quot;deptId&quot;)</span> Long deptId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (deptService.selectDeptCount(deptId) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> AjaxResult.warn(<span class="string">&quot;存在下级部门,不允许删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (deptService.checkDeptExistUser(deptId)) &#123;</span><br><span class="line">            <span class="keyword">return</span> AjaxResult.warn(<span class="string">&quot;部门存在用户,不允许删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> toAjax(deptService.deleteDeptById(deptId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，你也可以看到权限管理也是通过类似的注解(<code>@RequirePermissions</code>)机制来实现的。所以可以看到，通过注解+AOP最终的目标是为了实现模块的解耦。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java开发 </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发</title>
      <link href="/article/a6b8861e.html"/>
      <url>/article/a6b8861e.html</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>要实现借助公众号给系统中的用户发送通知，则至关重要的一步就是将公众号用户与系统用户绑定起来。这样在系统中需要发送通知的时候，就可以知道对哪个关注了公众号的用户发送通知。</p><h2 id="1、接口测试号"><a href="#1、接口测试号" class="headerlink" title="1、接口测试号"></a>1、<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">接口测试号</a></h2><h3 id="1-1、登录微信公众平台测试号接口"><a href="#1-1、登录微信公众平台测试号接口" class="headerlink" title="1.1、登录微信公众平台测试号接口"></a>1.1、登录微信公众平台测试号接口</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222307026.png" alt="img"></p><h3 id="1-2、填写接口配置信息"><a href="#1-2、填写接口配置信息" class="headerlink" title="1.2、填写接口配置信息"></a>1.2、填写接口配置信息</h3><p>该步骤需要使用到内网穿透工具<a href="https://www.yuque.com/xihuanxiaorang/ng3te7/delw5o%E3%80%82%E6%8F%90%E4%BA%A4%E9%85%8D%E7%BD%AE%E7%9A%84%E6%97%B6%E5%80%99%E4%BC%9A%E6%8A%8A%E8%BF%99%E4%B8%AAtoken%E5%8F%91%E9%80%81%E5%88%B0%E5%BE%AE%E4%BF%A1%E5%B9%B3%E5%8F%B0%EF%BC%8C%E7%84%B6%E5%90%8E%E5%BE%AE%E4%BF%A1%E5%B9%B3%E5%8F%B0%E4%BC%9A%E8%AF%B7%E6%B1%82%E6%AD%A4URL%E8%B0%83%E7%94%A8%E5%BC%80%E5%8F%91%E7%9A%84%E5%BE%AE%E4%BF%A1%E6%9C%8D%E5%8A%A1%EF%BC%8C%E9%AA%8C%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E5%90%88%E6%B3%95%E6%80%A7%E3%80%82">https://www.yuque.com/xihuanxiaorang/ng3te7/delw5o。提交配置的时候会把这个token发送到微信平台，然后微信平台会请求此URL调用开发的微信服务，验证服务的可用性和合法性。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URL:http://intelliws.vaiwan.com/api/wx/portal/appID</span><br><span class="line">Token:intelliws</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222307258.png" alt="img"></p><h3 id="1-3、开发环境准备"><a href="#1-3、开发环境准备" class="headerlink" title="1.3、开发环境准备"></a>1.3、开发环境准备</h3><h4 id="1-3-1、引入-wx-java-mp-spring-boot-starter-依赖"><a href="#1-3-1、引入-wx-java-mp-spring-boot-starter-依赖" class="headerlink" title="1.3.1、引入 wx-java-mp-spring-boot-starter 依赖"></a>1.3.1、引入 <code>wx-java-mp-spring-boot-starter</code> 依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wx-java-mp-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.5.B<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2、配置文件"><a href="#1-3-2、配置文件" class="headerlink" title="1.3.2、配置文件"></a>1.3.2、配置文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">wx.mp.app-id</span>=<span class="string">wxe04ed9ab275e518f</span></span><br><span class="line"><span class="meta">wx.mp.secret</span>=<span class="string">dc8ab44fbd2be76a1690f9acedbe1c18</span></span><br><span class="line"><span class="meta">wx.mp.token</span>=<span class="string">intelliws</span></span><br></pre></td></tr></table></figure><h4 id="1-3-3、编写controller"><a href="#1-3-3、编写controller" class="headerlink" title="1.3.3、编写controller"></a>1.3.3、编写controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/wx/portal/&#123;appid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeiXinMpController</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WeiXinMpController.class);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WxMpService wxMpService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeiXinMpController</span><span class="params">(WxMpService wxMpService)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.wxMpService = wxMpService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">authGet</span><span class="params">(<span class="meta">@PathVariable</span> String appid,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@RequestParam(name = &quot;signature&quot;, required = false)</span> String signature,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@RequestParam(name = &quot;timestamp&quot;, required = false)</span> String timestamp,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@RequestParam(name = &quot;nonce&quot;, required = false)</span> String nonce,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@RequestParam(name = &quot;echostr&quot;, required = false)</span> String echostr, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">logger.info(<span class="string">&quot;\n接收到来自微信服务器的认证消息：[&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;]&quot;</span>, signature, timestamp, nonce, echostr);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isAnyBlank(signature, timestamp, nonce, echostr)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;请求参数非法，请核实!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.wxMpService.switchover(appid)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">&quot;未找到对应appid=[%s]的配置，请核实！&quot;</span>, appid));</span><br><span class="line">&#125;</span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line"><span class="keyword">if</span> (wxMpService.checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">out.write(echostr);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">out.write(<span class="string">&quot;非法请求！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-4、启动内网穿透，点击页面提交"><a href="#1-3-4、启动内网穿透，点击页面提交" class="headerlink" title="1.3.4、启动内网穿透，点击页面提交"></a>1.3.4、启动内网穿透，点击页面提交</h2><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222307220.png" alt="img"></p><h2 id="2、接收与响应消息"><a href="#2、接收与响应消息" class="headerlink" title="2、接收与响应消息"></a>2、接收与响应消息</h2><h3 id="2-1、消息处理器接口"><a href="#2-1、消息处理器接口" class="headerlink" title="2.1、消息处理器接口"></a>2.1、消息处理器接口</h3><p><strong>WxJava</strong> 为了对不同类型的微信消息进行分类处理，用户必须自己实现不同类型的消息处理器，而消息处理器必须实现 <code>WxMpMessageHandler</code> 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理微信推送消息的处理器接口.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WxMpMessageHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理微信推送消息.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> wxMessage      微信推送消息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> context        上下文，如果handler或interceptor之间有信息要传递，可以用这个</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> wxMpService    服务类</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> sessionManager session管理器</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> xml格式的消息，如果在异步规则里处理的话，可以返回null</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> WxErrorException 异常</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">WxMpXmlOutMessage <span class="title">handle</span><span class="params">(WxMpXmlMessage wxMessage,</span></span></span><br><span class="line"><span class="params"><span class="function">                           Map&lt;String, Object&gt; context,</span></span></span><br><span class="line"><span class="params"><span class="function">                           WxMpService wxMpService,</span></span></span><br><span class="line"><span class="params"><span class="function">                           WxSessionManager sessionManager)</span> <span class="keyword">throws</span> WxErrorException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、关注与取消关注事件"><a href="#2-2、关注与取消关注事件" class="headerlink" title="2.2、关注与取消关注事件"></a>2.2、关注与取消关注事件</h3><h4 id="2-2-1、实现消息处理器"><a href="#2-2-1、实现消息处理器" class="headerlink" title="2.2.1、实现消息处理器"></a>2.2.1、实现消息处理器</h4><p>实现一个接收关注、取消关注事件推送的处理。首先定义关注和取消关注的消息处理器存入容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxMpSubscribeHandler</span> <span class="keyword">implements</span> <span class="title">WxMpMessageHandler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WxMpSubscribeHandler.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WxMpXmlOutMessage <span class="title">handle</span><span class="params">(WxMpXmlMessage wxMessage, Map&lt;String, Object&gt; context, WxMpService wxMpService,</span></span></span><br><span class="line"><span class="params"><span class="function">WxSessionManager sessionManager)</span> <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line">logger.info(<span class="string">&quot;新关注用户: &#123;&#125;&quot;</span>, wxMessage.getFromUser());</span><br><span class="line"><span class="comment">// 获取微信用户基本信息</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">WxMpUser userWxInfo = wxMpService.getUserService().userInfo(wxMessage.getFromUser(), <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (userWxInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// TODO 可以添加关注用户到本地数据库</span></span><br><span class="line">logger.info(<span class="string">&quot;用户信息: &#123;&#125;&quot;</span>, userWxInfo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> WxMpXmlOutMessage.TEXT().fromUser(wxMessage.getToUser()).toUser(wxMessage.getFromUser())</span><br><span class="line">.content(<span class="string">&quot;欢迎关注！&quot;</span>).build();</span><br><span class="line">&#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e.getError().getErrorCode() == <span class="number">48001</span>) &#123;</span><br><span class="line">logger.info(<span class="string">&quot;该公众号没有获取用户信息权限！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxMpUnSubscribeHandler</span> <span class="keyword">implements</span> <span class="title">WxMpMessageHandler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WxMpUnSubscribeHandler.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WxMpXmlOutMessage <span class="title">handle</span><span class="params">(WxMpXmlMessage wxMessage, Map&lt;String, Object&gt; context, WxMpService wxMpService,</span></span></span><br><span class="line"><span class="params"><span class="function">WxSessionManager sessionManager)</span> <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line">logger.info(<span class="string">&quot;用户取消关注: &#123;&#125;&quot;</span>, wxMessage.getFromUser());</span><br><span class="line"><span class="comment">// TODO 可以更新本地数据库为取消关注状态</span></span><br><span class="line"><span class="comment">// 因为已经取消关注，所以即使回复消息也收不到</span></span><br><span class="line"><span class="keyword">return</span> WxMpXmlOutMessage.TEXT().fromUser(wxMessage.getToUser()).toUser(wxMessage.getFromUser()).content(<span class="string">&quot;请别离开我&quot;</span>)</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2、指定消息路由规则"><a href="#2-2-2、指定消息路由规则" class="headerlink" title="2.2.2、指定消息路由规则"></a>2.2.2、指定消息路由规则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeiXinMpConfig</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WxMpService wxMpService;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WxMpSubscribeHandler wxMpSubscribeHandler;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WxMpUnSubscribeHandler wxMpUnSubscribeHandler;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeiXinMpConfig</span><span class="params">(WxMpService wxMpService, WxMpSubscribeHandler wxMpSubscribeHandler,</span></span></span><br><span class="line"><span class="params"><span class="function">WxMpUnSubscribeHandler wxMpUnSubscribeHandler)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.wxMpService = wxMpService;</span><br><span class="line"><span class="keyword">this</span>.wxMpSubscribeHandler = wxMpSubscribeHandler;</span><br><span class="line"><span class="keyword">this</span>.wxMpUnSubscribeHandler = wxMpUnSubscribeHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WxMpMessageRouter <span class="title">wxMpMessageRouter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> WxMpMessageRouter router = <span class="keyword">new</span> WxMpMessageRouter(wxMpService);</span><br><span class="line">router.rule().async(<span class="keyword">false</span>).msgType(WxConsts.XmlMsgType.EVENT).event(WxConsts.EventType.SUBSCRIBE)</span><br><span class="line">.handler(wxMpSubscribeHandler).end();</span><br><span class="line">router.rule().async(<span class="keyword">false</span>).msgType(WxConsts.XmlMsgType.EVENT).event(WxConsts.EventType.UNSUBSCRIBE)</span><br><span class="line">.handler(wxMpUnSubscribeHandler).end();</span><br><span class="line"><span class="keyword">return</span> router;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3、编写controller"><a href="#2-2-3、编写controller" class="headerlink" title="2.2.3、编写controller"></a>2.2.3、编写controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(produces = &quot;application/xml; charset=UTF-8&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">(<span class="meta">@PathVariable</span> String appid, <span class="meta">@RequestBody</span> String requestBody,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="meta">@RequestParam(&quot;signature&quot;)</span> String signature, <span class="meta">@RequestParam(&quot;timestamp&quot;)</span> String timestamp,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="meta">@RequestParam(&quot;nonce&quot;)</span> String nonce, <span class="meta">@RequestParam(&quot;openid&quot;)</span> String openid,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="meta">@RequestParam(name = &quot;encrypt_type&quot;, required = false)</span> String encType,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="meta">@RequestParam(name = &quot;msg_signature&quot;, required = false)</span> String msgSignature)</span> </span>&#123;</span><br><span class="line">    logger.info(</span><br><span class="line">        <span class="string">&quot;\n接收微信请求：[appid=[&#123;&#125;], openid=[&#123;&#125;], [signature=[&#123;&#125;], encType=[&#123;&#125;], msgSignature=[&#123;&#125;],&quot;</span></span><br><span class="line">        + <span class="string">&quot; timestamp=[&#123;&#125;], nonce=[&#123;&#125;], requestBody=[\n&#123;&#125;\n] &quot;</span>,</span><br><span class="line">        appid, openid, signature, encType, msgSignature, timestamp, nonce, requestBody);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.wxMpService.switchover(appid)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">&quot;未找到对应appid=[%s]的配置，请核实！&quot;</span>, appid));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!wxMpService.checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;非法请求，可能属于伪造的请求！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (encType == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 明文传输的消息</span></span><br><span class="line">        WxMpXmlMessage inMessage = WxMpXmlMessage.fromXml(requestBody);</span><br><span class="line">        WxMpXmlOutMessage outMessage = <span class="keyword">this</span>.route(inMessage);</span><br><span class="line">        <span class="keyword">if</span> (outMessage == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        out = outMessage.toXml();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;aes&quot;</span>.equalsIgnoreCase(encType)) &#123;</span><br><span class="line">        <span class="comment">// aes加密的消息</span></span><br><span class="line">        WxMpXmlMessage inMessage = WxMpXmlMessage.fromEncryptedXml(requestBody, wxMpService.getWxMpConfigStorage(),</span><br><span class="line">                                                                   timestamp, nonce, msgSignature);</span><br><span class="line">        logger.debug(<span class="string">&quot;\n消息解密后内容为：\n&#123;&#125; &quot;</span>, inMessage.toString());</span><br><span class="line">        WxMpXmlOutMessage outMessage = <span class="keyword">this</span>.route(inMessage);</span><br><span class="line">        <span class="keyword">if</span> (outMessage == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        out = outMessage.toEncryptedXml(wxMpService.getWxMpConfigStorage());</span><br><span class="line">    &#125;</span><br><span class="line">    logger.debug(<span class="string">&quot;\n组装回复信息：&#123;&#125;&quot;</span>, out);</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WxMpXmlOutMessage <span class="title">route</span><span class="params">(WxMpXmlMessage message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.wxMpMessageRouter.route(message);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;路由消息时出现异常！&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4、用户扫码关注"><a href="#2-2-4、用户扫码关注" class="headerlink" title="2.2.4、用户扫码关注"></a>2.2.4、用户扫码关注</h4><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222307242.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222307637.png" alt="img"></p><h4 id="2-2-5、用户取消关注"><a href="#2-2-5、用户取消关注" class="headerlink" title="2.2.5、用户取消关注"></a>2.2.5、用户取消关注</h4><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222307106.png" alt="img"></p><h2 id="3、公众号用户与网站用户绑定重要"><a href="#3、公众号用户与网站用户绑定重要" class="headerlink" title="3、公众号用户与网站用户绑定重要"></a>3、公众号用户与网站用户绑定重要</h2><p>其实在<a href="https://developers.weixin.qq.com/doc/offiaccount/Account_Management/Generating_a_Parametric_QR_Code.html">微信公众号文档</a>中已经给出了答案，为了满足用户渠道推广分析和<strong>用户帐号绑定</strong>等场景的需要，公众平台提供了生成带参数二维码的接口。使用该接口可以获得多个带不同场景值的二维码，用户扫描后，公众号可以接收到事件推送。</p><h3 id="3-1、流程"><a href="#3-1、流程" class="headerlink" title="3.1、流程"></a>3.1、流程</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222308381.jpeg" alt="img"></p><p>一次完整的绑定流程如下：</p><ol><li><p>用户登录网站，进入用户管理列表，点击用户上的”绑定微信账户”按钮；</p></li><li><p>后台使用微信接口，生成二维码链接返回给前端弹框显示，并带上场景值(即当前绑定的用户编号)；</p></li><li><p>如果用户还未关注公众号，用户扫描二维码，并点击关注微信公众号；后台接收微信服务器推送的关注事件，拿到场景值；</p></li><li><p>如果用户已经关注公众号，用户扫描二维码，直接进入公众号会话；后台接收微信服务器推送的扫描事件，拿到场景值；</p></li><li><p>后台将场景值(即当前绑定的用户编号)与微信用户的openId绑定起来；</p></li><li><p>给微信公众号返回”绑定成功”的提示；</p></li><li><p>通知网站前台页面，提示”绑定成功”，刷新页面，并返回一些微信用户信息。</p></li></ol><h3 id="3-2、二维码类型"><a href="#3-2、二维码类型" class="headerlink" title="3.2、二维码类型"></a>3.2、二维码类型</h3><p>目前有2种类型的二维码：</p><ol><li><strong>临时二维码</strong>，是有过期时间的，最长可以设置为在二维码生成后的<strong>30天</strong>（即2592000秒）后过期，但能够生成较多数量。<strong>临时二维码主要用于帐号绑定等不要求二维码永久保存的业务场景</strong></li><li><strong>永久二维码</strong>，是无过期时间的，但数量较少（目前为最多10万个）。<strong>永久二维码主要用于适用于帐号绑定、用户来源统计等场景</strong>。</li></ol><h3 id="3-3、事件推送类型"><a href="#3-3、事件推送类型" class="headerlink" title="3.3、事件推送类型"></a>3.3、事件推送类型</h3><p>用户扫描带场景值二维码时，可能推送以下两种事件：</p><ol><li>如果<strong>用户还未关注公众号</strong>，则用户可以关注公众号，关注后微信会将<strong>带场景值的<strong><strong>关注事件</strong></strong>推送给开发者</strong></li><li>如果<strong>用户已经关注公众号</strong>，在用户扫描后会自动进入会话，微信也会将<strong>带场景值的<strong><strong>扫描事件</strong></strong>推送给开发者</strong></li></ol><h3 id="3-4、生成二维码步骤"><a href="#3-4、生成二维码步骤" class="headerlink" title="3.4、生成二维码步骤"></a>3.4、生成二维码步骤</h3><h4 id="3-4-1、在你的网站页面上生成一个带场景值的二维码，其中的场景值为当前需要绑定的系统用户编号"><a href="#3-4-1、在你的网站页面上生成一个带场景值的二维码，其中的场景值为当前需要绑定的系统用户编号" class="headerlink" title="3.4.1、在你的网站页面上生成一个带场景值的二维码，其中的场景值为当前需要绑定的系统用户编号"></a>3.4.1、在你的网站页面上生成一个带场景值的二维码，其中的场景值为当前需要绑定的系统用户编号</h4><h4 id="3-4-2、创建二维码ticket，每次创建二维码ticket的时候需要提供一个开发者自行设定的参数（scene-id）"><a href="#3-4-2、创建二维码ticket，每次创建二维码ticket的时候需要提供一个开发者自行设定的参数（scene-id）" class="headerlink" title="3.4.2、创建二维码ticket，每次创建二维码ticket的时候需要提供一个开发者自行设定的参数（scene_id）"></a>3.4.2、创建二维码ticket，每次创建二维码ticket的时候需要提供一个开发者自行设定的参数（scene_id）</h4><ul><li>临时二维码请求说明：</li></ul><p>http请求方式: POST URL: <a href="https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=TOKEN">https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=TOKEN</a></p><p>POST数据格式：json POST数据例子：{“expire_seconds”: 604800, “action_name”: “QR_SCENE”, “action_info”: {“scene”: {“scene_id”: 123}}}</p><p>或者也可以使用以下POST数据创建字符串形式的二维码参数：{“expire_seconds”: 604800, “action_name”: “QR_STR_SCENE”, “action_info”: {“scene”: {“scene_str”: “test”}}}</p><ul><li>永久二维码请求说明：</li></ul><p>http请求方式: POST URL: <a href="https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=TOKEN">https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=TOKEN</a></p><p>POST数据格式：json POST数据例子：{“action_name”: “QR_LIMIT_SCENE”, “action_info”: {“scene”: {“scene_id”: 123}}}</p><p>或者也可以使用以下POST数据创建字符串形式的二维码参数： {“action_name”: “QR_LIMIT_STR_SCENE”, “action_info”: {“scene”: {“scene_str”: “test”}}}</p><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>expire_seconds</td><td>该二维码有效时间，以秒为单位。 最大不超过2592000（即30天），此字段如果不填，则默认有效期为30秒。</td></tr><tr><td>action_name</td><td>二维码类型，QR_SCENE为临时的整型参数值，QR_STR_SCENE为临时的字符串参数值，QR_LIMIT_SCENE为永久的整型参数值，QR_LIMIT_STR_SCENE为永久的字符串参数值</td></tr><tr><td>action_info</td><td>二维码详细信息</td></tr><tr><td>scene_id</td><td>场景值ID，临时二维码时为32位非0整型，永久二维码时最大值为100000（目前参数只支持1–100000）</td></tr><tr><td>scene_str</td><td>场景值ID（字符串形式的ID），字符串类型，长度限制为1到64</td></tr></tbody></table><p>返回结果：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222307129.png" alt="img"></p><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>ticket</td><td>获取的二维码ticket，凭借此ticket可以在有效时间内换取二维码。</td></tr><tr><td>expire_seconds</td><td>该二维码有效时间，以秒为单位。 最大不超过2592000（即30天）。</td></tr><tr><td>url</td><td>二维码图片解析后的地址，开发者可根据该地址自行生成需要的二维码图片</td></tr></tbody></table><h4 id="3-4-3、通过ticket换取二维码"><a href="#3-4-3、通过ticket换取二维码" class="headerlink" title="3.4.3、通过ticket换取二维码"></a>3.4.3、通过ticket换取二维码</h4><p>获取二维码ticket后，开发者可用ticket换取二维码图片。请注意，本接口无须登录态即可调用。</p><p>请求说明：</p><p>HTTP GET请求（请使用https协议）<a href="https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=TICKET">https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=TICKET</a> 提醒：TICKET记得进行UrlEncode</p><p>返回结果：二维码图片地址就是下面返回的请求地址。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222308811.png" alt="img"></p><h4 id="3-4-4、代码"><a href="#3-4-4、代码" class="headerlink" title="3.4.4、代码"></a>3.4.4、代码</h4><ul><li>生成带场景值的二维码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成带场景值二维码</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 二维码url</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;qr-code/&#123;userNo&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">createQrCode</span><span class="params">(<span class="meta">@PathVariable</span> String userNo)</span> <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;绑定用户账号为: &#123;&#125;&quot;</span>, userNo);</span><br><span class="line">    <span class="comment">// 获取ticket，时间不填默认30秒，最大30天</span></span><br><span class="line">    WxMpQrCodeTicket ticket =</span><br><span class="line">        <span class="keyword">this</span>.wxMpService.getQrcodeService().qrCodeCreateTmpTicket(userNo, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 根据ticket创建临时二维码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.wxMpService.getQrcodeService().qrCodePictureUrl(ticket.getTicket());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网站显示二维码图片</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222307890.png" alt="img"></p><ul><li>修改消息路由规则</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222307712.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.rule().async(<span class="keyword">false</span>).msgType(WxConsts.XmlMsgType.EVENT).event(WxConsts.EventType.SCAN).handler(wxMpScanHandler).end();</span><br></pre></td></tr></table></figure><ul><li>添加用于处理扫描的消息处理器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxMpScanHandler</span> <span class="keyword">implements</span> <span class="title">WxMpMessageHandler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WxMpScanHandler.class);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WxMpXmlOutMessage <span class="title">handle</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      WxMpXmlMessage wxMessage,</span></span></span><br><span class="line"><span class="params"><span class="function">      Map&lt;String, Object&gt; map,</span></span></span><br><span class="line"><span class="params"><span class="function">      WxMpService wxMpService,</span></span></span><br><span class="line"><span class="params"><span class="function">      WxSessionManager wxSessionManager)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;系统用户账号为：&#123;&#125;&quot;</span>, wxMessage.getEventKey());</span><br><span class="line">    logger.info(<span class="string">&quot;openId: &#123;&#125;&quot;</span>, wxMessage.getFromUser());</span><br><span class="line">    <span class="keyword">return</span> WxMpXmlOutMessage.TEXT()</span><br><span class="line">        .content(<span class="string">&quot;绑定系统用户成功！&quot;</span>)</span><br><span class="line">        .fromUser(wxMessage.getToUser())</span><br><span class="line">        .toUser(wxMessage.getFromUser())</span><br><span class="line">        .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改关注事件消息处理器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxMpSubscribeHandler</span> <span class="keyword">implements</span> <span class="title">WxMpMessageHandler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WxMpSubscribeHandler.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WxMpXmlOutMessage <span class="title">handle</span><span class="params">(WxMpXmlMessage wxMessage, Map&lt;String, Object&gt; context, WxMpService wxMpService,</span></span></span><br><span class="line"><span class="params"><span class="function">WxSessionManager sessionManager)</span> <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(wxMessage.getEventKey())) &#123;</span><br><span class="line">           <span class="comment">// 通过扫描带场景值二维码关注的用户，用于系统绑定用户</span></span><br><span class="line">logger.info(<span class="string">&quot;用户账号为：&#123;&#125;&quot;</span>, wxMessage.getEventKey().split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">logger.info(<span class="string">&quot;新用户关注 OPENID: &#123;&#125;&quot;</span>, wxMessage.getFromUser());</span><br><span class="line">String uri = <span class="string">&quot;http://intelliws.vaiwan.com/api/wx/portal/APPID/callback&quot;</span>;</span><br><span class="line">uri = uri.replace(<span class="string">&quot;APPID&quot;</span>, wxMpService.getWxMpConfigStorage().getAppId());</span><br><span class="line">String href = <span class="string">&quot;欢迎关注！&lt;a href=\&quot;&quot;</span> + wxMpService.getOAuth2Service().buildAuthorizationUrl(uri,</span><br><span class="line">WxConsts.OAuth2Scope.SNSAPI_USERINFO, wxMpService.getWxMpConfigStorage().getToken())</span><br><span class="line">+ <span class="string">&quot;\&quot;&gt;请点击此处进行网页授权，测试用！！！&lt;/a&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> WxMpXmlOutMessage.TEXT().content(href).fromUser(wxMessage.getToUser()).toUser(wxMessage.getFromUser())</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，公众号用户与系统用户绑定的流程就完成了。</p><h2 id="4、模板消息"><a href="#4、模板消息" class="headerlink" title="4、模板消息"></a>4、模板消息</h2><h3 id="4-1、使用规则"><a href="#4-1、使用规则" class="headerlink" title="4.1、使用规则"></a>4.1、使用规则</h3><ol><li><p>所有服务号都可以在功能-&gt;添加功能插件处看到申请模板消息功能的入口，但只有<strong>认证后的服务号才可以申请模板消息的使用权限并获得该权限</strong>；</p></li><li><p>需要选择公众账号服务所处的2个行业，每月可更改1次所选行业；</p></li><li><p>在所选择行业的模板库中选用已有的模板进行调用；</p></li><li><p>每个账号可以同时使用25个模板。</p></li><li><p>当前每个账号的模板消息的<strong>日调用上限为10万次</strong>，单个模板没有特殊限制。【2014年11月18日将接口调用频率从默认的日1万次提升为日10万次，可在MP登录后的开发者中心查看】。当账号粉丝数超过10W/100W/1000W时，模板消息的日调用上限会相应提升，以公众号MP后台开发者中心页面中标明的数字为准。</p></li></ol><h3 id="4-2、模板消息接口"><a href="#4-2、模板消息接口" class="headerlink" title="4.2、模板消息接口"></a>4.2、<a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Template_Message_Interface.html">模板消息接口</a></h3><h4 id="4-2-1、注意点："><a href="#4-2-1、注意点：" class="headerlink" title="4.2.1、注意点："></a>4.2.1、注意点：</h4><ol><li><p>模板消息调用时主要需要模板ID和模板中各参数的赋值内容；</p></li><li><p>模板中参数内容必须以”.DATA”结尾，否则视为保留字；</p></li><li><p>模板保留符号””。</p></li></ol><h4 id="4-2-2、发送模板消息"><a href="#4-2-2、发送模板消息" class="headerlink" title="4.2.2、发送模板消息"></a>4.2.2、发送模板消息</h4><h5 id="4-2-2-1、接口调用请求说明"><a href="#4-2-2-1、接口调用请求说明" class="headerlink" title="4.2.2.1、接口调用请求说明"></a>4.2.2.1、接口调用请求说明</h5><p>http请求方式: POST <a href="https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=ACCESS_TOKEN">https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=ACCESS_TOKEN</a></p><h5 id="4-2-2-2、POST数据说明"><a href="#4-2-2-2、POST数据说明" class="headerlink" title="4.2.2.2、POST数据说明"></a>4.2.2.2、POST数据说明</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;touser&quot;:&quot;OPENID&quot;,</span><br><span class="line">    &quot;template_id&quot;:&quot;ngqIpbwh8bUfcSsECmogfXcV14J0tQlEpBO27izEYtY&quot;,</span><br><span class="line">    &quot;url&quot;:&quot;http://weixin.qq.com/download&quot;,  </span><br><span class="line">    &quot;miniprogram&quot;:&#123;</span><br><span class="line">        &quot;appid&quot;:&quot;xiaochengxuappid12345&quot;,</span><br><span class="line">        &quot;pagepath&quot;:&quot;index?foo=bar&quot;</span><br><span class="line">        &#125;,          </span><br><span class="line">    &quot;data&quot;:&#123;</span><br><span class="line">        &quot;first&quot;: &#123;</span><br><span class="line">            &quot;value&quot;:&quot;恭喜你购买成功！&quot;,</span><br><span class="line">            &quot;color&quot;:&quot;#173177&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">        &quot;keyword1&quot;:&#123;</span><br><span class="line">            &quot;value&quot;:&quot;巧克力&quot;,</span><br><span class="line">            &quot;color&quot;:&quot;#173177&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">        &quot;keyword2&quot;: &#123;</span><br><span class="line">            &quot;value&quot;:&quot;39.8元&quot;,</span><br><span class="line">            &quot;color&quot;:&quot;#173177&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">        &quot;keyword3&quot;: &#123;</span><br><span class="line">            &quot;value&quot;:&quot;2014年9月22日&quot;,</span><br><span class="line">            &quot;color&quot;:&quot;#173177&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">        &quot;remark&quot;:&#123;</span><br><span class="line">            &quot;value&quot;:&quot;欢迎再次购买！&quot;,</span><br><span class="line">            &quot;color&quot;:&quot;#173177&quot;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数说明;</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222307547.png" alt="img"></p><p>注：<strong>url和miniprogram都是非必填字段，若都不传则模板无跳转；若都传，会优先跳转至小程序。开发者可根据实际需要选择其中一种跳转方式即可。当用户的微信客户端版本不支持跳小程序时，将会跳转至url</strong>。</p><h3 id="4-3、添加模板"><a href="#4-3、添加模板" class="headerlink" title="4.3、添加模板"></a>4.3、添加模板</h3><p>如果是认证过后的服务号，可以登录微信公众号后台管理，从模板库中添加，如果找不到适合的模板，还可以申请新模板(一个月只可以申请三个模板)；现在我们可以先在测试号中手动添加模板。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222307607.png" alt="img"></p><p>在测试号中手动添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;first.DATA&#125;&#125; 商家名称：&#123;&#123;keyword1.DATA&#125;&#125; 商家电话：&#123;&#123;keyword2.DATA&#125;&#125; 订单号：&#123;&#123;keyword3.DATA&#125;&#125; 状态：&#123;&#123;keyword4.DATA&#125;&#125; 总价：&#123;&#123;keyword5.DATA&#125;&#125; &#123;&#123;remark.DATA&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222308940.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222307959.png" alt="img"></p><h3 id="4-4、代码"><a href="#4-4、代码" class="headerlink" title="4.4、代码"></a>4.4、代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 发送模板消息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> WxErrorException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;send&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendTemplateMessage</span><span class="params">()</span> <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line">    logger.info(wxMpService.getAccessToken());</span><br><span class="line">    <span class="comment">// 发送模板消息接口</span></span><br><span class="line">    WxMpTemplateMessage templateMessage =</span><br><span class="line">        WxMpTemplateMessage.builder()</span><br><span class="line">        <span class="comment">// 接收者openid</span></span><br><span class="line">        .toUser(<span class="string">&quot;openId&quot;</span>)</span><br><span class="line">        <span class="comment">// 模板id</span></span><br><span class="line">        .templateId(<span class="string">&quot;templateId&quot;</span>)</span><br><span class="line">        <span class="comment">// 模板跳转链接</span></span><br><span class="line">        .url(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="comment">// 添加模板数据</span></span><br><span class="line">    templateMessage</span><br><span class="line">        .addData(<span class="keyword">new</span> WxMpTemplateData(<span class="string">&quot;first&quot;</span>, <span class="string">&quot;用餐愉快哦&quot;</span>, <span class="string">&quot;#FF00FF&quot;</span>))</span><br><span class="line">        .addData(<span class="keyword">new</span> WxMpTemplateData(<span class="string">&quot;keyword1&quot;</span>, <span class="string">&quot;微信点餐&quot;</span>, <span class="string">&quot;#A9A9A9&quot;</span>))</span><br><span class="line">        .addData(<span class="keyword">new</span> WxMpTemplateData(<span class="string">&quot;keyword2&quot;</span>, <span class="string">&quot;13826913333&quot;</span>, <span class="string">&quot;#FF00FF&quot;</span>))</span><br><span class="line">        .addData(<span class="keyword">new</span> WxMpTemplateData(<span class="string">&quot;keyword3&quot;</span>, <span class="string">&quot;2021081722150001&quot;</span>, <span class="string">&quot;#FF00FF&quot;</span>))</span><br><span class="line">        .addData(<span class="keyword">new</span> WxMpTemplateData(<span class="string">&quot;keyword4&quot;</span>, <span class="string">&quot;￥56.5&quot;</span>, <span class="string">&quot;#FF00FF&quot;</span>))</span><br><span class="line">        .addData(<span class="keyword">new</span> WxMpTemplateData(<span class="string">&quot;remark&quot;</span>, <span class="string">&quot;用餐愉快哦&quot;</span>, <span class="string">&quot;#000000&quot;</span>));</span><br><span class="line">    String msgId = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 发送模板消息</span></span><br><span class="line">        msgId = wxMpService.getTemplateMsgService().sendTemplateMsg(templateMessage);</span><br><span class="line">        logger.info(wxMpService.getAccessToken());</span><br><span class="line">        logger.warn(<span class="string">&quot;·==++--·推送微信模板信息：&#123;&#125;·--++==·&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">        System.out.println(wxMpService.getAccessToken());</span><br><span class="line">        logger.warn(<span class="string">&quot;·==++--·推送微信模板信息：&#123;&#125;·--++==·&quot;</span>, <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msgId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，如果想使用redis保存accessToken的话，可以在配置文件中配置并且还要加入redis的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">wx:</span><br><span class="line">  mp:</span><br><span class="line">    app-id: xxxxxxxx</span><br><span class="line">    secret: xxxxxxxx</span><br><span class="line">    token: xxxxxxxx</span><br><span class="line">    config-storage:</span><br><span class="line">      type: redistemplate</span><br><span class="line">        </span><br><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: xxx.xx.xxx.xxx</span><br><span class="line"><span class="comment">&lt;!--wx-java-mp的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wx-java-mp-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.5.B<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--redis的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码仓库 <code>https://e.coding.net/start520823/notes/wx-mp.git</code></p><h2 id="5、公司服务号"><a href="#5、公司服务号" class="headerlink" title="5、公司服务号"></a>5、公司服务号</h2><p>经过如下配置后，就和我们使用测试号就是一样的效果了。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222309928.png" alt="img"></p><p>至此，大功告成！撒花❀❀❀</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><h3 id="1、官方链接"><a href="#1、官方链接" class="headerlink" title="1、官方链接"></a>1、官方链接</h3><h4 id="1-1、微信公众平台测试号"><a href="#1-1、微信公众平台测试号" class="headerlink" title="1.1、微信公众平台测试号"></a>1.1、<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&t=sandbox/index">微信公众平台测试号</a></h4><h4 id="1-2、公众号文档"><a href="#1-2、公众号文档" class="headerlink" title="1.2、公众号文档"></a>1.2、<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html#0">公众号文档</a></h4><h4 id="1-3、公众号后台管理"><a href="#1-3、公众号后台管理" class="headerlink" title="1.3、公众号后台管理"></a>1.3、<a href="https://mp.weixin.qq.com/advanced/advanced?action=dev&t=advanced/dev&token=1012990949&lang=zh_CN">公众号后台管理</a></h4><h4 id="1-4、微信公众平台接口调试工具"><a href="#1-4、微信公众平台接口调试工具" class="headerlink" title="1.4、微信公众平台接口调试工具"></a>1.4、<a href="https://mp.weixin.qq.com/debug/cgi-bin/apiinfo">微信公众平台接口调试工具</a></h4><h3 id="2、WxJava"><a href="#2、WxJava" class="headerlink" title="2、WxJava"></a>2、WxJava</h3><h4 id="2-1、github链接，可以在test目录查看各个功能的用法"><a href="#2-1、github链接，可以在test目录查看各个功能的用法" class="headerlink" title="2.1、github链接，可以在test目录查看各个功能的用法"></a>2.1、<a href="https://github.com/Wechat-Group/WxJava">github链接，可以在test目录查看各个功能的用法</a></h4><h4 id="2-2、开发文档"><a href="#2-2、开发文档" class="headerlink" title="2.2、开发文档"></a>2.2、<a href="https://github.com/Wechat-Group/WxJava/wiki">开发文档</a></h4><h4 id="2-3、wx-java-mp-demo"><a href="#2-3、wx-java-mp-demo" class="headerlink" title="2.3、wx-java-mp-demo"></a>2.3、<a href="https://github.com/binarywang/weixin-java-mp-demo">wx-java-mp-demo</a></h4><h4 id="2-4、容易入手的教程1，2，建议先看这个"><a href="#2-4、容易入手的教程1，2，建议先看这个" class="headerlink" title="2.4、容易入手的教程1，2，建议先看这个"></a>2.4、容易入手的教程<a href="https://www.cnblogs.com/shouyaya/p/13235897.html">1</a>，<a href="https://www.cnblogs.com/runningA/archive/2020/01/24/12221878.html">2</a>，建议先看这个</h4><h4 id="2-5、比较全面的教程"><a href="#2-5、比较全面的教程" class="headerlink" title="2.5、比较全面的教程"></a>2.5、<a href="https://blog.csdn.net/weixin_45070175/article/details/118532572">比较全面的教程</a></h4><h3 id="3、公众号用户与网站用户绑定方案重要"><a href="#3、公众号用户与网站用户绑定方案重要" class="headerlink" title="3、公众号用户与网站用户绑定方案重要"></a>3、<a href="https://www.jianshu.com/p/a51c54ddd0f3">公众号用户与网站用户绑定方案</a>重要</h3>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java开发 </tag>
            
            <tag> 案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora + PicGo + Github</title>
      <link href="/article/b542e004.html"/>
      <url>/article/b542e004.html</url>
      
        <content type="html"><![CDATA[<h2 id="PicGo-免费开源的图片上传与管理工具"><a href="#PicGo-免费开源的图片上传与管理工具" class="headerlink" title="PicGo - 免费开源的图片上传与管理工具"></a>PicGo - 免费开源的图片上传与管理工具</h2><p>我们平时在写 <a href="https://www.markdownguide.org/">Markdown</a>、博客、技术文档的时候，经常要插入图片。然而要贴图（上传图片）时还得登录图床网站/服务器去手动上传和复制链接，操作比较繁琐。</p><p><strong>PicGo</strong> 是一款开源跨平台的免费上传工具以及图床管理工具，它能够帮你快速将图片上传到微博、<a href="https://www.upyun.com/">又拍云</a>、<a href="https://www.aliyun.com/">阿里云 </a>OSS、<a href="https://cloud.tencent.com/?fromSource=gwzcw.2212127.2212127.2212127&utm_medium=cpd&utm_id=gwzcw.2212127.2212127.2212127">腾讯云</a> OSS、<a href="https://www.qiniu.com/">七牛云</a>、<a href="https://github.com/">Github</a>、sm.sm 等常见的图床网站或云存储服务上，并自动复制图片的链接到剪贴板里，使用上非常高效便捷……</p><h2 id="免费开源的图床上传工具应用"><a href="#免费开源的图床上传工具应用" class="headerlink" title="免费开源的图床上传工具应用"></a>免费开源的图床上传工具应用</h2><p><strong>PicGo 图片上传与管理工具</strong>完全免费且开源，跨平台支持 Windows、macOS 和 Linux 系统。它的使用非常简单，只需先设置好图床网站/云存储服务的账号之后，用鼠标将图片拖放到 PicGo 主窗口 / 悬浮窗 / Mac 顶部任务栏图标上面，即可完成图片的上传。</p><p><strong>PicGo</strong> 会自动从图床服务获取到上传完成成功之后的图片链接，然后保存在剪贴板中供你随处粘贴使用，因此当写作、编辑时需要插入图片，你只需要拖放 + 粘贴两步即可搞定，非常方便！而且软件还支持批量上传多张图片。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222250650.gif" alt="img"></p><h2 id="自动获取贴图代码到剪贴板"><a href="#自动获取贴图代码到剪贴板" class="headerlink" title="自动获取贴图代码到剪贴板"></a>自动获取贴图代码到剪贴板</h2><p>图片上传之后，<strong>PicGo</strong> 会自动将图片链接（或贴图代码）复制到剪贴板。<strong>PicGo</strong> 工具提供了5种图片链接/代码格式供你选择，包括 URL（纯链接）、Markdown 代码、HTML 代码、UBB 代码和自定义。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222250932.png" alt="img"></p><h2 id="相册管理"><a href="#相册管理" class="headerlink" title="相册管理"></a>相册管理</h2><p>PicGo 还提供了轻量简单的相册管理功能，可以找到以前上传过的全部图片，在这里你可以对图片进行名称的修改、复制链接、删除、搜索查看等操作。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222250070.gif" alt="img"></p><h2 id="PicGo-Github-搭建图床步骤"><a href="#PicGo-Github-搭建图床步骤" class="headerlink" title="PicGo + Github 搭建图床步骤"></a>PicGo + Github 搭建图床步骤</h2><p>上面讲述了 <strong>PicGo</strong> 如何如何好用，并且可以支持多种图床网站或云存储服务，那么我们所以现在就将这个工具给用起来，利用 <strong>PicGo + Github</strong> 来搭建一款免费好用且稳定的自建图床。</p><h3 id="1、软件准备"><a href="#1、软件准备" class="headerlink" title="1、软件准备"></a>1、软件准备</h3><p>首先下载 <a href="https://github.com/Molunerfinn/PicGo/releases">PicGo </a>软件，我的是 Windows 系统，所以下载 Windows 版本。</p><p>下载完成之后，双击软件进行安装即可投入使用。</p><h3 id="2、Github-创建仓库和秘钥"><a href="#2、Github-创建仓库和秘钥" class="headerlink" title="2、Github 创建仓库和秘钥"></a>2、Github 创建仓库和秘钥</h3><p>首先在 github 上创建一个仓库，名字什么的按照自己喜好来就可。</p><p>仓库创建好之后，接着在 github 的开发者设置页面上新建一个访问令牌，等下会用的到。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222250995.png" alt="img"></p><p>点击底下的创建按钮，将会生成一个秘钥，记得保存好，下次访问的时候就不会出现了。</p><h3 id="3、配置-PicGo"><a href="#3、配置-PicGo" class="headerlink" title="3、配置 PicGo"></a>3、配置 PicGo</h3><p>只勾选 github 图床。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222250326.png" alt="img"></p><p>配置 github 图床。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222250913.png" alt="img"></p><p>其中，</p><p>仓库名称的格式为 用户名 / 仓库名称，比如我的是 xihuanxiaorang/images；</p><p>分支名称为 <code>main</code>；token 为 我们刚刚创建的访问令牌，将其粘贴到这。</p><p>存储路径可以填写 <code>img/</code> 或者不填，直接就在仓库根目录；<br>设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照【 自定义域名 + 上传的图片名 】的方式生成访问链接，放到粘贴板上，因为我们要使用 <code>jsDelivr</code> 加速访问，所以可以设置为 <code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code> 。</p><p>配置完成之后，可以点击一下确定，然后将其设置为默认图床，就可以投入使用了。</p><h3 id="4、使用演示"><a href="#4、使用演示" class="headerlink" title="4、使用演示"></a>4、使用演示</h3><p>使用方式非常简单，看一下就会，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222250707.gif" alt="img"></p><h2 id="Typora-上使用-PicGo"><a href="#Typora-上使用-PicGo" class="headerlink" title="Typora 上使用 PicGo"></a>Typora 上使用 PicGo</h2><p>在 <strong>Typora</strong> 的 偏好配置 / 图像 中可以设置插入图片时上传图片，配置上传服务为 <strong>PicGo</strong>，<strong>PicGo</strong> 的路径为本地 <strong>PicGo</strong> 软件的安装目录。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222251139.png" alt="img"></p><p>配置好之后，就可以开始我们愉快码字和贴图之旅！加油吧，骚年！！！✿✿✿</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 其他工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透</title>
      <link href="/article/bd50b816.html"/>
      <url>/article/bd50b816.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、钉钉内网穿透工具"><a href="#1、钉钉内网穿透工具" class="headerlink" title="1、钉钉内网穿透工具"></a>1、<a href="https://developers.dingtalk.com/document/resourcedownload/http-intranet-penetration">钉钉内网穿透工具</a></h2><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302221.png" alt="img"></p><h3 id="1-1、介绍"><a href="#1-1、介绍" class="headerlink" title="1.1、介绍"></a>1.1、介绍</h3><p>内网穿透工具可以实现将一个公网域名映射到本地的localhost域名</p><h3 id="1-2、使用📎pierced-rar"><a href="#1-2、使用📎pierced-rar" class="headerlink" title="1.2、使用📎pierced.rar"></a>1.2、使用<a href="https://www.yuque.com/attachments/yuque/0/2021/rar/1554080/1629101873533-0a421a56-1f33-4b33-aaad-c52b754edfbe.rar">📎pierced.rar</a></h3><p>下载工具，解压至某文件夹，在该文件夹下打开cmd控制台</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302564.png" alt="img"></p><p>使用如下命令启动内网穿透</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ding.exe -config=ding.cfg -subdomain=intelliws 8500</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-config</td><td>内网穿透的配置文件，按照命令示例固定为钉钉提供的./ding.cfg，无需修改</td></tr><tr><td>-subdomain</td><td>您需要使用的域名前缀，该前缀将会匹配到“vaiwan.com”前面，例如你的subdomain是abcde，启动工具后会将abcde.vaiwan.com映射到本地。</td></tr><tr><td>端口</td><td>您需要代理的本地服务http-server端口，例如你本地端口为8080等</td></tr></tbody></table><p>成功后界面</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302411.png" alt="img"></p><h3 id="1-3、注意"><a href="#1-3、注意" class="headerlink" title="1.3、注意"></a>1.3、注意</h3><ul><li><p>需要访问的域名是<a href="http://abcde.vaiwan.com/xxxxx">http://abcde.vaiwan.com/xxxxx</a> 而不是<a href="http://abcde.vaiwan.com:8080/xxxxx">http://abcde.vaiwan.com:8080/xxxxx</a></p></li><li><p>启动命令的subdomain参数有可能被别人占用，尽量不要用常用字符，可以用自己公司名的拼音，例如：alibaba、dingding等。</p></li><li><p>可以在本地起个http-server服务，放置一个index.html文件，然后访问<a href="http://abcde.vaiwan.com/index.html%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B%E3%80%82">http://abcde.vaiwan.com/index.html测试一下。</a></p></li></ul><h2 id="2、NATAPP"><a href="#2、NATAPP" class="headerlink" title="2、NATAPP"></a>2、<a href="https://natapp.cn/tunnel/buy">NATAPP</a></h2><h3 id="2-1、使用"><a href="#2-1、使用" class="headerlink" title="2.1、使用"></a>2.1、使用</h3><p>注册一个账号登录即可，点击购买隧道，可以选择一个免费隧道(每次启动域名会变化)，有钱的话当然可以购买一个隧道，这里就选择一个免费隧道进行演示(当然不是没钱)。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302014.png" alt="img"></p><p>修改你需要映射到本地的哪个端口。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302916.png" alt="img"></p><p>可以在我的隧道列表看到刚才创建的隧道。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302480.png" alt="img"></p><p>接下来，下载<a href="https://cdn.natapp.cn/assets/downloads/clients/2_3_9/natapp_windows_amd64_2_3_9.zip?version=20190730">natapp客户端</a>，解压之后，打开config文件，将上面创建的隧道中的authtoken复制到配置文件中。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302933.png" alt="img"></p><p>然后，双击打开natapp软件，出现如下界面表示成功运行。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302860.png" alt="img"></p><h2 id="3、Ngrok"><a href="#3、Ngrok" class="headerlink" title="3、Ngrok"></a>3、<a href="https://www.ngrok.cc/">Ngrok</a></h2><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302911.png" alt="img"></p><h3 id="3-1、注册账号并登录"><a href="#3-1、注册账号并登录" class="headerlink" title="3.1、注册账号并登录"></a>3.1、注册账号并登录</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302451.png" alt="img"></p><h3 id="3-2、登录"><a href="#3-2、登录" class="headerlink" title="3.2、登录"></a>3.2、登录</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302907.png" alt="img"></p><h3 id="3-3、创建一个免费的隧道"><a href="#3-3、创建一个免费的隧道" class="headerlink" title="3.3、创建一个免费的隧道"></a>3.3、创建一个免费的隧道</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302996.png" alt="img"></p><h3 id="3-4、填写配置信息"><a href="#3-4、填写配置信息" class="headerlink" title="3.4、填写配置信息"></a>3.4、填写配置信息</h3><p>按照实际情况填写即可，一路点确定即可。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302883.png" alt="img"></p><h3 id="3-5、查看开通的隧道"><a href="#3-5、查看开通的隧道" class="headerlink" title="3.5、查看开通的隧道"></a>3.5、查看开通的隧道</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302323.png" alt="img"></p><h3 id="3-6、下载客户端"><a href="#3-6、下载客户端" class="headerlink" title="3.6、下载客户端"></a>3.6、下载客户端</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302455.png" alt="img"></p><h3 id="3-7、启动客户端"><a href="#3-7、启动客户端" class="headerlink" title="3.7、启动客户端"></a>3.7、启动客户端</h3><p>解压下载好的压缩包，双击 <code>bat</code> 文件，出现运行界面，填入隧道id即可开启映射。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302928.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222303184.png" alt="img"></p><p>到此就启动成功了，撒花！</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222302506.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java开发 </tag>
            
            <tag> 工具 </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题魔改</title>
      <link href="/article/aef1abdc.html"/>
      <url>/article/aef1abdc.html</url>
      
        <content type="html"><![CDATA[<h2 id="butterfly主题魔改css"><a href="#butterfly主题魔改css" class="headerlink" title="butterfly主题魔改css"></a>butterfly主题魔改css</h2><p>在source目录下新建 <code>css/custom.css</code> 文件，在 <code>_config.butterfly.yml</code> 文件中引入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>以下样式可以根据自己喜欢随意增删</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 自定义字体 字体放在source/fonts/目录下 */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;PingFang&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../../fonts/PingFang-Bold.ttf&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页脚透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*页脚自定义字段字体颜色*/</span></span><br><span class="line"><span class="comment">/* 也就是配置文件里的footer_custom_text */</span></span><br><span class="line"><span class="selector-class">.footer_custom_text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 版权链接去掉下划线 */</span></span><br><span class="line"><span class="selector-class">.layout_post</span> <span class="selector-class">.post-copyright</span> <span class="selector-class">.post-copyright-info</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*移动端优化：去除归档、标签、最新文章、公告、、只保留网站统计*/</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">800px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#aside_content</span> <span class="selector-tag">div</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>) &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    width: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    background-color: <span class="number">#e58a8a</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(<span class="number">45deg</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">25%</span>, transparent <span class="number">25%</span>, transparent <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">75%</span>, transparent <span class="number">75%</span>, transparent);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">    color: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e58a8a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 侧边栏天气时钟去掉背景色 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span><span class="selector-class">.aside-content</span> &gt; <span class="selector-class">.sticky_layout</span> &gt; <span class="selector-class">.card-widget</span><span class="selector-class">.card-clock</span> &gt; <span class="selector-class">.card-glass</span> &gt; <span class="selector-class">.card-background</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: unset;</span><br><span class="line">    <span class="attribute">box-shadow</span>: unset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 透明度修改 */</span></span><br><span class="line"><span class="comment">/* 首页文章卡片 */</span></span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页侧栏卡片 */</span></span><br><span class="line"><span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文章页面正文背景 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#post</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分页页面 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#page</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 归档页面 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#archive</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 标签页面 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#tag</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分类页面 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#category</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标样式修改 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur</span>),</span><br><span class="line">    default;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur</span>),</span><br><span class="line">    default;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 搜索框圆角 */</span></span><br><span class="line"><span class="selector-class">.search-dialog</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更换-Twikoo-评论"><a href="#更换-Twikoo-评论" class="headerlink" title="更换 Twikoo 评论"></a>更换 Twikoo 评论</h2><p><a href="https://blog.zhheo.com/p/2e6bbbd0.html">https://blog.zhheo.com/p/2e6bbbd0.html</a></p><h2 id="在首页增加今日诗词侧边栏小组件"><a href="#在首页增加今日诗词侧边栏小组件" class="headerlink" title="在首页增加今日诗词侧边栏小组件"></a>在首页增加今日诗词侧边栏小组件</h2><p>在node_modules中找到butterfly依赖，然后在 <code>layout\includes\widget\</code> 下新增 <code>card_poem.pug</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#card-poem.card-widget</span><br><span class="line">    #poem_sentence</span><br><span class="line">    #poem_info</span><br><span class="line">        #poem_dynasty</span><br><span class="line">        #poem_author</span><br><span class="line">script(src=&#x27;https://cdn.jsdelivr.net/gh/zhheo/JS-Heo@main/poem/jinrishici.js&#x27;, charset=&#x27;utf-8&#x27;)</span><br><span class="line">script(type=&#x27;text/javascript&#x27;).</span><br><span class="line">    jinrishici.load(function(result) &#123;</span><br><span class="line">        var sentence = document.querySelector(&quot;#poem_sentence&quot;)</span><br><span class="line">        var author = document.querySelector(&quot;#poem_author&quot;)</span><br><span class="line">        var dynasty = document.querySelector(&quot;#poem_dynasty&quot;)</span><br><span class="line"></span><br><span class="line">        var sentenceText = result.data.content</span><br><span class="line">        sentenceText = sentenceText.substr(0, sentenceText.length - 1);</span><br><span class="line">        sentence.innerHTML = sentenceText</span><br><span class="line">        dynasty.innerHTML = result.data.origin.dynasty</span><br><span class="line">        author.innerHTML = result.data.origin.author + &#x27;《&#x27; + result.data.origin.title + &#x27;》&#x27;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在同目录的 <code>index.pug</code> 文件你要想的引入地方引入即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!=partial(&#x27;includes/widget/card_poem&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br></pre></td></tr></table></figure><p>最后在 <code>_config.butterfly.yml</code> 文件中引入如下 css 链接：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;&gt;</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">type=&quot;text/css&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/zhheo/JS-Heo@main/mainColor/heoMainColor.css&quot;&gt;</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">type=&quot;text/css&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/zhheo/JS-Heo@main/poem/poem.css&quot;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="嵌入哔哩哔哩视频"><a href="#嵌入哔哩哔哩视频" class="headerlink" title="嵌入哔哩哔哩视频"></a>嵌入哔哩哔哩视频</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=206890880&amp;bvid=BV1Ah411z7Po&amp;cid=378344365&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute; height: 100%; width: 100%;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=206890880&bvid=BV1Ah411z7Po&cid=378344365&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>若依前后端分离项目部署</title>
      <link href="/article/28cee05f.html"/>
      <url>/article/28cee05f.html</url>
      
        <content type="html"><![CDATA[<p>该篇文章是若依前后端分离项目部署，可以先从前面的</p><p>此处为语雀内容卡片，点击链接查看：<a href="https://www.yuque.com/xihuanxiaorang/kgmgfz/sx568u">https://www.yuque.com/xihuanxiaorang/kgmgfz/sx568u</a></p><p>文章开始。</p><h2 id="1、安装redis"><a href="#1、安装redis" class="headerlink" title="1、安装redis"></a>1、安装redis</h2><h3 id="1、搜索redis镜像"><a href="#1、搜索redis镜像" class="headerlink" title="1、搜索redis镜像"></a>1、搜索redis镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314689.png" alt="img"></p><h3 id="2、拉取最新版本的redis镜像"><a href="#2、拉取最新版本的redis镜像" class="headerlink" title="2、拉取最新版本的redis镜像"></a>2、拉取最新版本的redis镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314698.png" alt="img"></p><h3 id="3、查看镜像"><a href="#3、查看镜像" class="headerlink" title="3、查看镜像"></a>3、查看镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314640.png" alt="img"></p><h3 id="4、启动镜像"><a href="#4、启动镜像" class="headerlink" title="4、启动镜像"></a>4、启动镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><p>使用<code>docker ps</code>查看正在运行的容器</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314706.png" alt="img"></p><h3 id="5、进入redis容器"><a href="#5、进入redis容器" class="headerlink" title="5、进入redis容器"></a>5、进入redis容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis /bin/bash</span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314707.png" alt="img"></p><h3 id="6、使用AnotherRedisDestopManager连接redis"><a href="#6、使用AnotherRedisDestopManager连接redis" class="headerlink" title="6、使用AnotherRedisDestopManager连接redis"></a>6、使用<a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases">AnotherRedisDestopManager</a>连接redis</h3><p>如果连接报错，请确保服务器的安全组中开启6379端口。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314163.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314719.png" alt="img"></p><h2 id="2、安装nodejs"><a href="#2、安装nodejs" class="headerlink" title="2、安装nodejs"></a>2、安装nodejs</h2><h3 id="1、进入官网下载最新的nodejs"><a href="#1、进入官网下载最新的nodejs" class="headerlink" title="1、进入官网下载最新的nodejs"></a>1、进入官网下载最新的<a href="https://npm.taobao.org/mirrors/node/v14.15.5/">nodejs</a></h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314740.png" alt="img"></p><h3 id="2、下载完之后通过xftp上传压缩包到服务器"><a href="#2、下载完之后通过xftp上传压缩包到服务器" class="headerlink" title="2、下载完之后通过xftp上传压缩包到服务器"></a>2、下载完之后通过xftp上传压缩包到服务器</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314967.png" alt="img"></p><h3 id="3、解压并移动文件夹到-data-service目录"><a href="#3、解压并移动文件夹到-data-service目录" class="headerlink" title="3、解压并移动文件夹到/data/service目录"></a>3、解压并移动文件夹到<code>/data/service</code>目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf node-v14.15.5-linux-x64.tar.gz</span><br><span class="line">mv node-v14.15.5-linux-x64 /data/service</span><br><span class="line">cd /data/service</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314595.png" alt="img"></p><h3 id="4、配置环境变量"><a href="#4、配置环境变量" class="headerlink" title="4、配置环境变量"></a>4、配置环境变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export NODEJS_HOME=/data/service/node-v14.15.5-linux-x64</span><br><span class="line">export PATH=$PATH:$NODEJS_HOME/bin</span><br></pre></td></tr></table></figure><p>使环境变量生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>检查是否配置成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src="!%5B%5D(https:/cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314595.png)" alt="img"></p><h3 id="5、设置npm镜像源"><a href="#5、设置npm镜像源" class="headerlink" title="5、设置npm镜像源"></a>5、设置npm镜像源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#设置淘宝镜像源</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">#升级npm</span><br><span class="line">npm -g install npm</span><br><span class="line">#查看npm配置</span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314033.png" alt="img"></p><h3 id="6、安装yarn以及设置镜像源"><a href="#6、安装yarn以及设置镜像源" class="headerlink" title="6、安装yarn以及设置镜像源"></a>6、安装yarn以及设置镜像源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#安装yarn</span><br><span class="line">npm install -g yarn</span><br><span class="line">#查看版本号</span><br><span class="line">yarn -v</span><br><span class="line">#设置淘宝镜像源</span><br><span class="line">yarn config set registry https://registry.npm.taobao.org -g</span><br><span class="line">yarn config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g</span><br><span class="line">#查看yarn配置</span><br><span class="line">yarn config list</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314991.png" alt="img"></p><h2 id="3、安装nginx"><a href="#3、安装nginx" class="headerlink" title="3、安装nginx"></a>3、安装nginx</h2><h3 id="1、进入官网下载最新的稳定版ngnix"><a href="#1、进入官网下载最新的稳定版ngnix" class="headerlink" title="1、进入官网下载最新的稳定版ngnix"></a>1、进入官网下载最新的稳定版<a href="https://nginx.org/download/">ngnix</a></h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314160.png" alt="img"></p><h3 id="2、下载完之后通过xftp上传压缩包到服务器-1"><a href="#2、下载完之后通过xftp上传压缩包到服务器-1" class="headerlink" title="2、下载完之后通过xftp上传压缩包到服务器"></a>2、下载完之后通过xftp上传压缩包到服务器</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314672.png" alt="img"></p><h3 id="3、解压编译安装nginx"><a href="#3、解压编译安装nginx" class="headerlink" title="3、解压编译安装nginx"></a>3、解压编译安装nginx</h3><p>首先安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br><span class="line">cd /data/tmp</span><br><span class="line">tar zxvf nginx-1.18.0.tar.gz</span><br><span class="line">cd nginx-1.18.0</span><br><span class="line">./configure --prefix=/data/service/ngnix</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="4、启动ngnix"><a href="#4、启动ngnix" class="headerlink" title="4、启动ngnix"></a>4、启动ngnix</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#启动ngnix</span><br><span class="line">/data/service/ngnix/sbin/nginx</span><br><span class="line">#停止ngnix</span><br><span class="line">/data/service/ngnix/sbin/nginx -s quit</span><br><span class="line">#重启ngnix</span><br><span class="line">/data/service/ngnix/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>如果访问不成功，请确保服务器的安全组中开启80端口。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314169.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222315777.png" alt="img"></p><h2 id="4、运行项目准备"><a href="#4、运行项目准备" class="headerlink" title="4、运行项目准备"></a>4、运行项目准备</h2><h3 id="1、拉取代码"><a href="#1、拉取代码" class="headerlink" title="1、拉取代码"></a>1、拉取代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/gitee</span><br><span class="line">git clone git@gitee.com:y_project/RuoYi-Vue.git</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314685.png" alt="img"></p><h3 id="2、创建数据库以及数据库表"><a href="#2、创建数据库以及数据库表" class="headerlink" title="2、创建数据库以及数据库表"></a>2、创建数据库以及数据库表</h3><p>使用navicat连接，创建数据库 <code>ry-vue</code> 以及执行 <code>quartz.sql</code> 和 <code>ry_20210210.sql</code> 脚本。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222315705.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314852.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314420.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314798.png" alt="img"></p><h3 id="3、修改项目配置"><a href="#3、修改项目配置" class="headerlink" title="3、修改项目配置"></a>3、修改项目配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /data/gitee/RuoYi-Vue/ruoyi-admin/src/main/resources/</span><br><span class="line">#修改application.yml的项目启动端口号与文件上传路径</span><br><span class="line">vim application.yml</span><br><span class="line">#修改application-druid.yml的数据源</span><br><span class="line">vim application-druid.yml</span><br><span class="line">profile: /data/tmp</span><br><span class="line">port: 18081</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314085.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 主库数据源</span><br><span class="line">master:</span><br><span class="line">url: jdbc:mysql://localhost:3306/ry-vue?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span><br><span class="line">username: root</span><br><span class="line">password: 123456</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222315722.png" alt="img"></p><h3 id="4、将项目打成jar包"><a href="#4、将项目打成jar包" class="headerlink" title="4、将项目打成jar包"></a>4、将项目打成jar包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/gitee/RuoYi-Vue/</span><br><span class="line">mvn clean install -pl com.ruoyi:ruoyi-admin -am</span><br></pre></td></tr></table></figure><h3 id="5、启动后端项目"><a href="#5、启动后端项目" class="headerlink" title="5、启动后端项目"></a>5、启动后端项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/app/ruoyi-vue</span><br><span class="line">cp /data/gitee/RuoYi-Vue/ruoyi-admin/target/ruoyi-admin.jar /data/app/ruoyi-vue/ruoyi-admin.jar</span><br><span class="line">cd /data/app/ruoyi-vue/</span><br><span class="line">#后台启动项目</span><br><span class="line">nohup java -jar ruoyi-admin.jar &amp;</span><br><span class="line">#查看项目运行日志</span><br><span class="line">tail -f nohup.out</span><br></pre></td></tr></table></figure><p>如果查看日志的时候，出现18081端口被使用，则表示还有其他应用占用了该端口，关闭应用之后再重新启动即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#列出后台进程</span><br><span class="line">ps -ef | grep java</span><br><span class="line">#杀死进程</span><br><span class="line">kill -9 pid</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314773.png" alt="img"></p><h3 id="6、启动前端项目"><a href="#6、启动前端项目" class="headerlink" title="6、启动前端项目"></a>6、启动前端项目</h3><h4 id="1、下载依赖并打包"><a href="#1、下载依赖并打包" class="headerlink" title="1、下载依赖并打包"></a>1、下载依赖并打包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /data/gitee/RuoYi-Vue/ruoyi-ui</span><br><span class="line">#下载依赖</span><br><span class="line">yarn install</span><br><span class="line"># 打包正式环境</span><br><span class="line">yarn run build:prod</span><br><span class="line"></span><br><span class="line">mkdir /data/app/ruoyi-ui</span><br><span class="line">mv dist/* /data/app/ruoyi-ui/</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314899.png" alt="img"></p><h4 id="2、配置ngnix配置文件"><a href="#2、配置ngnix配置文件" class="headerlink" title="2、配置ngnix配置文件"></a>2、配置ngnix配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim /data/service/ngnix/conf/nginx.conf</span><br><span class="line">location / &#123;</span><br><span class="line">  root   /data/app/ruoyi-ui;</span><br><span class="line">  try_files $uri $uri/ /index.html;</span><br><span class="line">  index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">       </span><br><span class="line">location /prod-api/ &#123;</span><br><span class="line">  proxy_set_header Host $http_host;</span><br><span class="line">  proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">  proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  proxy_pass http://localhost:18081/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、访问项目"><a href="#3、访问项目" class="headerlink" title="3、访问项目"></a>3、访问<a href="http://120.78.177.161/login?redirect=/index">项目</a></h4><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222314759.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 若依 </tag>
            
            <tag> java开发 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>若依前后端不分离项目部署</title>
      <link href="/article/2e2b64e6.html"/>
      <url>/article/2e2b64e6.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、下载安装xshell与xftp"><a href="#1、下载安装xshell与xftp" class="headerlink" title="1、下载安装xshell与xftp"></a>1、下载安装<a href="https://www.netsarang.com/zh/xshell/">xshell</a>与<a href="https://www.netsarang.com/zh/xftp/">xftp</a></h2><p>用于连接阿里云服务器以及上传文件到服务器。</p><h2 id="2、新建目录"><a href="#2、新建目录" class="headerlink" title="2、新建目录"></a>2、新建目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#tmp存放临时安装包</span><br><span class="line">mkdir -p /data/tmp</span><br><span class="line">#service存放软件环境</span><br><span class="line">mkdir -p /data/service</span><br><span class="line">#gitee存放代码版本控制库</span><br><span class="line">mkdir -p /data/gitee</span><br></pre></td></tr></table></figure><h2 id="3、安装jdk"><a href="#3、安装jdk" class="headerlink" title="3、安装jdk"></a>3、安装jdk</h2><h3 id="1、jdk1-8百度云下载"><a href="#1、jdk1-8百度云下载" class="headerlink" title="1、jdk1.8百度云下载"></a>1、<a href="https://blog.csdn.net/qq_42767455/article/details/105724208">jdk1.8百度云</a>下载</h3><h3 id="2、下载完成之后通过xftp上传压缩包到服务器"><a href="#2、下载完成之后通过xftp上传压缩包到服务器" class="headerlink" title="2、下载完成之后通过xftp上传压缩包到服务器"></a>2、下载完成之后通过xftp上传压缩包到服务器</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311709.png" alt="img"></p><h3 id="3、解压并移动文件夹到-data-service目录"><a href="#3、解压并移动文件夹到-data-service目录" class="headerlink" title="3、解压并移动文件夹到/data/service目录"></a>3、解压并移动文件夹到/data/service目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u261-linux-x64.tar.gz</span><br><span class="line">mv jdk1.8.0_261 /data/service</span><br><span class="line">cd /data/service</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><h3 id="4、配置环境变量"><a href="#4、配置环境变量" class="headerlink" title="4、配置环境变量"></a>4、配置环境变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export JAVA_HOME=/data/service/jdk1.8.0_261</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p>使环境变量生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>检查是否配置成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311447.png" alt="img"></p><h2 id="4、安装maven"><a href="#4、安装maven" class="headerlink" title="4、安装maven"></a>4、安装maven</h2><h3 id="1、进入官网下载最新的maven"><a href="#1、进入官网下载最新的maven" class="headerlink" title="1、进入官网下载最新的maven"></a>1、进入官网下载最新的<a href="http://maven.apache.org/download.cgi">maven</a></h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222312947.png" alt="img"></p><h3 id="2、下载完之后通过xftp上传压缩包到服务器"><a href="#2、下载完之后通过xftp上传压缩包到服务器" class="headerlink" title="2、下载完之后通过xftp上传压缩包到服务器"></a>2、下载完之后通过xftp上传压缩包到服务器</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311426.png" alt="img"></p><h3 id="3、解压并移动文件夹到-data-service目录-1"><a href="#3、解压并移动文件夹到-data-service目录-1" class="headerlink" title="3、解压并移动文件夹到/data/service目录"></a>3、解压并移动文件夹到<code>/data/service</code>目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.6.3-bin.tar.gz</span><br><span class="line">mv apache-maven-3.6.3 /data/service</span><br><span class="line">cd /data/service</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222312124.png" alt="img"></p><h3 id="4、配置环境变量-1"><a href="#4、配置环境变量-1" class="headerlink" title="4、配置环境变量"></a>4、配置环境变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export MAVEN_HOME=/data/service/apache-maven-3.6.3</span><br><span class="line">export PATH=$PATH:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure><p>使环境变量生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>检查是否配置成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222312259.png" alt="img"></p><h3 id="5、配置本地仓库地址与阿里云镜像"><a href="#5、配置本地仓库地址与阿里云镜像" class="headerlink" title="5、配置本地仓库地址与阿里云镜像"></a>5、配置本地仓库地址与<a href="https://maven.aliyun.com/mvn/guide">阿里云镜像</a></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /data/service/apache-maven-3.6.3/conf/setting.xml</span><br><span class="line"></span><br><span class="line">#配置本地仓库</span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/data/service/apache-maven-3.6.3/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#配置阿里云镜像</span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、安装git"><a href="#5、安装git" class="headerlink" title="5、安装git"></a>5、安装git</h2><h3 id="1、进入官网下载git"><a href="#1、进入官网下载git" class="headerlink" title="1、进入官网下载git"></a>1、进入官网下载<a href="https://mirrors.edge.kernel.org/pub/software/scm/git/">git</a></h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222312774.png" alt="img"></p><h3 id="2、下载完之后通过xftp上传压缩包到服务器-1"><a href="#2、下载完之后通过xftp上传压缩包到服务器-1" class="headerlink" title="2、下载完之后通过xftp上传压缩包到服务器"></a>2、下载完之后通过xftp上传压缩包到服务器</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222312308.png" alt="img"></p><h3 id="3、解压编译安装git"><a href="#3、解压编译安装git" class="headerlink" title="3、解压编译安装git"></a>3、解压编译安装git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development Tools&quot;</span><br><span class="line">yum install wget unzip gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel libcurl-devel expat-devel -y</span><br><span class="line">cd /data/tmp</span><br><span class="line">tar zxvf git-2.18.0.tar.gz</span><br><span class="line">cd git-2.18.0</span><br><span class="line">./configure --prefix=/data/service/git</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="4、配置环境变量-2"><a href="#4、配置环境变量-2" class="headerlink" title="4、配置环境变量"></a>4、配置环境变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export GIT_HOME=/data/service/git</span><br><span class="line">export PATH=$PATH:$GIT_HOME/bin</span><br></pre></td></tr></table></figure><p>使环境变量生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>检查是否配置成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311515.png" alt="img"></p><h3 id="5、生成-添加SSH公钥"><a href="#5、生成-添加SSH公钥" class="headerlink" title="5、生成/添加SSH公钥"></a>5、<a href="https://gitee.com/help/articles/4181#article-header0">生成/添加SSH公钥</a></h3><h4 id="1、生成公钥"><a href="#1、生成公钥" class="headerlink" title="1、生成公钥"></a>1、生成公钥</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;15019474951@163.com&quot;</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h4 id="2、添加公钥到gitte"><a href="#2、添加公钥到gitte" class="headerlink" title="2、添加公钥到gitte"></a>2、添加公钥到<a href="https://gitee.com/profile/sshkeys">gitte</a></h4><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311697.png" alt="img"></p><h4 id="3、验证"><a href="#3、验证" class="headerlink" title="3、验证"></a>3、验证</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311759.png" alt="img"></p><h3 id="6、拉取ruoyi代码"><a href="#6、拉取ruoyi代码" class="headerlink" title="6、拉取ruoyi代码"></a>6、拉取<a href="https://gitee.com/y_project/RuoYi?_from=gitee_search">ruoyi</a>代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/gitee</span><br><span class="line">git clone git@gitee.com:y_project/RuoYi.git</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311813.png" alt="img"></p><h2 id="6、安装docker"><a href="#6、安装docker" class="headerlink" title="6、安装docker"></a>6、安装<a href="https://docs.docker.com/engine/install/centos/">docker</a></h2><h3 id="1、卸载旧版本"><a href="#1、卸载旧版本" class="headerlink" title="1、卸载旧版本"></a>1、卸载旧版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311584.png" alt="img"></p><h3 id="2、安装依赖"><a href="#2、安装依赖" class="headerlink" title="2、安装依赖"></a>2、安装依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h3 id="3、添加源"><a href="#3、添加源" class="headerlink" title="3、添加源"></a>3、添加源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="4、安装最新的containerd和docker"><a href="#4、安装最新的containerd和docker" class="headerlink" title="4、安装最新的containerd和docker"></a>4、安装最新的containerd和docker</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io -y</span><br></pre></td></tr></table></figure><p>如果安装途中报错，可以进行手动安装新版本的containerd.io</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm</span><br><span class="line">yum install docker-ce docker-ce-cli -y</span><br></pre></td></tr></table></figure><h3 id="5、启动docker并配置开机自启"><a href="#5、启动docker并配置开机自启" class="headerlink" title="5、启动docker并配置开机自启"></a>5、启动docker并配置开机自启</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启动docker</span><br><span class="line">sudo systemctl start docker</span><br><span class="line"># 开机自启</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="6、检测docker版本"><a href="#6、检测docker版本" class="headerlink" title="6、检测docker版本"></a>6、检测docker版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="7、配置阿里云镜像加速器"><a href="#7、配置阿里云镜像加速器" class="headerlink" title="7、配置阿里云镜像加速器"></a>7、配置阿里云<a href="https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors">镜像加速器</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://plb9xzjh.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="7、安装mysql"><a href="#7、安装mysql" class="headerlink" title="7、安装mysql"></a>7、安装mysql</h2><h3 id="1、搜索mysql镜像"><a href="#1、搜索mysql镜像" class="headerlink" title="1、搜索mysql镜像"></a>1、搜索mysql镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311173.png" alt="img"></p><h3 id="2、拉取mysql5-7镜像"><a href="#2、拉取mysql5-7镜像" class="headerlink" title="2、拉取mysql5.7镜像"></a>2、拉取mysql5.7镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222313427.png" alt="img"></p><h3 id="3、查看镜像"><a href="#3、查看镜像" class="headerlink" title="3、查看镜像"></a>3、查看镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311691.png" alt="img"></p><h3 id="4、创建配置文件"><a href="#4、创建配置文件" class="headerlink" title="4、创建配置文件"></a>4、创建配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/docker/mysql/conf</span><br><span class="line">cd /data/docker/mysql/conf</span><br><span class="line">vim my.cnf</span><br></pre></td></tr></table></figure><p>my.cnf 文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><h3 id="5、启动镜像"><a href="#5、启动镜像" class="headerlink" title="5、启动镜像"></a>5、启动镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -v /data/docker/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure><p>使用<code>docker ps</code>查看正在运行的容器</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311974.png" alt="img"></p><h3 id="6、进入mysql容器"><a href="#6、进入mysql容器" class="headerlink" title="6、进入mysql容器"></a>6、进入mysql容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br><span class="line">mysql -uroot -p123456</span><br><span class="line">show databases;</span><br><span class="line"># 退出</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311497.png" alt="img"></p><h3 id="7、使用navicat连接mysql"><a href="#7、使用navicat连接mysql" class="headerlink" title="7、使用navicat连接mysql"></a>7、使用navicat连接mysql</h3><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311500.png" alt="img"></p><p>如果连接报错，请确保服务器的安全组中开启3306端口。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311807.png" alt="img"></p><p>进入mysql容器，设置root账户密码为123456并且允许任何ip访问mysql服务器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br><span class="line">mysql -uroot -p123456</span><br><span class="line">use ruoyi;</span><br><span class="line">grant all privileges on *.* to root@&quot;%&quot; identified by &quot;123456&quot;;</span><br><span class="line">flush privileges;</span><br><span class="line">exit</span><br><span class="line">exit</span><br><span class="line"># 重启mysql服务</span><br><span class="line">sudo docker restart mysql</span><br></pre></td></tr></table></figure><h3 id="8、运行项目准备"><a href="#8、运行项目准备" class="headerlink" title="8、运行项目准备"></a>8、运行项目准备</h3><h4 id="1、创建数据库以及数据库表"><a href="#1、创建数据库以及数据库表" class="headerlink" title="1、创建数据库以及数据库表"></a>1、创建数据库以及数据库表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#复制需要执行的sql文件到docker的映射目录中</span><br><span class="line">cp /data/gitee/RuoYi/sql/quartz.sql /data/docker/mysql/conf/</span><br><span class="line">cp /data/gitee/RuoYi/sql/ry_20210210.sql /data/docker/mysql/conf/</span><br><span class="line">#进入docker容器中，执行sql文件</span><br><span class="line">docker exec -it mysql env LANG=C.UTF-8 bash</span><br><span class="line">#连接mysql</span><br><span class="line">mysql -uroot -p123456</span><br><span class="line">#创建数据库ruoyi</span><br><span class="line">create database if not exists ruoyi character set=&#x27;utf8&#x27;;</span><br><span class="line">#进入数据库，执行sql文件</span><br><span class="line">use ruoyi;</span><br><span class="line">source /etc/mysql/conf.d/quartz.sql;</span><br><span class="line">source /etc/mysql/conf.d/ry_20210210.sql;</span><br><span class="line">#显示创建的表</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311078.png" alt="img"></p><h4 id="2、修改项目配置"><a href="#2、修改项目配置" class="headerlink" title="2、修改项目配置"></a>2、修改项目配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /data/gitee/RuoYi/ruoyi-admin/src/main/resources/</span><br><span class="line">#修改application.yml的项目启动端口号与文件上传路径</span><br><span class="line">vim application.yml</span><br><span class="line">#修改application-druid.yml的数据源</span><br><span class="line">vim application-druid.yml</span><br><span class="line">profile: /data/tmp</span><br><span class="line">port: 18081</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222313496.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 主库数据源</span><br><span class="line">master:</span><br><span class="line">url: jdbc:mysql://localhost:3306/ruoyi?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span><br><span class="line">username: root</span><br><span class="line">password: 123456</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311466.png" alt="img"></p><h4 id="3、将项目打成jar包"><a href="#3、将项目打成jar包" class="headerlink" title="3、将项目打成jar包"></a>3、将项目打成jar包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/gitee/RuoYi/</span><br><span class="line">mvn install</span><br></pre></td></tr></table></figure><h4 id="4、启动项目"><a href="#4、启动项目" class="headerlink" title="4、启动项目"></a>4、启动项目</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/app/ruoyi-admin</span><br><span class="line">cp /data/gitee/RuoYi/ruoyi-admin/target/ruoyi-admin.jar /data/app/ruoyi-admin/ruoyi-admin.jar</span><br><span class="line">cd /data/app/ruoyi-admin/</span><br><span class="line">#后台启动项目</span><br><span class="line">nohup java -jar ruoyi-admin.jar &amp;</span><br><span class="line">#查看项目运行日志</span><br><span class="line">tail -f nohup.out</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311103.png" alt="img"></p><h4 id="5、访问项目"><a href="#5、访问项目" class="headerlink" title="5、访问项目"></a>5、访问项目</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.78.177.161:18081/</span><br></pre></td></tr></table></figure><p>如果访问不成功，请在服务器的安全组中开启18081端口。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311610.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222311183.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 若依 </tag>
            
            <tag> java开发 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/article/7273cdc.html"/>
      <url>/article/7273cdc.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><h3 id="1-1、概念"><a href="#1-1、概念" class="headerlink" title="1.1、概念"></a>1.1、概念</h3><p>Maven 是 Apache 下的一个<strong>纯 Java 开发的开源项目</strong>，是一个<strong>项目构建和管理的工具</strong>。将项目开发和管理过程抽象成一个**项目对象模型(POM)**。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254116.png" alt="img"></p><h3 id="1-2、作用"><a href="#1-2、作用" class="headerlink" title="1.2、作用"></a>1.2、作用</h3><ul><li><p>项目构建：提供标准的、跨平台的自动化项目构建方式</p></li><li><p>依赖管理：方便快捷的管理项目依赖的资源(jar包)，避免资源间的版本冲突问题</p></li><li><p>统一开发结构：提供标准的、统一的项目结构</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254126.png" alt="img"></p><h2 id="2、下载与安装"><a href="#2、下载与安装" class="headerlink" title="2、下载与安装"></a>2、下载与安装</h2><h3 id="2-1、下载"><a href="#2-1、下载" class="headerlink" title="2.1、下载"></a>2.1、<a href="https://maven.apache.org/download.cgi">下载</a></h3><p>我们安装在本地，所以选择windows版本。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254093.png" alt="img"></p><h3 id="2-2、解压"><a href="#2-2、解压" class="headerlink" title="2.2、解压"></a>2.2、解压</h3><p>因为maven是免安装绿色版本，所以直接解压即可使用。</p><p>各目录结构说明：</p><ul><li><p>bin：可执行程序目录</p></li><li><p>boot：maven自身的启动加载器</p></li><li><p>conf：maven配置文件的存放目录</p></li><li><p>lib：maven运行所需库的存放目录</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255714.png" alt="img"></p><h3 id="2-3、配置环境变量"><a href="#2-3、配置环境变量" class="headerlink" title="2.3、配置环境变量"></a>2.3、配置环境变量</h3><p>打开windows设置——&gt;搜索环境变量——&gt;</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255087.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254065.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254322.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254489.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254688.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255394.png" alt="img"></p><p>使用命令 <code>mvn -version</code> 来测试maven是否配置成功</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254496.png" alt="img"></p><p>出现上图字样，则表示maven已经安装配置完毕！撒花❀❀❀</p><h2 id="3、maven基础概念"><a href="#3、maven基础概念" class="headerlink" title="3、maven基础概念"></a>3、maven基础概念</h2><h3 id="3-1、仓库"><a href="#3-1、仓库" class="headerlink" title="3.1、仓库"></a>3.1、仓库</h3><p>用于存储资源，主要是各种jar包。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254238.png" alt="img"></p><h4 id="3-1-1、仓库分类"><a href="#3-1-1、仓库分类" class="headerlink" title="3.1.1、仓库分类"></a>3.1.1、仓库分类</h4><ul><li><p>本地仓库：自己电脑上存储资源的仓库，连接远程仓库获取资源</p></li><li><p>远程仓库：非本机电脑上的仓库，为本地仓库提供资源</p></li><li><ul><li>中央仓库：Maven团队维护，存储所有资源的仓库</li></ul></li><li><p>私服：部门/公司范围内存储资源的仓库，从中央仓库获取资源</p></li></ul><h4 id="3-1-2、私服的作用"><a href="#3-1-2、私服的作用" class="headerlink" title="3.1.2、私服的作用"></a>3.1.2、私服的作用</h4><ul><li>保存具有版权的资源，包含购买或自主研发的jar包；中央仓库中的jar包都是开源的，不能存储具有版权的资源</li><li>一定范围内共享资源，仅对内部开放，不对外共享</li></ul><h3 id="3-2、坐标"><a href="#3-2、坐标" class="headerlink" title="3.2、坐标"></a>3.2、坐标</h3><h4 id="3-2-1、介绍"><a href="#3-2-1、介绍" class="headerlink" title="3.2.1、介绍"></a>3.2.1、介绍</h4><p>maven中的坐标用于描述仓库资源的位置。</p><h4 id="3-2-2、主要组成"><a href="#3-2-2、主要组成" class="headerlink" title="3.2.2、主要组成"></a>3.2.2、主要组成</h4><ul><li><p>groupId：定义当前maven项目隶属组织名称(通常是域名反写，例如org.apache)</p></li><li><p>artifactId：定义当前maven项目名称(通常是模板名称，例如CRM、SMS)</p></li><li><p>version：定义当前项目版本号</p></li></ul><h4 id="3-2-3、作用"><a href="#3-2-3、作用" class="headerlink" title="3.2.3、作用"></a>3.2.3、作用</h4><p>使用唯一标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载工作交由机器完成。</p><h3 id="3-3、仓库配置"><a href="#3-3、仓库配置" class="headerlink" title="3.3、仓库配置"></a>3.3、仓库配置</h3><h4 id="3-3-1、本地仓库配置"><a href="#3-3-1、本地仓库配置" class="headerlink" title="3.3.1、本地仓库配置"></a>3.3.1、本地仓库配置</h4><p>使用nodpad++打开maven解压目录下conf文件夹下的 <code>settings.xml</code> 文件。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254105.png" alt="img"></p><p>打开后，找到第52行，可以看到maven默认下载的jar包放在 <code>$&#123;user.home&#125;/.m2/repository</code>，即用户目录.m2\repository。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222256294.png" alt="img"></p><p>jar默认下载目录。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254050.png" alt="img"></p><p>当然如果想修改jar包下载的地方(即本地仓库)，只需照着如下示例修改成自己的配置即可。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254283.png" alt="img"></p><h4 id="3-3-2、远程仓库配置"><a href="#3-3-2、远程仓库配置" class="headerlink" title="3.3.2、远程仓库配置"></a>3.3.2、远程仓库配置</h4><p>maven默认连接的远程仓库位置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-3、镜像仓库配置-配置阿里云镜像"><a href="#3-3-3、镜像仓库配置-配置阿里云镜像" class="headerlink" title="3.3.3、镜像仓库配置(配置阿里云镜像)"></a>3.3.3、镜像仓库配置(<a href="https://developer.aliyun.com/mvn/guide">配置阿里云镜像</a>)</h4><p>在打开的 <code>settings.xml</code> 配置文件中找到 <code>&lt;mirrors&gt;&lt;/mirrors&gt;</code> 标签中添加 <code>&lt;mirror&gt;&lt;/mirror&gt;</code> 节点。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222256922.png" alt="img"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--此镜像的唯一标识符，用来区分不同的mirror元素--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--对哪种仓库进行镜像，简单的说就是替代哪个仓库 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--镜像名称--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--镜像URL--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、maven项目"><a href="#4、maven项目" class="headerlink" title="4、maven项目"></a>4、maven项目</h2><h3 id="4-1、idea的maven配置"><a href="#4-1、idea的maven配置" class="headerlink" title="4.1、idea的maven配置"></a>4.1、idea的maven配置</h3><p>当前项目的maven配置</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254145.png" alt="img"></p><p><strong>当创建新项目时的maven配置</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254925.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222256662.png" alt="img"></p><h3 id="4-2、maven项目构建命令"><a href="#4-2、maven项目构建命令" class="headerlink" title="4.2、maven项目构建命令"></a>4.2、maven项目构建命令</h3><p>maven构建命令使用 <code>mvn</code> 开头，后面添加参数，可以一次执行多个命令，使用空格分隔。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mvn compile #编译</span><br><span class="line">mvn clean #清理</span><br><span class="line">mvn test #测试</span><br><span class="line">mvn package#打包</span><br><span class="line">mvn install #安装到本地仓库</span><br></pre></td></tr></table></figure><p>如果是使用idea，则可以使用图形化界面快捷操作。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254528.png" alt="img"></p><h3 id="4-3、创建空的maven项目"><a href="#4-3、创建空的maven项目" class="headerlink" title="4.3、创建空的maven项目"></a>4.3、创建空的maven项目</h3><p>使用idea创建一个空的maven项目。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222257017.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254346.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222257122.png" alt="img"></p><p>查看当前项目的结构，使用快捷键 <code>ctrl+alt+shift+s</code> 或者使用如下操作：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254864.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254317.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222257388.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254761.png" alt="img"></p><h3 id="4-4、创建maven的web项目"><a href="#4-4、创建maven的web项目" class="headerlink" title="4.4、创建maven的web项目"></a>4.4、创建maven的web项目</h3><p>使用idea创建一个maven的web项目。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254699.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254565.png" alt="img"></p><p>开始从阿里云仓库上下载资源。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254758.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254314.png" alt="img"></p><p><strong>安装tomcat插件</strong></p><p>在项目的 <code>pom.xml</code> 配置文件中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222257598.png" alt="img"></p><p>双击运行 <code>tomcat7:run</code> 命令启动web项目：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254651.png" alt="img"></p><p>访问本地80端口，可以看到运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254611.png" alt="img"></p><h2 id="5、依赖管理"><a href="#5、依赖管理" class="headerlink" title="5、依赖管理"></a>5、依赖管理</h2><h3 id="5-1、依赖配置"><a href="#5-1、依赖配置" class="headerlink" title="5.1、依赖配置"></a>5.1、依赖配置</h3><ul><li>依赖指的是当前项目运行所需要的jar包，一个项目可以设置多个依赖。</li><li>格式：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置当前项目所依赖的所有jar包坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--设置具体的依赖坐标--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖所属的组织Id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖所属的项目Id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖的版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2、依赖传递重要"><a href="#5-2、依赖传递重要" class="headerlink" title="5.2、依赖传递重要"></a>5.2、依赖传递重要</h3><ul><li><p>依赖具有传递性</p></li><li><ul><li>直接依赖：在当前项目中通过依赖配置建立的依赖关系</li></ul></li><li><p>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源（比较拗口，意思就是如果A依赖B，而B依赖C，那么A就间接依赖C）</p></li><li><p>依赖传递冲突问题</p></li><li><ul><li>路径最短者优先原则：当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</li></ul></li><li><p>路径相同先声明优先原则：当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的</p></li><li><ul><li>特殊优先：当同级配置了相同资源的不同版本，后配置的覆盖先配置的（概率是书写错误，不应该出现这种情况）</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254675.png" alt="img"></p><h3 id="5-3、可选依赖"><a href="#5-3、可选依赖" class="headerlink" title="5.3、可选依赖"></a>5.3、可选依赖</h3><p>可选依赖指对外隐藏当前所依赖的资源—不透明。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4、排除依赖重要"><a href="#5-4、排除依赖重要" class="headerlink" title="5.4、排除依赖重要"></a>5.4、排除依赖重要</h3><p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本—不需要。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-5、依赖范围重要"><a href="#5-5、依赖范围重要" class="headerlink" title="5.5、依赖范围重要"></a>5.5、依赖范围重要</h3><p>依赖的jar包默认情况下可以在任何地方使用，可以通过scope标签设定其作用范围</p><p>作用范围：</p><ul><li><p>主程    序范围有效（main文件夹范围内）</p></li><li><p>测试程序范围有效（test文件夹范围内）</p></li><li><p>是否参与打包（package指令范围内）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222254652.png" alt="img"></p><h3 id="5-6、依赖范围传递性（了解）"><a href="#5-6、依赖范围传递性（了解）" class="headerlink" title="5.6、依赖范围传递性（了解）"></a>5.6、依赖范围传递性（了解）</h3><p>带有依赖范围的资源在进行传递时，作用范围将受到影响。具体看使用效果。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222258437.png" alt="img"></p><h2 id="6、生命周期与插件"><a href="#6、生命周期与插件" class="headerlink" title="6、生命周期与插件"></a>6、生命周期与插件</h2><h3 id="6-1、项目构建生命周期"><a href="#6-1、项目构建生命周期" class="headerlink" title="6.1、项目构建生命周期"></a>6.1、项目构建生命周期</h3><h4 id="6-1-1、介绍"><a href="#6-1-1、介绍" class="headerlink" title="6.1.1、介绍"></a>6.1.1、介绍</h4><p>maven构建生命周期描述的是一次构建过程经历了多少个事件</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255513.png" alt="img"></p><h4 id="6-1-2、3个阶段"><a href="#6-1-2、3个阶段" class="headerlink" title="6.1.2、3个阶段"></a>6.1.2、3个阶段</h4><p>maven对项目构建的生命周期划分为3个阶段。</p><h5 id="6-1-2-1、clean生命周期"><a href="#6-1-2-1、clean生命周期" class="headerlink" title="6.1.2.1、clean生命周期"></a>6.1.2.1、clean生命周期</h5><ol><li><p>pre-clean：执行一些需要在clean之前完成的工作</p></li><li><p>clean：移除所有上一次构建生成的文件</p></li><li><p>post-clean：执行一些需要在clean之后立刻完成的工作</p></li></ol><h5 id="6-1-2-2、default构建生命周期"><a href="#6-1-2-2、default构建生命周期" class="headerlink" title="6.1.2.2、default构建生命周期"></a>6.1.2.2、default构建生命周期</h5><p>核心工作是编译、测试、打包、安装、部署。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222258037.png" alt="img"></p><p><strong>在执行某一个操作时，同时会执行该操作前面的所有操作</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255224.png" alt="img"></p><h5 id="6-1-2-3、site构建生命周期"><a href="#6-1-2-3、site构建生命周期" class="headerlink" title="6.1.2.3、site构建生命周期"></a>6.1.2.3、site构建生命周期</h5><ol><li><p>pre-site：执行一些需要在生成站点文档之前完成的工作</p></li><li><p>site：生成项目的站点文档</p></li><li><p>post-site：执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</p></li><li><p>site-deploy：将生成的站点文档部署到特定的服务器上</p></li></ol><h3 id="6-2、插件重要"><a href="#6-2、插件重要" class="headerlink" title="6.2、插件重要"></a>6.2、插件重要</h3><ul><li><p>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能</p></li><li><p>默认maven在各个生命周期上绑定有预设的功能</p></li><li><p>通过插件可以自定义其他功能</p></li></ul><p>用户可以根据需要将任何插件目标绑定到任何生命周期的任何阶段，如配置在 <code>generate-test-resources</code> <strong>生成测试资源文件阶段</strong>的时候使用 <code>maven-source-plugin</code> 插件将main文件夹进行源码打包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-test-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span> </span><br><span class="line">         <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、聚合重要"><a href="#7、聚合重要" class="headerlink" title="7、聚合重要"></a>7、聚合重要</h2><h3 id="7-1、作用"><a href="#7-1、作用" class="headerlink" title="7.1、作用"></a>7.1、作用</h3><p>用于快速构建maven工程，一次性构建多个项目/模块。即编译、测试、打包、部署该模块的时候会同时操作关联的模块。</p><h3 id="7-2、制作方式"><a href="#7-2、制作方式" class="headerlink" title="7.2、制作方式"></a>7.2、制作方式</h3><ol><li>创建一个空模块，打包类型定义为pom</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>定义当前模块进行构建操作时关联的其他模块名称，注意，<code>module</code>内的值为关联模块的pom文件相对于当前pom文件所在文件夹目录。</li></ol><p>如下示例就是关联模块与当前模块平级，如果关联模块位于当前模块文件夹内，则没有<code>../</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--当前父模块有哪些子模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../ssm_controller<span class="tag">&lt;/<span class="name">module</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../ssm_service<span class="tag">&lt;/<span class="name">module</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../ssm_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../ssm_pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意事项：参与聚合操作的模块最终执行顺序与模块间的依赖有关，与配置顺序无关。</p><h2 id="8、继承重要"><a href="#8、继承重要" class="headerlink" title="8、继承重要"></a>8、继承重要</h2><h3 id="8-1、作用"><a href="#8-1、作用" class="headerlink" title="8.1、作用"></a>8.1、作用</h3><p>通过继承可以实现在子模块中沿用父模块中的配置。</p><h3 id="8-2、制作方式"><a href="#8-2、制作方式" class="headerlink" title="8.2、制作方式"></a>8.2、制作方式</h3><p>在子模块中声明其父模块坐标与pom文件的位置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义该模块的父模块 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 填写父模块的pom文件所在位置 --&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../ssm/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3、依赖继承"><a href="#8-3、依赖继承" class="headerlink" title="8.3、依赖继承"></a>8.3、依赖继承</h3><p><strong>子模块将自动继承父模块中的依赖</strong>。</p><p>父模块<code>maven-java</code>中引入 <code>spring-boot-starter</code> 依赖，子模块 <code>maven-java-001</code>和<code>maven-java-002</code>将自动继承父模块<code>maven-java</code>中 <code>spring-boot-starter</code> 的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xiaorang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven-java-001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven-java-002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义属性列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在该标签中编写的依赖，子模块会自动继承--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255621.png" alt="img"></p><h3 id="8-4、依赖管理"><a href="#8-4、依赖管理" class="headerlink" title="8.4、依赖管理"></a>8.4、依赖管理</h3><p><strong>在父模块中进行依赖管理</strong>，<strong>子模块中需要声明式的引入依赖</strong>，但是<strong>无需声明依赖版本</strong>，<strong>版本将使用父模块依赖管理中依赖的版本号</strong>，达到由父模块统一控制依赖的版本号。</p><p>在父模块中进行依赖管理：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在该标签中声明的依赖，子模块可以选择性的继承，同时省略版本号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--具体的依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子模块中声明式引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9、聚合与继承的异同点"><a href="#9、聚合与继承的异同点" class="headerlink" title="9、聚合与继承的异同点"></a>9、聚合与继承的异同点</h2><ol><li><p>作用：</p></li><li><ol><li>聚合用于快速构建项目</li></ol></li><li><p>继承用于快速配置</p></li><li><p>相同点：</p></li><li><ol><li>聚合与继承的pom.xml文件打包方式均为pom，可以将两种关系制作到同一pom文件中</li></ol></li><li><p>聚合与继承均属于设计型模块，并无实际的模块内容</p></li><li><p>不同点：</p></li><li><ol><li>聚合时在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些</li></ol></li><li><p>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</p></li></ol><h2 id="10、属性重要"><a href="#10、属性重要" class="headerlink" title="10、属性重要"></a>10、属性重要</h2><p>问题：如果对于spring的资源版本都应该使用<code>5.1.9.RELEASE</code>版本，但是你其中一个资源写错了，写的不是这个版本号或者说想将spring的资源版本都升级到<code>5.2.0.RELEASE</code>版本，这个时候你是不是需要将所有的spring资源的版本号都改成<code>5.2.0.RELEASE</code>版本。</p><p>方案：<strong>属性</strong></p><h3 id="10-1、自定义属性"><a href="#10-1、自定义属性" class="headerlink" title="10.1、自定义属性"></a>10.1、自定义属性</h3><ol><li>作用：等同于定义变量，方便统一维护版本号。</li><li>定义格式：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义自定义属性--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>调用格式：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-2、内置属性"><a href="#10-2、内置属性" class="headerlink" title="10.2、内置属性"></a>10.2、内置属性</h3><ol><li>作用：使用maven内置属性，快速配置。</li><li>调用格式：<code>$&#123;basedir&#125; $&#123;version&#125;</code></li></ol><h3 id="10-3、Setting属性"><a href="#10-3、Setting属性" class="headerlink" title="10.3、Setting属性"></a>10.3、Setting属性</h3><ol><li>作用：使用maven配置文件<code>setting.xml</code>中的标签属性，用于动态配置。</li><li>调用格式：<code>$&#123;settings.localRepository</code></li></ol><h3 id="10-4、Java系统属性"><a href="#10-4、Java系统属性" class="headerlink" title="10.4、Java系统属性"></a>10.4、Java系统属性</h3><ol><li><p>作用：读取Java系统属性</p></li><li><p>调用格式：<code>$&#123;user.home&#125;</code></p></li><li><p>系统属性查询方式：<code>mvn help:system</code></p></li></ol><h3 id="10-5、环境变量属性"><a href="#10-5、环境变量属性" class="headerlink" title="10.5、环境变量属性"></a>10.5、环境变量属性</h3><ol><li><p>作用：使用maven配置文件<code>setting.xml</code>中的标签属性，用于动态配置</p></li><li><p>调用格式：<code>$&#123;env.JAVA_HOME&#125;</code></p></li><li><p>环境变量属性查询方式：<code>mvn help:system</code></p></li></ol><h2 id="11、版本管理"><a href="#11、版本管理" class="headerlink" title="11、版本管理"></a>11、版本管理</h2><h3 id="11-1、工程版本"><a href="#11-1、工程版本" class="headerlink" title="11.1、工程版本"></a>11.1、工程版本</h3><ol><li><p>SNAPSHOT(快照版本)</p></li><li><ol><li>项目开发过程中，为方便团队成员合作，解决模块间相互依赖和时时更新的问题，开发者对每个模块进行构建的时候，输出的临时性版本就叫快照版本（测试阶段版本）</li></ol></li><li><p>快照版本会随着开发的进展不断更新</p></li><li><p>RELEASE(发布版本)</p></li><li><ol><li>项目开发进入阶段里程碑后，向团队外部发布较为稳定的版本，这种版本对应的构件文件是稳定的，即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本成为发布版本</li></ol></li></ol><h3 id="11-2、工程版本号约定"><a href="#11-2、工程版本号约定" class="headerlink" title="11.2、工程版本号约定"></a>11.2、工程版本号约定</h3><p>约定规范：</p><ul><li><p>&lt;主版本&gt;.&lt;次版本&gt;.&lt;增量版本&gt;.&lt;里程碑版本&gt;</p></li><li><p>主版本：表示项目重大架构的变更，如Spring5相较于Spring4的迭代</p></li><li><p>次版本：表示有较大的功能增加和变化，或者全面系统的修复漏洞</p></li><li><p>增量版本：表示有重大漏洞的修复</p></li><li><p>里程碑版本：表明一个版本的里程碑（版本内部）。这样的版本同下一个正式版本相比，相对来说不是很稳定，有待更多的测试</p></li></ul><h2 id="12、资源配置"><a href="#12、资源配置" class="headerlink" title="12、资源配置"></a>12、资源配置</h2><ol><li><p>作用：在任意配置文件引用pom文件中定义的属性。</p></li><li><p>调用格式：<code>$&#123;属性名&#125;</code></p></li><li><p>如何开启配置文件可以加载pom文件中定义的属性：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置资源文件对应的信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设定配置文件对应的位置目录，支持使用属性动态设定路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启对配置文件的资源加载过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="13、多环境开发配置"><a href="#13、多环境开发配置" class="headerlink" title="13、多环境开发配置"></a>13、多环境开发配置</h2><h3 id="13-1、多环境配置"><a href="#13-1、多环境配置" class="headerlink" title="13.1、多环境配置"></a>13.1、多环境配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建多环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--定义具体的环境：生产环境--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义环境对应的唯一名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义环境中的专用的属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.1.1.1:3306/test<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置默认启动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--定义具体的环境：开发环境--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--格式同上--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="13-2、加载指定环境"><a href="#13-2、加载指定环境" class="headerlink" title="13.2、加载指定环境"></a>13.2、加载指定环境</h3><ol><li><p>作用：加载指定环境配置</p></li><li><p>调用格式：<code>mvn 指令 -p 环境定义id</code></p></li><li><p>范例：<code>mvn install -p pro</code></p></li></ol><h2 id="14、跳过测试"><a href="#14、跳过测试" class="headerlink" title="14、跳过测试"></a>14、跳过测试</h2><h3 id="14-1、必要性"><a href="#14-1、必要性" class="headerlink" title="14.1、必要性"></a>14.1、必要性</h3><p>如执行maven打包发布项目时，如果测试类中有测试用例代码，打包maven默认会将测试用例一起编译并执行，编译执行不通过则会报错。</p><h3 id="14-2、方法"><a href="#14-2、方法" class="headerlink" title="14.2、方法"></a>14.2、方法</h3><h4 id="14-2-1、使用mvn命令"><a href="#14-2-1、使用mvn命令" class="headerlink" title="14.2.1、使用mvn命令"></a>14.2.1、使用mvn命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下</span></span><br><span class="line">mvn clean install -DskipTests</span><br><span class="line"><span class="meta">#</span><span class="bash"> 不执行测试用例，也不编译测试用例类</span></span><br><span class="line">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><h4 id="14-2-2、使用idea的maven界面"><a href="#14-2-2、使用idea的maven界面" class="headerlink" title="14.2.2、使用idea的maven界面"></a>14.2.2、使用idea的maven界面</h4><p>没有跳过测试时，双击执行打包，控制台输出没有测试用例需要执行。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222259868.png" alt="img"></p><p>点击跳过测试后，test生命周期图标变灰，双击执行打包时，控制台输出测试用例已跳过。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255877.png" alt="img"></p><h4 id="14-2-3、使用配置文件"><a href="#14-2-3、使用配置文件" class="headerlink" title="14.2.3、使用配置文件"></a>14.2.3、使用配置文件</h4><p>添加 <code>maven-surefire-plugin</code> 插件，设置跳过测试。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span><span class="comment">&lt;!--设置跳过测试--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到即使没有点击跳过测试按钮，双击执行打包时，控制台输出的依然是测试用例已跳过。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255183.png" alt="img"></p><p><strong>详细指定</strong>：</p><ol><li><p>包名路径，文件名带后缀</p></li><li><p>支持通配符*，其中<code>**</code>表示任何包，<code>*</code>表示任何字符</p></li><li><p><code>excludes</code>优先级高于<code>includes</code></p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--详细指定要跑的测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span>&gt;</span>com/jerry/AppTest*.java<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--详细指定排除的测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com/jerry/AppTest.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com/jerry/AppTest1.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="15、自定义骨架"><a href="#15、自定义骨架" class="headerlink" title="15、自定义骨架"></a>15、自定义骨架</h2><p>maven官方通过插件给我们提供了大量的模板，但是这些模板或多或少的都存在一定的问题，无法满足我们实际的需求，所以我们需要根据自己的需求自定义模板出来。</p><h3 id="15-1、生成模板"><a href="#15-1、生成模板" class="headerlink" title="15.1、生成模板"></a>15.1、生成模板</h3><p>根据已经存在的项目创建骨架，在pom.xml文件中添加骨架插件 <code>maven-archetype-plugin</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-archetype-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在idea的maven界面中可以看到这个插件</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255709.png" alt="img"></p><p>使用mvn命令将该项目做成骨架或者使用idea界面的插件按钮</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create-from-project</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255729.png" alt="img"></p><p>生成骨架的时候如果出现如下错误，需要在maven安装目录将mvn.cmd复制拷贝一份，名字改成mvn.bat。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255981.png" alt="img"></p><p>骨架生成成功</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255334.png" alt="img"></p><p>切换到生成的骨架项目目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd target\generated-sources\archetype</span><br></pre></td></tr></table></figure><p>向本地仓库中发布</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255891.png" alt="img"></p><p>最后执行<code>mvn archetype:crawl</code>命令 或者使用idea的maven界面中的插件按钮</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222300266.png" alt="img"></p><p>执行完毕之后，在maven的本地仓库目录中生成一个archetype-catalog.xml文件。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255948.png" alt="img"></p><h3 id="15-2、使用模板"><a href="#15-2、使用模板" class="headerlink" title="15.2、使用模板"></a>15.2、使用模板</h3><p>idea安装 <code>maven archetype catalogs</code> 插件</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222300347.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255377.png" alt="img"></p><p>添加成功之后，在新建maven项目的时候就可以选到刚才创建的骨架。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255665.png" alt="img"></p><h2 id="16、私服"><a href="#16、私服" class="headerlink" title="16、私服"></a>16、私服</h2><h3 id="16-1、简介"><a href="#16-1、简介" class="headerlink" title="16.1、简介"></a>16.1、简介</h3><p>私服是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构件。有了私服之后，当maven需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255610.png" alt="img"></p><h3 id="16-2、必要性-优点"><a href="#16-2、必要性-优点" class="headerlink" title="16.2、必要性(优点)"></a>16.2、必要性(优点)</h3><ol><li><p><strong>减少网络带宽流量</strong>。如果没有私服，我们所需的所有构件都需要通过maven的中央仓库或者第三方的maven仓库下载到本地，而一个团队中的所有人都重复的从maven仓库下载构件无疑加大了仓库的负载和浪费了外网带宽，如果网速慢的话，还会影响项目的进程。</p></li><li><p><strong>一定范围内共享资源，仅对内部开放，不对外共享</strong>。很多情况下项目的开发都是再内网进行的，可能根本连接不了maven的中央仓库和第三方的maven仓库。</p></li><li><p><strong>加速maven构建</strong></p></li><li><p><strong>部署第三方构件</strong></p></li><li><p><strong>提高稳定性、增强控制</strong></p></li><li><p><strong>降低中央仓库的负载</strong></p></li></ol><h3 id="16-3、Nexus"><a href="#16-3、Nexus" class="headerlink" title="16.3、Nexus"></a>16.3、Nexus</h3><h4 id="16-3-1、简介"><a href="#16-3-1、简介" class="headerlink" title="16.3.1、简介"></a>16.3.1、简介</h4><p>Nexus 是一个专门的 maven 仓库管理软件，它不仅能够搭建 maven 私服，还具有如下一些优点使其日趋成为最流行的 maven 仓库管理器。</p><ul><li><p>提供了强大的仓库管理功能，构件搜索功能</p></li><li><p>它基于 REST，友好的 UI 是一个 ext.js 的 REST 客户端</p></li><li><p>它占用较少的内存</p></li><li><p>基于简单文件系统而非数据库</p></li></ul><h4 id="16-3-2、下载安装运行"><a href="#16-3-2、下载安装运行" class="headerlink" title="16.3.2、下载安装运行"></a>16.3.2、下载安装运行</h4><ol><li>使用docker安装nexus3。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search nexus</span><br><span class="line">docker pull sonatype/nexus3</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255677.png" alt="img"></p><ol><li>创建docker-compose.yml文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/local/docker/nexus/docker-compose.yml</span><br><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  nexus:</span><br><span class="line">    restart: always</span><br><span class="line">    image: sonatype/nexus3</span><br><span class="line">    container_name: nexus3</span><br><span class="line">    ports:</span><br><span class="line">      - 8081:8081</span><br><span class="line">    volumes:</span><br><span class="line">      - /usr/local/docker/nexus/nexus-data:/nexus-data</span><br></pre></td></tr></table></figure><p>:wq保存退出。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255594.png" alt="img"></p><ol><li>运行nexus3，如果访问不成功，则需要给nexus-data文件夹赋权限<code>chmod 777 nexus-data/</code>。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 使用docker-compose启动</span><br><span class="line">docker-compose up -d </span><br><span class="line"># 使用docker-compose停止</span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255468.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255387.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255383.png" alt="img"></p><p>需要查看nexus-data文件夹下的admin.password文件，里面记录了密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat admin.password</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255654.png" alt="img"></p><p>登录之后会出现弹窗界面需要你修改密码。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222301482.png" alt="img"></p><h4 id="16-3-3、配置本地仓库访问私服的权限"><a href="#16-3-3、配置本地仓库访问私服的权限" class="headerlink" title="16.3.3、配置本地仓库访问私服的权限"></a>16.3.3、配置本地仓库访问私服的权限</h4><p>在maven安装目录下的settings.xml配置文件中的servers中添加serve节点，因为私服不是谁都可以使用，所以需要配置用户名和密码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="16-3-4、配置当前项目访问私服上传资源的保存位置"><a href="#16-3-4、配置当前项目访问私服上传资源的保存位置" class="headerlink" title="16.3.4、配置当前项目访问私服上传资源的保存位置"></a>16.3.4、配置当前项目访问私服上传资源的保存位置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://120.78.177.161:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://120.78.177.161:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发布资源到私服命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy</span><br></pre></td></tr></table></figure><p>注意：id名称需要与settings.xml配置文件中server节点配置的id保持一致。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255864.png" alt="img"></p><p>可以看到项目快照版本已经上传到私服。</p><h4 id="16-3-5、设置代理仓库-用于下载资源"><a href="#16-3-5、设置代理仓库-用于下载资源" class="headerlink" title="16.3.5、设置代理仓库(用于下载资源)"></a>16.3.5、设置代理仓库(用于下载资源)</h4><p>在测试的时候，先将本地仓库的依赖先删除掉，迫使项目去私服中下载。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 私服仓库配置:从私服下载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://120.78.177.161:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Plugin Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://120.78.177.161:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果没有开启匿名访问，在下载资源的时候会报没有权限下载。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255596.png" alt="img"></p><p>开启匿名访问</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255069.png" alt="img"></p><p>idea配置maven总是更新快照。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255915.png" alt="img"></p><p>依赖下载成功</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255724.png" alt="img"></p><h4 id="16-3-6、上传第三方jar包"><a href="#16-3-6、上传第三方jar包" class="headerlink" title="16.3.6、上传第三方jar包"></a>16.3.6、上传第三方jar包</h4><p>打开cmd，先跳转到第三方jar包资源目录，然后执行如下mvn命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.2.28 -Dpackaging=jar -Dfile=fastjson-1.2.28.jar -Durl=http://120.78.177.161:8081/repository/maven-releases/ -DrepositoryId=nexus-releases</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255205.png" alt="img"></p><p>查看nexus-releases仓库，发现有我们上传的第三方jar包。</p><p><img src="https://cdn.jsdelivr.net/gh/xihuanxiaorang/images/img/202109222255031.png" alt="img"></p><p>至此，大功告成！！！先告一段落，❀❀❀</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java开发 </tag>
            
            <tag> 工具 </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
